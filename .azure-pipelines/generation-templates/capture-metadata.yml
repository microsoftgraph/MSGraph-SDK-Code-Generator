# Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
# contains an end to end validation pipeline using C# compilation tests for staging beta metadata

# capture-metadata.yml will result in the capture and cleaning of the metadata
# with the artifacts posted to GitHub.

parameters:
- name: 'endpoint'
  type: string
  default: "v1.0"
- name: 'inputMetadata'
  type: string
  default: $(rawMetadataFileV1)
- name: 'outputPath'
  type: string
  default: $(System.ArtifactsDirectory)
- name: 'cleanMetadataFile'
  type: string
  default: $(cleanMetadataFileV1)
- name: 'cleanMetadataFolder'
  type: string
- name: 'cleanMetadataFileWithAnnotations'
  type: string
  default: $(cleanMetadataFileWithAnnotationsV1)

steps:

# We only need the scripts
- checkout: self
  displayName: checkout generator
  fetchDepth: 1
  persistCredentials: true

- checkout: microsoft-graph-docs
  displayName: checkout graph docs
  fetchDepth: 1
  persistCredentials: true

- template: checkout-metadata.yml
- template: set-user-config.yml

# Results in a raw metadata file written to microsoftgraph/msgraph-metadata if there are changes.
# An error will cancel this step if there are no changes.
- pwsh: '$(scriptsDirectory)/download-diff-metadata.ps1'
  displayName: 'diff and publish ${{ parameters.endpoint }} metadata'
  env:
    errorOnNoChange: 1
    endpointVersion: ${{ parameters.endpoint }}
    targetBranch: 'master'
    inputMetadataFile: ${{ parameters.inputMetadata }}
  enabled: true

- template: download-typewriter.yml

- template: use-dotnet-sdk.yml

## Only run if the previous step was successful
- pwsh: '$(scriptsDirectory)/run-typewriter-clean-metadata.ps1'
  env:
    OutputPath: ${{ parameters.outputPath }}
    InputMetadataFile: ${{ parameters.inputMetadata }}
    TypewriterExecutable: $(typewriterExecutable)
    TypewriterDirectory: $(typewriterDirectory)
    DocsDirectory: $(docsDirectory)
    GenerationMode: 'TransformWithDocs'
    Transform: $(transformScript)
    endpointVersion: ${{ parameters.endpoint }}
  displayName: 'run Typewriter to clean ${{ parameters.endpoint }} metadata'

  ## Only run if the previous step was successful
- pwsh: '$(scriptsDirectory)/run-typewriter-clean-metadata.ps1'
  env:
    OutputPath: ${{ parameters.outputPath }}
    InputMetadataFile: ${{ parameters.inputMetadata }}
    TypewriterExecutable: $(typewriterExecutable)
    TypewriterDirectory: $(typewriterDirectory)
    DocsDirectory: $(docsDirectory)
    GenerationMode: 'TransformWithDocs'
    Transform: $(transformScript)
    endpointVersion: ${{ parameters.endpoint }}
    RemoveAnnotations: 'false'
    OutputMetadataFileName: 'cleanMetadataWithDescriptionsAndAnnotations'
  displayName: 'run Typewriter to clean ${{ parameters.endpoint }} metadata and keep capability annotations'

  ## Only run if the previous step was successful
- pwsh: '$(scriptsDirectory)/run-typewriter-clean-metadata.ps1'
  env:
    OutputPath: ${{ parameters.outputPath }}
    InputMetadataFile: ${{ parameters.inputMetadata }}
    TypewriterExecutable: $(typewriterExecutable)
    TypewriterDirectory: $(typewriterDirectory)
    DocsDirectory: $(docsDirectory)
    GenerationMode: 'TransformWithDocs'
    Transform: $(transformScript)
    endpointVersion: ${{ parameters.endpoint }}
    RemoveAnnotations: 'false'
    AddInnerErrorDescription: 'true'
    OutputMetadataFileName: 'cleanMetadataWithDescriptionsAndAnnotationsAndErrors'
  displayName: 'run Typewriter to clean ${{ parameters.endpoint }} metadata and keep capability annotations and include error information'

# publish metadata as an artifact
- task: CopyFiles@2
  inputs:
    sourceFolder: ${{ parameters.outputPath }}
    contents: '**/*'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: Copy generated metadata

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: ${{ parameters.cleanMetadataFolder }}

# Use the clean metadata from the last step to generate DotNet files.

- template: use-dotnet-sdk.yml

# verify that generated metadata is parsable as an Edm model
- pwsh: $(Build.SourcesDirectory)/msgraph-metadata/scripts/run-metadata-validation.ps1 -repoDirectory "$(Build.SourcesDirectory)/msgraph-metadata/" -version "${{ parameters.endpoint }}"
  displayName: 'verify whether metadata is parsable as an Edm model'

# Checkin clean metadata into metadata repo or make it an artifact.
- pwsh: '$(scriptsDirectory)/git-push-cleanmetadata.ps1'

  displayName: push clean ${{ parameters.endpoint }} metadata to msgraph-metadata repo
  env:
    EndpointVersion: ${{ parameters.endpoint }}
    PublishChanges: $(publishChanges)
  workingDirectory: '$(Build.SourcesDirectory)/msgraph-metadata'
  enabled: true
