parameters:
- name: 'endpoint'
  type: string
  default: "v1.0"
- name: 'outputPath'
  type: string
  default: $(System.ArtifactsDirectory)
- name: 'cleanMetadataFolder'
  type: string
jobs:
- job: get_conversion_settings
  displayName: "Get conversion settings"
  steps:
  - checkout: self
    displayName: checkout generator
    fetchDepth: 1
    persistCredentials: true

  - template: /.azure-pipelines/generation-templates/checkout-metadata.yml@self
  - pwsh: |
      $dirPath = "./conversion-settings"
      $endpoint = "${{ parameters.endpoint }}"
      Write-Host "endpoint: $endpoint"
      Write-Host "directory path: $dirPath"
      $jsonBase = @{}
      foreach ($f in Get-ChildItem $dirPath -Recurse -Include *.json) {
        $name = $f.Name.replace('.json','')
        $data = @{"File"=$f.Name;"Name"=$name;}
        $key = "$endpoint-$name"
        $jsonBase.Add($key,$data)
      }
      $json = $jsonBase | ConvertTo-Json -Compress
      Write-Host "##vso[task.setvariable variable=targets;isOutput=true]$json"
    name: setTargets
    workingDirectory: $(Build.SourcesDirectory)/msgraph-metadata
  - script: echo $(setTargets.targets)
    displayName: "Print settings"
- job: convert_openapi
  dependsOn: get_conversion_settings
  displayName: Convert
  strategy:
    matrix: $[ dependencies.get_conversion_settings.outputs['setTargets.targets'] ]
  variables:
    targets: $[ dependencies.get_conversion_settings.outputs['setTargets.targets'] ]
  templateContext:
    outputs:
    - output: pipelineArtifact
      targetPath: '${{ parameters.outputPath }}'
      artifactName: ${{ parameters.cleanMetadataFolder }}
  steps:
  - checkout: self
    displayName: checkout generator
    fetchDepth: 1
    persistCredentials: true

  - template: /.azure-pipelines/generation-templates/checkout-metadata.yml@self

  # required for the hidi to run
  - template: /.azure-pipelines/generation-templates/use-dotnet-sdk.yml@self
    parameters:
      version: '8.x'

# required for the hidi installation validation
  - template: /.azure-pipelines/generation-templates/use-dotnet-sdk.yml@self
    parameters:
      version: '9.x'

  - pwsh: dotnet tool install --global Microsoft.OpenApi.Hidi --version 1.6.24
    displayName: install hidi

  - pwsh: |
      git fetch origin master
      git switch master
    displayName: ensure the generation happens from master latest
    workingDirectory: $(Build.SourcesDirectory)/msgraph-metadata

  - pwsh: '$(scriptsDirectory)/generate-open-api.ps1 -endpointVersion ${{ parameters.endpoint }} -settings "$(conversionSettingsDirectory)/$(File)" -platformName "$(Name)"'
    displayName: 'update ${{ parameters.endpoint }} open API description'
    workingDirectory: $(Build.SourcesDirectory)/msgraph-metadata

  # publish metadata as an artifact
  - task: CopyFiles@2
    inputs:
      sourceFolder: ${{ parameters.outputPath }}
      contents: '**/$(Name).yaml'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
    displayName: Copy generated metadata
  - pwsh: |
      ./scripts/run-openapi-validation.ps1 -repoDirectory (Get-Location).Path -version "${{ parameters.endpoint }}" -platformName "$(Name)"
    displayName: ensure that OpenAPI docs can be parsed
    workingDirectory: $(Build.SourcesDirectory)/msgraph-metadata


- job: publish_openapi
  dependsOn: convert_openapi
  displayName: Publish
  templateContext:
    inputs:
    - input: pipelineArtifact
      targetPath: $(Build.SourcesDirectory)/msgraph-metadata/openapi/${{ parameters.endpoint }}
      artifactName: ${{ parameters.cleanMetadataFolder }}
  steps:
  # We only need the scripts
  - checkout: self
    displayName: checkout generator
    fetchDepth: 1
    persistCredentials: true
  - template: /.azure-pipelines/generation-templates/checkout-metadata.yml@self
  - template: /.azure-pipelines/generation-templates/set-user-config.yml@self
  - pwsh: '$(scriptsDirectory)/git-push-cleanmetadata.ps1'

    displayName: push clean ${{ parameters.endpoint }} OpenAPI description to msgraph-metadata repo
    env:
      EndpointVersion: ${{ parameters.endpoint }}
      PublishChanges: $(publishChanges)
    workingDirectory: '$(Build.SourcesDirectory)/msgraph-metadata'
    enabled: true
