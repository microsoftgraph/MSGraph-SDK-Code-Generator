// Template Source: BaseMethodRequest.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.requests.extensions;
import com.microsoft.graph.models.extensions.EntityType3;
import com.microsoft.graph.requests.extensions.IEntityType2ActOnEntityType2Request;
import com.microsoft.graph.requests.extensions.EntityType2ActOnEntityType2Request;

import com.microsoft.graph.concurrency.ICallback;
import com.microsoft.graph.concurrency.IExecutors;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.http.BaseRequest;
import com.microsoft.graph.http.HttpMethod;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Entity Type2Act On Entity Type2Request.
 */
public class EntityType2ActOnEntityType2Request extends BaseRequest implements IEntityType2ActOnEntityType2Request {

    /**
     * The request for this EntityType2ActOnEntityType2
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public EntityType2ActOnEntityType2Request(final String requestUrl, final IBaseClient client, final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, EntityType3.class);
    }

    /**
     * Gets the EntityType3
     *
     * @param callback the callback to be called after success or failure
     */
    public void get(final ICallback<? super EntityType3> callback) {
        send(HttpMethod.GET, callback, null);
    }

    /**
     * Gets the EntityType3
     *
     * @return the EntityType3
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
    public EntityType3 get() throws ClientException {
       return send(HttpMethod.GET, null);
    }

    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    public IEntityType2ActOnEntityType2Request select(final String value) {
        getQueryOptions().add(new com.microsoft.graph.options.QueryOption("$select", value));
        return (EntityType2ActOnEntityType2Request)this;
    }

    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    public IEntityType2ActOnEntityType2Request expand(final String value) {
        getQueryOptions().add(new com.microsoft.graph.options.QueryOption("$expand", value));
        return (EntityType2ActOnEntityType2Request)this;
    }

    /**
     * Sets the filter clause for the request
     *
     * @param value the filter clause
     * @return the updated request
     */
    public IEntityType2ActOnEntityType2Request filter(final String value) {
        getQueryOptions().add(new com.microsoft.graph.options.QueryOption("$filter", value));
        return (EntityType2ActOnEntityType2Request)this;
    }

    /**
     * Sets the order by clause for the request
     *
     * @param value the order by clause
     * @return the updated request
     */
    public IEntityType2ActOnEntityType2Request orderBy(final String value) {
        getQueryOptions().add(new com.microsoft.graph.options.QueryOption("$orderby", value));
        return (EntityType2ActOnEntityType2Request)this;
    }

}
