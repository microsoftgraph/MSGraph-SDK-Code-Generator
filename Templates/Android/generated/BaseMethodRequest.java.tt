<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = BaseTypeRequest(c);#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

<#=CreateClassDef(BaseTypeRequest(c), "BaseRequest", IBaseTypeRequest(c))#>

    /**
     * The request for this <#=TypeName(c)#>
     *
     * @param requestUrl The request url
     * @param client The service client
     * @param requestOptions The options for this request
     */
    public <#=BaseTypeRequest(c)#>(final String requestUrl, final <#=IBaseClientType()#> client, final java.util.List<Option> requestOptions) {
        super(requestUrl, client, requestOptions, <#=ReturnType(c)#>.class);
    }

<#
if (c.AsOdcmMethod().IsAction()) {
    if (c.AsOdcmMethod().ReturnType != null) {
#>
    /**
     * Creates the <#=TypeName(c)#>
     *
     * @param callback The callback to be called after success or failure.
     */
    public void post(final ICallback<<#=ReturnType(c)#>> callback) {
        send(HttpMethod.POST, callback, null);
    }

    /**
     * Creates the <#=TypeName(c)#>
     *
     * @return The <#=ReturnType(c)#>
     * @throws ClientException An exception occurs if there was an error while the request was sent.
     */
    public <#=ReturnType(c)#> post() throws ClientException {
       return send(HttpMethod.POST, null);
    }

<#
        if (c.GetFeatures().CanSelect) {
#>
    /**
     * Sets the select clause for the request
     *
     * @param value The select clause
     * @return The updated request
     */
    public <#=ITypeRequest(c)#> select(final String value) {
        getQueryOptions().add(new QueryOption("$select", value));
        return (<#=TypeRequest(c)#>)this;
    }

<#
        }

        if (c.GetFeatures().CanExpand) {
#>
    /**
     * Sets the expand clause for the request
     *
     * @param value The expand clause
     * @return The updated request
     */
    public <#=ITypeRequest(c)#> expand(final String value) {
        getQueryOptions().add(new QueryOption("$expand", value));
        return (<#=TypeRequest(c)#>)this;
    }

<#
        }

        if (c.AsOdcmProperty() != null && c.AsOdcmProperty().IsCollection && c.GetFeatures().CanUseTop) {
#>

    /**
     * Sets the top value for the request
     *
     * @param value The max number of items to return
     * @return The updated request
     */
    public <#=ITypeRequest(c)#> top(final int value) {
        getQueryOptions().add(new QueryOption("$top", value+""));
        return (<#=TypeRequest(c)#>)this;
    }
<#
        }
    } else {
#>
    /**
     * Creates the <#=TypeName(c)#>
     *
     * @param callback The callback to be called after success or failure.
     */
    public void post(final ICallback<Void> callback) {
        final IExecutors executors = getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    post();
                    executors.performOnForeground((Void)null, callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    /**
     * Creates the <#=TypeName(c)#>
     *
     * @throws ClientException An exception occurs if there was an error while the request was sent.
     */
    public void post() throws ClientException {
        this.send(HttpMethod.POST, null);
    }
<#
    }
} else { // FUNCTIONS
    if (c.AsOdcmMethod().ReturnType != null) {
#>
    /**
     * Gets the <#=ReturnType(c)#>
     *
     * @param callback The callback to be called after success or failure.
     */
    public void get(final ICallback<<#=ReturnType(c)#>> callback) {
        send(HttpMethod.GET, callback, null);
    }

    /**
     * Gets the <#=ReturnType(c)#>
     *
     * @return The <#=ReturnType(c)#>
     * @throws ClientException An exception occurs if there was an error while the request was sent.
     */
    public <#=ReturnType(c)#> get() throws ClientException {
       return send(HttpMethod.GET, null);
    }

<#
        if (c.GetFeatures().CanSelect) {
#>
    /**
     * Sets the select clause for the request
     *
     * @param value The select clause
     * @return The updated request
     */
    public <#=ITypeRequest(c)#> select(final String value) {
        getQueryOptions().add(new QueryOption("$select", value));
        return (<#=TypeRequest(c)#>)this;
    }

<#
        }

        if (c.GetFeatures().CanExpand) {
#>
    /**
     * Sets the expand clause for the request
     *
     * @param value The expand clause
     * @return The updated request
     */
    public <#=ITypeRequest(c)#> expand(final String value) {
        getQueryOptions().add(new QueryOption("$expand", value));
        return (<#=TypeRequest(c)#>)this;
    }

<#
        }

        if (c.AsOdcmProperty() != null && c.AsOdcmProperty().IsCollection && c.GetFeatures().CanUseTop) {
#>

    /**
     * Sets the top value for the request
     *
     * @param value The max number of items to return
     * @return The updated request
     */
    public <#=ITypeRequest(c)#> top(final int value) {
        getQueryOptions().add(new QueryOption("$top", value+""));
        return (<#=TypeRequest(c)#>)this;
    }
<#
        }
    } else {
#>
    public void get(final ICallback<Void> callback) {
        final IExecutors executors = getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    get();
                    executors.performOnForeground((Void)null, callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    public void get() throws ClientException {
        this.send(HttpMethod.GET, null);
    }
<#
    }
}
#>
}
