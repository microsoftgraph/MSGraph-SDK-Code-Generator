<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = BaseTypeReferenceRequest(c);#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

<#=CreateClassDef(BaseTypeReferenceRequest(c), "BaseRequest", IBaseTypeReferenceRequest(c))#>

    /**
     * The request for the <#=TypeName(c)#>
     *
     * @param requestUrl The request url
     * @param client The service client
     * @param options The options for this request
     */
    public <#=BaseTypeReferenceRequest(c)#>(String requestUrl, <#=IBaseClientType()#> client, List<Option> options) {
        super(requestUrl, client, options, <#=ClassTypeName(c)#>.class);
    }

    public void delete(final ICallback<<#=TypeName(c)#>> callback) {
        send(HttpMethod.DELETE, callback, null);
    }

    public <#=TypeName(c)#> delete() throws ClientException {
       return send(HttpMethod.DELETE, null);
    }

<# if (c.GetFeatures().CanSelect) { #>
    /**
     * Sets the select clause for the request
     *
     * @param value The select clause
     * @return The updated request
     */
    public <#=ITypeReferenceRequest(c)#> select(final String value) {
        getQueryOptions().add(new QueryOption("$select", value));
        return (<#=TypeReferenceRequest(c)#>)this;
    }

<# } #>
<# if (c.GetFeatures().CanExpand) { #>
    /**
     * Sets the expand clause for the request
     *
     * @param value The expand clause
     * @return The updated request
     */
    public <#=ITypeReferenceRequest(c)#> expand(final String value) {
        getQueryOptions().add(new QueryOption("$expand", value));
        return (<#=TypeReferenceRequest(c)#>)this;
    }
<# } #>
}
