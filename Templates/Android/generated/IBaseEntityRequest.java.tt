<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = IBaseTypeRequest(c);#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>

<#=CreateInterfaceDef(IBaseTypeRequest(c), "IHttpRequest")#>

<#  if (c.AsOdcmClass().IsAbstract && c.AsOdcmClass().Base == null)
    {
        // Do nothing
    }
    else if (c.AsOdcmClass().Derived.Any() && c.AsOdcmClass().Base != null)
    { #>
<#=getMethods(c)#>
<#=deleteMethods(c)#>
<#=patchMethods(c)#>
<#=postMethods(c)#>
<#  }
    else if (!c.AsOdcmClass().Derived.Any() && c.AsOdcmClass().Base != null)
    { #>
<#=getMethods(c)#>
<#=deleteMethods(c)#>
<#=patchMethods(c)#>
<#=postMethods(c)#>
<#  }
    else if (c.AsOdcmClass().Base == null)
    { #>
<#=getMethods(c)#>
<#=deleteMethods(c)#>
<#=patchMethods(c)#>
<#=postMethods(c)#>
<#  }
    else
    {

    }
#>
<# if (c.GetFeatures().CanSelect) { #>
    /**
     * Sets the select clause for the request
     *
     * @param value The select clause
     * @return The updated request
     */
    <#=IBaseTypeRequest(c)#> select(final String value);

<# } #>
<# if (c.GetFeatures().CanExpand) { #>
    /**
     * Sets the expand clause for the request
     *
     * @param value The expand clause
     * @return The updated request
     */
    <#=IBaseTypeRequest(c)#> expand(final String value);

<# } #>
<# if (c.AsOdcmProperty() != null && c.AsOdcmProperty().IsCollection && c.GetFeatures().CanUseTop) { #>

    /**
     * Sets the top value for the request
     *
     * @param value The max number of items to return
     * @return The updated request
     */
    <#=IBaseTypeRequest(c)#> top(final int value);
<# } #>
}
<#+
    public String deleteMethods(OdcmObject c)
    {
        var odcmObject = c.AsOdcmClass();
        var formatString =
@"    /**
     * Delete this item from the service.
     * @param callback The callback when the deletion action has completed
     */
    void delete(final ICallback<Void> callback);

    /**
     * Delete this item from the service.
     * @throws ClientException if there was an exception during the delete operation
     */
    void delete() throws ClientException;
";
        return formatString;
    }

    public string getMethods(OdcmObject c)
    {
        var odcmObject = c.AsOdcmClass();
        var formatString =
@"    /**
     * Gets the {0} from the service
     * @param callback The callback to be called after success or failure.
     */
    void get{1}(final ICallback<{0}> callback);

    /**
     * Gets the {0} from the service
     * @return The {0} from the request.
     * @throws ClientException This exception occurs if the request was unable to complete for any reason.
     */
    {0} get{1}() throws ClientException;
";
        return string.Format(formatString, TypeName(odcmObject), odcmObject.Derived.Any() ? TypeName(odcmObject) : string.Empty );
    }

    public string patchMethods(OdcmObject c)
    {
        var odcmObject = c.AsOdcmClass();
        var formatString =
@"    /**
     * Patches this {0} with a source
     * @param source{0} The source object with updates
     * @param callback The callback to be called after success or failure.
     */
    void patch(final {0} source{0}, final ICallback<{0}> callback);

    /**
     * Patches this {0} with a source
     * @param source{0} The source object with updates
     * @return The updated {0}
     * @throws ClientException This exception occurs if the request was unable to complete for any reason.
     */
    {0} patch(final {0} source{0}) throws ClientException;
";
        return string.Format(formatString, TypeName(odcmObject));
    }

    public string postMethods(OdcmObject c)
    {
        var odcmObject = c.AsOdcmClass();
        var formatString =
@"    /**
     * Posts a {0} with a new object
     * @param new{0} The new object to create
     * @param callback The callback to be called after success or failure.
     */
    void post(final {0} new{0}, final ICallback<{0}> callback);

    /**
     * Posts a {0} with a new object
     * @param new{0} The new object to create
     * @return The created {0}
     * @throws ClientException This exception occurs if the request was unable to complete for any reason.
     */
    {0} post(final {0} new{0}) throws ClientException;
";
        return string.Format(formatString, TypeName(odcmObject));
    }
 #>
