<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = BaseTypeCollectionRequestBuilder(c);#>
<#=writer.WriteHeader()#>
<#=CreatePackageDef(host)#>
<# bool isPost = IsPostRequestType(c.AsOdcmMethod()); #>
<#=CreateClassDef(BaseTypeCollectionRequestBuilder(c), RequestBuilderSuperClass(c), IBaseTypeCollectionRequestBuilder(c))#>

<# foreach (var method in c.AsOdcmMethod().WithOverloads()) { #>
    /**
     * The request builder for this collection of <#=ClassTypeName(c)#>
     *
     * @param requestUrl The request url
     * @param client The service client
     * @param options The options for this request
     */
    public <#=BaseTypeCollectionRequestBuilder(c)#>(final String requestUrl, final <#=IBaseClientType()#> client, final List<Option> options<#=MethodParametersSignature(method)#>) {
        super(requestUrl, client, options);
<# foreach (var p in method.Parameters) { #>
  <# if (isPost) { #>
      mBodyParams.put("<#=ParamName(p)#>", <#=ParamName(p)#>);
  <# } else { #>
      mFunctionOptions.add(new FunctionOption("<#=ParamName(p)#>", <#=ParamName(p)#>));
  <# } #>
<# } #>
    }
<# } #>

    public <#=ITypeCollectionRequest(c)#> buildRequest() {
        return buildRequest(getOptions());
    }

    public <#=ITypeCollectionRequest(c)#> buildRequest(final List<Option> options) {
        <#= TypeCollectionRequest(c)#> request = new <#=TypeCollectionRequest(c)#>(
                getRequestUrl(),
                getClient(),
                options
        );

<# foreach (var p in c.AsOdcmMethod().Parameters) { #>
  <# if (isPost) { #>
      if (hasParameter("<#=ParamName(p)#>")) {
            request.mBody.<#=ParamName(p)#> = getParameter("<#=ParamName(p)#>");
        }
  <# } else { #>
      for (FunctionOption option : mFunctionOptions) {
            request.addFunctionOption(option);
        }
  <# } #>
<# } #>

        return request;
    }
}
