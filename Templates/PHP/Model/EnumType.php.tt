<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
CustomT4Host host               = (CustomT4Host) Host;
OdcmModel model                 = host.CurrentModel;
CodeWriterPHP writer            = (CodeWriterPHP) host.CodeWriter;
TemplateWriterSettings settings = ConfigurationService.Settings;
var enumT                       = host.CurrentType.AsOdcmEnum();

string targetNamespace          = TypeHelperPHP.GetPHPNamespace(enumT, settings);

#>
<#=writer.WriteHeader(writer.GetDocBlock(enumT.Name.ToCheckedCase()))#>
namespace <#=targetNamespace#>;

use Microsoft\Graph\Core\Enum;

<#=writer.GetClassBlock(enumT.Name.ToCheckedCase().ToString(), "Model")#>
class <#=enumT.Name.ToUpperFirstChar()#> extends Enum
{
    /**
    * The Enum <#=enumT.Name.ToUpperFirstChar()#>
    */
<#
    int count = 0;
    foreach(var value in enumT.Members)
    {
        
		var needsPrefix = TypeHelperPHP.ReservedNames.Contains(value.Name.ToUnderscore());

		if (needsPrefix)
		{
#>
    const <#=TypeHelperPHP.ReservedPrefix.ToUpper() #><#=value.Name.ToUnderscore().ToUpper()#> = "<#= value.Name.ToCamelize()#>";
<#
		} else {
#>
    const <#= value.Name.ToUnderscorePHPEnum().ToUpper()#> = "<#= value.Name.ToCamelize()#>";
<#		}
	count++;
    }
#>
}