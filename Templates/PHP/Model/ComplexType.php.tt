<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License. \n See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
CustomT4Host host      = (CustomT4Host) Host;
OdcmModel model        = host.CurrentModel;
CodeWriterPHP writer   = (CodeWriterPHP) host.CodeWriter;
TemplateWriterSettings settings = ConfigurationService.Settings;
OdcmClass complex      = (OdcmClass)host.CurrentType;
String complexName     = complex.Name.SanitizeEntityName();
string targetNamespace = @"Microsoft\Graph\Model";
String complexBaseName = "";
if (complex.Base != null)
	complexBaseName = complex.Base.Name.SanitizeEntityName();

// TemplateWriterSettings.Properties are set at the Typewriter command line. Check the command line 
// documentation for more information on how the TemplateWriterSettings.Properties is used.
if (settings.Properties.ContainsKey("php.namespace"))
{
    targetNamespace = settings.Properties["php.namespace"];
}      

#>
<#=writer.WriteHeader(writer.GetDocBlock(complexName.ToCheckedCase()))#>
namespace <#=targetNamespace#>;
<#=writer.GetClassBlock(complexName.ToCheckedCase().ToString(), "Model")#>
<#
if (complex.Base != null) {
#>
class <#=complexName.ToCheckedCase()#> extends <#=complexBaseName.ToCheckedCase()#>
<#
} else {
#>
class <#=complexName.ToCheckedCase()#>
<#
}
#>
{
<# 
// Generate a constructor to initialize the @odata.type property when this type is not abstract and if this 
// type's base is abstract and the base is referenced as the type of a structural property. We need this
// to disambiguate the type of the descendant class being sent. 
if (complex.IsBaseAbstractAndReferencedAsPropertyType() && !complex.IsAbstract)
{
#>    /**
    * Set the @odata.type since this type is immediately descended from an abstract
    * type that is referenced as the type in an entity.
    */
    public function __construct()
    {
        $this->setODataType("#<#=complex.FullName#>");
    }

<# 
}
foreach(var property in complex.Properties.Where(prop => prop.Type.GetTypeString() != "bytes")){
    var propertyName = property.Name.SanitizePropertyName(complexName);
    if (!property.Type.IsComplex()) {
#>
    /**
    * Gets the <#=propertyName#>
<# if (property.LongDescription != null || property.Description != null) {
#>
    * <#=property.GetSanitizedLongDescription()#>
<# } #>
    *
    * @return <#=property.Type.GetTypeString()#> The <#=propertyName#>
    */
    public function get<#=propertyName.ToCheckedCase()#>()
    {
        if (array_key_exists("<#=property.Name.ToCamelize()#>", $this->_propDict)) {
<#
            if (property.Type.GetTypeString() == "\\DateTime") {
#>
            return new \DateTime($this->_propDict["<#=property.Name.ToCamelize()#>"]);
<#
            } else {
#>
            return $this->_propDict["<#=property.Name.ToCamelize()#>"];
<#
            }
#>
        } else {
            return null;
        }
    }

    /**
    * Sets the <#=propertyName#>
<# if (property.LongDescription != null || property.Description != null) {
#>
    * <#=property.GetSanitizedLongDescription()#>
<# } #>
    *
    * @param <#=property.Type.GetTypeString()#> $val The value of the <#=propertyName#>
    *
    * @return <#=complexName.ToCheckedCase()#>
    */
    public function set<#=propertyName.ToCheckedCase()#>($val)
    {
<#
            if (property.Type.GetTypeString() == "\\DateTime") {
#>
        $this->_propDict["<#=property.Name.ToCamelize()#>"] 
            = $val->format(\DateTime::ISO8601) . "Z";
<#
            } else {
#>
        $this->_propDict["<#=property.Name.ToCamelize()#>"] = $val;
<#
            }
#>
        return $this;
    }
<#
   } else {
#>

    /**
    * Gets the <#=propertyName#>
<# if (property.LongDescription != null || property.Description != null) {
#>
    * <#=property.GetSanitizedLongDescription()#>
<# } #>
    *
    * @return <#=property.Type.GetTypeString().SanitizeEntityName().ToCheckedCase()#> The <#=propertyName#>
    */
    public function get<#=propertyName.ToCheckedCase()#>()
    {
        if (array_key_exists("<#=property.Name.ToCamelize()#>", $this->_propDict)) {
            if (is_a($this->_propDict["<#=property.Name.ToCamelize()#>"], "<#=targetNamespace#>\<#=property.Type.GetTypeString()#>")) {
                return $this->_propDict["<#=property.Name.ToCamelize()#>"];
            } else {
<# if (property.Type.GetTypeString() == "\\GuzzleHttp\\Psr7\\Stream") { #>
                $this->_propDict["<#=property.Name.ToCamelize()#>"] = \GuzzleHttp\Psr7\stream_for($this->_propDict["<#=property.Name.ToCamelize()#>"]);
                return $this->_propDict["<#=property.Name.ToCamelize()#>"];
<# } else { #>
                $this->_propDict["<#=property.Name.ToCamelize()#>"] = new <#=property.Type.GetTypeString().SanitizeEntityName().ToCheckedCase()#>($this->_propDict["<#=property.Name.ToCamelize()#>"]);
                return $this->_propDict["<#=property.Name.ToCamelize()#>"];
<# } #>
            }
        }
        return null;
    }

    /**
    * Sets the <#=propertyName#>
<# if (property.LongDescription != null || property.Description != null) {
#>
    * <#=property.GetSanitizedLongDescription()#>
<# } #>
    *
    * @param <#=property.Type.GetTypeString()#> $val The value to assign to the <#=property.Name#>
    *
    * @return <#=complexName.ToCheckedCase()#> The <#=complexName.ToCheckedCase()#>
    */
    public function set<#=propertyName.ToCheckedCase()#>($val)
    {
<#  if (property.Type.GetTypeString() == "bool") { #>
        $this->_propDict["<#=property.Name#>"] = boolval($val);
<#  } else if (property.Type.GetTypeString() == "int") { #>
        $this->_propDict["<#=property.Name#>"] = intval($val);
<# } else { #>
        $this->_propDict["<#=property.Name#>"] = $val;
<# } #>
         return $this;
    }
<#
        }
    }
#>
}
