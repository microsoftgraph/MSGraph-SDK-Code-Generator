<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="utils.tt" #>
<#@ output extension="\\" #>
<#
    CustomT4Host host           = (CustomT4Host) Host;
    CodeWriterTypeScript writer = (CodeWriterTypeScript) host.CodeWriter;

    var model                   = host.CurrentModel;
    var entityTypes             = model.GetEntityTypes();
    var enumTypes               = model.GetEnumTypes();
    var complexTypes            = model.GetComplexTypes();

    var maxLineLength = 120;
#>
// Type definitions for non-npm package microsoft-graph <VERSION_STRING>
// Project: https://github.com/microsoftgraph/msgraph-typescript-typings
// Definitions by: Microsoft Graph Team <https://github.com/microsoftgraph>
//                 Michael Mainer <https://github.com/MIchaelMainer>
//                 Peter Ombwa <https://github.com/peombwa>
//                 Mustafa Zengin <https://github.com/zengin>
//                 DeVere Dyett <https://github.com/ddyett>
//                 Nikitha Udaykumar Chettiar <https://github.com/nikithauc>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.1

export as namespace microsoftgraph;

export type NullableOption<T> = T | null;

<#
    foreach(var enumType in enumTypes) {
        var enumTypeName = enumType.Name.UpperCaseFirstChar();
        var enumValues = enumType.GetEnumValues();
        var exportTypeLength = "export type".Length + enumTypeName.Length + enumValues.Length + 3;
        if (exportTypeLength < maxLineLength) {
#>
export type <#= enumTypeName #> = <#= enumValues #>;
<#
        } else {
#>
export type <#= enumTypeName #> =<#
            var enums = enumValues.Split('|');
            for(var i = 0; i < enums.Length; i++) {
#>

    | <#= enums[i].Trim() #><#
            }
#>;
<#
        }
    }

    foreach(var entityType in entityTypes) {
        var propCount = entityType.Properties.ToList().Count;
        var entityTypeName = entityType.Name.UpperCaseFirstChar();
        if(propCount == 0 && entityTypeName[0] == 'I') {
#>
// tslint:disable-next-line: interface-name no-empty-interface
<#
        } else if (entityTypeName[0] == 'I') {
#>
// tslint:disable-next-line: interface-name
<#
        } else if(propCount == 0) { 
#>
// tslint:disable-next-line: no-empty-interface
<#
        }
#>
export interface <#= entityTypeName #><# 
        if (entityType.Base != null) { 
#>
 extends <#= entityType.Base.Name.UpperCaseFirstChar() #><#
        }
#> {<#
        if(propCount == 0){
#>}
<#  
        } else {
#>

<#
            foreach(var prop in entityType.Properties.ToList()) {
                if (prop.LongDescription != null || prop.Description != null) {
                    List<string> multiLineDescriptions = Utils.splitString(prop.GetSanitizedLongDescription(), maxLineLength);
                    if(multiLineDescriptions.Count() == 1) {
#>
    // <#= multiLineDescriptions.First() #>
<#
                    } else {
#>
    /**
<#
                        foreach(var descriptionLine in multiLineDescriptions) {
#>
     * <#= descriptionLine #>
<#
                        }
#>
     */
<#
                    }
                }
#>
<#
    if(prop.IsNullable) {
#>
    <#= prop.Name #>?: NullableOption<<#= prop.GetTypeString() #>>;
<#
    } else {
#>
    <#= prop.Name #>?: <#= prop.GetTypeString() #>;
<#
    }
#>
<#
            }
#>
}
<#
        }
    }

    foreach(var complexType in complexTypes) {
        var propCount = complexType.Properties.ToList().Count;
        var complexTypeName = complexType.Name.UpperCaseFirstChar();
        if(propCount == 0 && complexTypeName[0] == 'I') {
#>
// tslint:disable-next-line: interface-name no-empty-interface
<#
        } else if (complexTypeName[0] == 'I') {
#>
// tslint:disable-next-line: interface-name
<#
        } else if(propCount == 0) { 
#>
// tslint:disable-next-line: no-empty-interface
<#
        }
#>
export interface <#= complexTypeName #><# 
        if (complexType.Base != null) { 
#>
 extends <#= complexType.Base.Name.UpperCaseFirstChar() #><#
        }
#> {<#
        if(propCount == 0){
#>}
<#  
        } else {
#>

<#
            foreach(var prop in complexType.Properties) {
                if (prop.LongDescription != null || prop.Description != null) {
                    List<string> multiLineDescriptions = Utils.splitString(prop.GetSanitizedLongDescription(), maxLineLength);
                    if(multiLineDescriptions.Count() == 1) {
#>
    // <#= multiLineDescriptions.First() #>
<#
                    } else {
#>
    /**
<#
                        foreach(var descriptionLine in multiLineDescriptions) {
#>
     * <#= descriptionLine #>
<#
                        }
#>
     */
<#
                    }
                }
#>
<#
    if(prop.IsNullable) {
#>
    <#= prop.Name #>?: NullableOption<<#= prop.GetTypeString() #>>;
<#
    } else {
#>
    <#= prop.Name #>?: <#= prop.GetTypeString() #>;
<#
    }
#>
<#
            }
#>
}
<#
        }
    }
#>
