<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#@ import namespace="Microsoft.Graph.ODataTemplateWriter.CodeHelpers.Java" #>
<#

    CustomT4Host host          = (CustomT4Host) Host;
    var model                  = host.CurrentModel;
    CodeWriterJava writer      = (CodeWriterJava) host.CodeWriter;
    bool logTemplateSrc        = true;
    var c = host.CurrentType;
#>
<# if (logTemplateSrc) { #>
// Template Source: <#= host.GetTemplateFileName(host.TemplateFile) #>
<# } #>
<#+
        /*
         * Find and replace overwrite values for the given class
         * @param className The class that you will be applying overwrites to
         * @return An empty string (does not write anything new to the file)
         */
        public string PostProcess(string className)
        {
            //Load the StringBuilder with the file contents
            var strb = this.GenerationEnvironment;

            //Get the list of available classes to overwrite
            CustomOverwrites customOverwrites = new CustomOverwrites();
            var type = customOverwrites.GetType();

            //Load the dictionary that corresponds to the current class
            var results = type.GetFields().Where(x => x.Name == className).FirstOrDefault();

            if (results != null)
            {
                var dictionary = (Dictionary<string, string>)results.GetValue(this);
                //Find and replace for each item in the dictionary
                foreach (var item in dictionary)
                {
                    strb.Replace(item.Key, item.Value);
                }
            }
            //This seems to be a requirement of the template builder
            //Specifying a return type of "void" throws an error
            return string.Empty;
        }
#>
