<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.ITypeRequestBuilder();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>

<#=TypeHelperJava.CreateInterfaceDef(c.ITypeRequestBuilder(), "IRequestBuilder")#>
    /**
     * Creates the request
     *
     * @param requestOptions the options for this request
     * @return the <#=c.ITypeRequest()#> instance
     */
    <#=c.ITypeRequest()#> buildRequest(final com.microsoft.graph.options.Option... requestOptions);

    /**
     * Creates the request with specific options instead of the existing options
     *
     * @param requestOptions the options for this request
     * @return the <#=c.ITypeRequest()#> instance
     */
    <#=c.ITypeRequest()#> buildRequest(final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions);

<# if(host.TemplateName.Equals("IThumbnailSetRequestBuilder")){#>
    /**
     * Gets a request for a thumbnail of a specific size
     * @param size The size to request (typically: small, medium, large)
     * @return The request builder for that thumbnail size
     */
    IThumbnailRequestBuilder getThumbnailSize(final String size);
<# } #>
<#
	if(host.TemplateName.Equals("IDriveItemRequestBuilder")){
#>
    /**
     * Gets the item request builder for the specified item path
     * @param path The path to the item
     * @return The request builder for the specified item
     */
    IDriveItemRequestBuilder itemWithPath(final String path);
<# } #>
<#
if (c.AsOdcmClass() != null)
{
    foreach(var prop in c.AsOdcmClass().NavigationProperties(true))
    {
        var propName = prop.Name.ToUpperFirstChar();
		var sanitizedName = prop.Name.SanitizePropertyName();
        var propRequestBuilder = prop.TypeRequestBuilder();
        if (prop.IsCollection()) {
#>

    <#=prop.ITypeCollectionRequestBuilder()#> <#=sanitizedName.ToLowerFirstChar()#>();

    <#=prop.ITypeRequestBuilder()#> <#=prop.Name#>(final String id);
<#
        } else {
#>

    /**
     * Gets the request builder for <#=prop.TypeName()#>
     *
     * @return the <#=prop.ITypeRequestBuilder()#> instance
     */
    <#=prop.ITypeRequestBuilder()#> <#=sanitizedName.ToLowerFirstChar()#>();
<#
        }
    }
#>
<#
    foreach (var prop in c.AsOdcmClass().GetProperties(typeName:"Stream"))
    {
		var propName = prop.Name.ToCheckedCase();
		var sanitizedName = propName;

		if (c is OdcmMediaClass && propName == "Content") {
			 sanitizedName = prop.Type.GetReservedPrefix().ToCheckedCase() + prop.Name.ToCheckedCase();
		} else {
			sanitizedName = prop.Name.SanitizePropertyName();
		}

        var propRequestBuilder = prop.TypeRequestBuilder();
#>

    I<#=propRequestBuilder#> <#=sanitizedName#>();
<#
    }
#>
<#
    if (c is OdcmMediaClass)
    {
#>

    <#=c.ITypeStreamRequestBuilder()#> content();
<#
    }
#>
<#
    foreach (var method in c.AsOdcmClass().MethodsAndOverloads()) {
        if (method.IsBoundToCollection) {
            continue;
        }

        var parameterList = method.MethodParametersSignature();

        if (parameterList != "") {
            parameterList = parameterList.Remove(0, 2);
        }

		var sanitizedMethod = method.MethodName().SanitizePropertyName().ToLowerFirstChar();

        if (method.IsCollection) {
#>

    <#=method.ITypeCollectionRequestBuilder()#> <#=sanitizedMethod#>(<#=parameterList#>);
<#  } else { #>
    <#=method.ITypeRequestBuilder()#> <#=sanitizedMethod#>(<#=parameterList#>);
<#
        }
    }
}
#>

}