<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.ITypeWithReferencesRequest();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>

<# var mainNamespace = host.CurrentNamespace(); #>
import <#=mainNamespace#>.<#=c.GetPackagePrefix()#>.<#=c.TypeName()#>;
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.http.IHttpRequest;
import <#=importNamespace#>.serializer.IJsonBackedObject;


<#=TypeHelperJava.CreateInterfaceDef(c.ITypeWithReferencesRequest(), "IHttpRequest")#>

    void post(final <#=c.TypeName()#> new<#=c.TypeName()#>, final IJsonBackedObject payload, final ICallback<? super <#=c.TypeName()#>> callback);

    <#=c.TypeName()#> post(final <#=c.TypeName()#> new<#=c.TypeName()#>, final IJsonBackedObject payload) throws ClientException;

    void get(final ICallback<? super <#=c.TypeName()#>> callback);

    <#=c.TypeName()#> get() throws ClientException;

	void delete(final ICallback<? super <#=c.TypeName()#>> callback);

	void delete() throws ClientException;

	void patch(final <#=c.TypeName()#> source<#=c.TypeName()#>, final ICallback<? super <#=c.TypeName()#>> callback);

	<#=c.TypeName()#> patch(final <#=c.TypeName()#> source<#=c.TypeName()#>) throws ClientException;

<# if (c.GetFeatures().CanSelect) { #>
    <#=c.ITypeWithReferencesRequest()#> select(final String value);

<# } #>
<# if (c.GetFeatures().CanExpand) { #>
    <#=c.ITypeWithReferencesRequest()#> expand(final String value);

<# } #>
}
