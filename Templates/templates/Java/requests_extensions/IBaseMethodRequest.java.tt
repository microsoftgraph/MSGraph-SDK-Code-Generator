<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.ITypeRequest();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDefForIBaseMethodRequest()#>
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.concurrency.ICallback;
import <#=importNamespace#>.concurrency.IExecutors;
import <#=importNamespace#>.core.ClientException;
import <#=importNamespace#>.core.IBaseClient;
import <#=importNamespace#>.http.BaseRequest;
import <#=importNamespace#>.http.HttpMethod;
import <#=importNamespace#>.http.IHttpRequest;

<#=TypeHelperJava.CreateInterfaceDef(c.ITypeRequest(), "IHttpRequest")#>

<#
if (c.AsOdcmMethod().IsAction()) {
    if (c.AsOdcmMethod().ReturnType != null) {
#>
    /**
     * Creates the <#=c.TypeName()#>
     *
     * @param callback the callback to be called after success or failure
     */
    void post(final ICallback<? super <#=c.ReturnType()#>> callback);

    /**
     * Creates the <#=c.TypeName()#>
     *
     * @return the <#=c.ReturnType()#>
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
    <#=c.ReturnType()#> post() throws ClientException;

<#
        if (c.GetFeatures().CanSelect) {
#>
    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    <#=c.ITypeRequest()#> select(final String value);

<#
        }

        if (c.GetFeatures().CanExpand) {
#>
    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    <#=c.ITypeRequest()#> expand(final String value);

<#
        }

        if (c.AsOdcmProperty() != null 
            && c.AsOdcmProperty().IsCollection
            && c.GetFeatures().CanUseTop) {
#>
    /**
     * Sets the top value for the request
     *
     * @param value the max number of items to return
     * @return the updated request
     */
    <#=c.ITypeRequest()#> top(final int value);
<#
        }
    } else {
#>
    /**
     * Creates the <#=c.TypeName()#>
     *
     * @param callback the callback to be called after success or failure
     */
    void post(final ICallback<Void> callback);

    /**
     * Creates the <#=c.TypeName()#>
     *
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
    void post() throws ClientException;

<#
    }
} else {
    if (c.AsOdcmMethod().ReturnType != null) {
        if (c.AsOdcmMethod().IsComposable) {
#>
    /**
     * Patches the <#=c.TypeName()#>
     *
     * @param src<#=c.ReturnType()#> the <#=c.ReturnType()#> with which to PATCH
     * @param callback the callback to be called after success or failure
     */
    void patch(<#=c.ReturnType()#> src<#=c.ReturnType()#>, final ICallback<? super <#=c.ReturnType()#>> callback);

    /**
     * Patches the <#=c.TypeName()#>
     *
     * @param src<#=c.ReturnType()#> the <#=c.ReturnType()#> with which to PATCH
     * @return the <#=c.ReturnType()#>
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
    <#=c.ReturnType()#> patch(<#=c.ReturnType()#> src<#=c.ReturnType()#>) throws ClientException;

    /**
     * Puts the <#=c.TypeName()#>
     *
     * @param src<#=c.ReturnType()#> the <#=c.ReturnType()#> to PUT
     * @param callback the callback to be called after success or failure
     */
    void put(<#=c.ReturnType()#> src<#=c.ReturnType()#>, final ICallback<? super <#=c.ReturnType()#>> callback);

    /**
     * Puts the <#=c.TypeName()#>
     *
     * @param src<#=c.ReturnType()#> the <#=c.ReturnType()#> to PUT
     * @return the <#=c.ReturnType()#>
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
     <#=c.ReturnType()#> put(<#=c.ReturnType()#> src<#=c.ReturnType()#>) throws ClientException;
<#
        }
#>
    /**
     * Gets the <#=c.ReturnType()#>
     *
     * @param callback the callback to be called after success or failure
     */
    void get(final ICallback<? super <#=c.ReturnType()#>> callback);

    /**
     * Gets the <#=c.ReturnType()#>
     *
     * @return the <#=c.ReturnType()#>
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
    <#=c.ReturnType()#> get() throws ClientException;

<#
        if (c.GetFeatures().CanSelect) {
#>
    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    <#=c.ITypeRequest()#> select(final String value);

<#
        }

        if (c.GetFeatures().CanExpand) { #>
    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    <#=c.ITypeRequest()#> expand(final String value);

<#
        }

        if (c.AsOdcmProperty() != null
            && c.AsOdcmProperty().IsCollection
            && c.GetFeatures().CanUseTop) {
#>
    /**
     * Sets the top value for the request
     *
     * @param value the max number of items to return
     * @return the updated request
     */
    <#=c.ITypeRequest()#> top(final int value);
<#
        }
    } else {
#>
    void get(final ICallback<Void> callback);

    void get() throws ClientException;

<#
    }
}
#>
}
