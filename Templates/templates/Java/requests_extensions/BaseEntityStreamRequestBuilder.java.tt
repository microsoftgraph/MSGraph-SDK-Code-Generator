<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeStreamRequestBuilder();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.core.IBaseClient;
import <#=importNamespace#>.http.BaseRequestBuilder;

<#=TypeHelperJava.CreateClassDef(c.TypeStreamRequestBuilder(), "BaseRequestBuilder", c.ITypeStreamRequestBuilder())#>

    /**
     * The request builder for the <#=c.TypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=c.TypeStreamRequestBuilder()#>(final String requestUrl, final <#=TypeHelperJava.IBaseClientType()#> client, final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions);
    }

    /**
     * Creates the request
     *
     * @param requestOptions the options for this request
     * @return the <#=c.ITypeStreamRequest()#> instance
     */
    public <#=c.ITypeStreamRequest()#> buildRequest(final com.microsoft.graph.options.Option... requestOptions) {
        return buildRequest(getOptions(requestOptions));
    }

    /**
     * Creates the request with specific options instead of the existing options
	 *
     * @param requestOptions the options for this request
     * @return the <#=c.ITypeStreamRequest()#> instance
     */
    public <#=c.ITypeStreamRequest()#> buildRequest(final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions) {
        return new <#=c.TypeStreamRequest()#>(getRequestUrl(), getClient(), requestOptions);
    }
<#
if (c.AsOdcmClass() != null)
{
    foreach(var prop in c.AsOdcmClass().NavigationProperties())
    {
        var propName = prop.Name.ToUpperFirstChar();
        if (prop.IsCollection()) {
#>
    public <#=prop.ITypeCollectionRequestBuilder()#> <#=prop.Name#>() {
        return new <#=prop.TypeCollectionRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=prop.ParentPropertyType == null ? prop.Name : prop.ParentPropertyType.Name #>")<# if(prop.ParentPropertyType != null) { #> + "/<#=prop.Projection.Type.FullName#>"<# } #>, getClient(), null);
    }

    public <#=prop.ITypeRequestBuilder()#> <#=prop.Name#>(final String id) {
        return new <#=prop.TypeRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=prop.ParentPropertyType == null ? prop.Name : prop.ParentPropertyType.Name #>") + "/" + id<# if(prop.ParentPropertyType != null) { #> + "/<#=prop.Projection.Type.FullName#>"<# } #>, getClient(), null);
    }
<#
        } else {
#>

    /**
     * Gets the request builder for <#=prop.TypeName()#>
     *
     * @return the <#=prop.ITypeRequestBuilder()#>
     */
    public <#=prop.ITypeRequestBuilder()#> <#=prop.Name#>() {
        return new <#=prop.TypeRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=prop.Name#>"), getClient(), null);
    }
<#
        }
    }
#>
<#
    foreach (var prop in c.AsOdcmClass().GetProperties(typeName:"Stream"))
    {
        var propName = prop.Name.ToCheckedCase();
        var propRequestBuilder = prop.TypeRequestBuilder();
#>

    public I<#=propRequestBuilder#> <#=prop.Name#>() {
        return new <#=propRequestBuilder#>(getRequestUrlWithAdditionalSegment("<#=prop.Name#>"), getClient(), null);
    }
<#
    }
#>

<#
    foreach (var prop in c.AsOdcmClass().Properties.Where(x => x.Projection.Type is OdcmMediaClass))
    {
        var propName = prop.Name.ToCheckedCase();
#>

    public <#=prop.ITypeStreamRequestBuilder()#> <#=prop.Name#>Value() {
        return new <#=prop.TypeStreamRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=prop.Name#>/$value"), getClient(), null);
    }
<#
    }
#>

<#
    foreach (var method in c.AsOdcmClass().MethodsAndOverloads())
    {
        var parameterList = method.MethodParametersSignature();
        if (parameterList != "") { parameterList = parameterList.Remove(0, 2); }
#>
<#		if (method.IsCollection) { #>

    public <#=method.ITypeCollectionRequestBuilder()#> <#=method.MethodName().ToLowerFirstChar()#>(<#=parameterList#>) {
        return new <#=method.TypeCollectionRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=method.MethodFullName()#>"), getClient(), null<#=method.MethodParametersValues()#>);
    }

<# 		} else { #>

    public <#=method.ITypeRequestBuilder()#> <#=method.MethodName().ToLowerFirstChar()#>(<#=parameterList#>) {
        return new <#=method.TypeRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=method.MethodFullName()#>"), getClient(), null<#=method.MethodParametersValues()#>);
    }
<#
        }
    }
}
#>
}
