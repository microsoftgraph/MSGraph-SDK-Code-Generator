<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
CustomT4Host host       = (CustomT4Host) Host;
OdcmModel model         = host.CurrentModel;
CodeWriterPython writer = (CodeWriterPython) host.CodeWriter;
OdcmClass entity        = host.CurrentType.AsOdcmClass();
TemplateWriterSettings settings = ConfigurationService.Settings;

#>
<#=writer.WriteHeader(writer.GeneratedHeader)#>
from __future__ import unicode_literals
<# 
    List<String> list = new List<String>();
    foreach(var property in entity.Properties){
        var propertyName = property.Name.ToUnderscore();
        if (property.Type.IsComplex() 
            && !list.Contains(property.Type.GetTypeString())
            && !property.Type.GetTypeString().Equals(entity.Name.ToUpperFirstChar())) {
            list.Add(property.Type.GetTypeString());
#>
from ..model.<#=property.Type.GetTypeString().ToUnderscore()#> import <#=property.Type.GetTypeString()#>
<#
        }
    }
    if (entity.Properties.Any(prop => prop.Type.GetTypeString() == "datetime")){
#>
from datetime import datetime
<#
    }
#>
from ..one_drive_object_base import OneDriveObjectBase


class <#=entity.Name.ToUpperFirstChar()#>(OneDriveObjectBase):

    def __init__(self, prop_dict={}):
        self._prop_dict = prop_dict

<# 
        foreach(var property in entity.Properties.Where(prop => prop.Type.GetTypeString() != "bytes")){
            var propertyName = property.Name.ToUnderscore();
            var propertyNameCap = property.Name.ToUpperFirstChar();
            if (property.Type.IsComplex()) {
                if (property.IsCollection()) {
#>
    @property
    def <#=propertyName#>(self):
        """Gets and sets the <#=property.Name#>
        
        Returns: 
            :class:`<#=propertyNameCap#>CollectionPage<onedrivesdk.request.<#=(propertyNameCap+"Collection").ToUnderscore()#>.<#=propertyNameCap#>CollectionPage>`:
                The <#=property.Name#>
        """
        if "<#=property.Name#>" in self._prop_dict:
            return <#=propertyNameCap#>CollectionPage(self._prop_dict["<#=property.Name#>"])
        else:
            return None

<#
            } else {
#>
    @property
    def <#=propertyName#>(self):
        """
        Gets and sets the <#=property.Name#>
        
        Returns: 
            :class:`<#=property.Type.GetTypeString()#><onedrivesdk.model.<#=property.Type.GetTypeString().ToUnderscore()#>.<#=property.Type.GetTypeString()#>>`:
                The <#=property.Name#>
        """
        if "<#=property.Name#>" in self._prop_dict:
            if isinstance(self._prop_dict["<#=property.Name#>"], OneDriveObjectBase):
                return self._prop_dict["<#=property.Name#>"]
            else :
                self._prop_dict["<#=property.Name#>"] = <#=property.Type.GetTypeString()#>(self._prop_dict["<#=property.Name#>"])
                return self._prop_dict["<#=property.Name#>"]

        return None

    @<#=propertyName#>.setter
    def <#=propertyName#>(self, val):
        self._prop_dict["<#=property.Name#>"] = val

<#
            }
        } else {
#>
    @property
    def <#=propertyName#>(self):
        """
        Gets and sets the <#=property.Name#>
        
        Returns:
            <#=property.Type.GetTypeString()#>:
                The <#=property.Name#>
        """
        if "<#=property.Name#>" in self._prop_dict:
<#
            if (property.Type.GetTypeString() == "datetime") {
#>
            return datetime.strptime(self._prop_dict["<#=property.Name#>"].replace("Z", ""), "%Y-%m-%dT%H:%M:%S.%f")
<#
            } else {
#>
            return self._prop_dict["<#=property.Name#>"]
<#
            }
#>
        else:
            return None

    @<#=propertyName#>.setter
    def <#=propertyName#>(self, val):
<#
            if (property.Type.GetTypeString() == "datetime") {
#>
        self._prop_dict["<#=property.Name#>"] = val.isoformat()+"Z"

<#
            } else {
#>
        self._prop_dict["<#=property.Name#>"] = val

<#
            }
        }
    }
#>
