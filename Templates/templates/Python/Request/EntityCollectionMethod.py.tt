<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
CustomT4Host host       = (CustomT4Host) Host;
OdcmModel model         = host.CurrentModel;
CodeWriterPython writer = (CodeWriterPython) host.CodeWriter;
var clientName          = model.GetEntityContainer().ToUpperFirstChar() + "Client";
var clientNameLower     = clientName.ToLowerFirstChar();
var method              = host.CurrentType as OdcmMethod;
var returnType          = method.ReturnType.AsOdcmClass();
var innerEntityType     = method.ReturnType.IsComplex() ? method.ReturnType.GetTypeString().ToUpperFirstChar() : method.ReturnType.GetTypeString();
var collectionRequest   = method.Class.Name.ToUpperFirstChar() + method.Name.Substring(method.Name.IndexOf('.') + 1).ToUpperFirstChar() + "Request";
var collectionPage      = collectionRequest.Replace("Request", "CollectionPage");
var collectionResponse  = collectionRequest.Replace("Request", "CollectionResponse");
TemplateWriterSettings settings = ConfigurationService.Settings;
var jsonContentType     = "application/json";
var isPython2           = ConfigurationService.Settings.CustomFlags.Contains("python2");

var properties = returnType.Properties.Where(p => p.Name != "value");
var propertiesString = "";

foreach (var property in properties)
{
        propertiesString += ", " + property.Name.Split('.')[1].ToUnderscore() + "=None";
}

#>
<#=writer.WriteHeader(writer.GeneratedHeader)#>
from __future__ import unicode_literals
from ..request.items_collection import ItemsCollectionResponse, ItemsCollectionPage


class <#=collectionResponse#>(ItemsCollectionResponse):

    @property
    def collection_page(self):
        """The collection page stored in the response JSON
        
        Returns:
            :class:`<#=collectionPage#><onedrivesdk.request.<#=collectionPage.Replace("Page","").ToUnderscore()#>.<#=collectionPage#>>`:
                The collection page
        """
<#
foreach (var property in properties)
{
#>
        <#=property.Name.Split('.')[1].ToUnderscore()#> = self._prop_dict["<#=property.Name#>"] if "<#=property.Name#>" in self._prop_dict else None
<#
}
#>

        if self._collection_page:
            self._collection_page._prop_list = self._prop_dict["value"]
<#
foreach (var property in properties)
{
#>
            self._collection_page._<#=property.Name.Split('.')[1].ToUnderscore()#> = <#=property.Name.Split('.')[1].ToUnderscore()#>
<#
}
#>
        else:
<#
var propLookup = "";
foreach (var property in properties)
{
    propLookup += ",\n                                                            "+property.Name.Split('.')[1].ToUnderscore();
}
#>
            self._collection_page = <#=collectionPage#>(self._prop_dict["value"]<#=propLookup#>)

        return self._collection_page

class <#=collectionPage#>(ItemsCollectionPage):

    def __init__(self, prop_list<#=propertiesString#>):
        super(<#=collectionPage#>, self).__init__(prop_list)
<#
foreach (var property in properties)
{
#>
        self._<#=property.Name.Split('.')[1].ToUnderscore()#> = <#=property.Name.Split('.')[1].ToUnderscore()#>
<#
}
#>

    def _init_next_page_request(self, next_page_link, client, options):
        """Initialize the next page request for the <#=collectionPage#>
        
        Args:
            next_page_link (str): The URL for the next page request
                to be sent to
            client (:class:`OneDriveClient<onedrivesdk.model.one_drive_client.OneDriveClient>`:
                The client to be used for the request
            options (list of :class:`Option<onedrivesdk.options.Option>`:
                A list of options
        """
        self._next_page_request = <#=collectionRequest#>(next_page_link, client, options)
<#
foreach (var property in properties)
{
#>

    @property
    def <#=property.Name.Split('.')[1].ToUnderscore()#>(self):
        """Gets the <#=property.Name.Split('.')[1]#> property from the
        <#=collectionPage#>

        Returns:
<#
        if (property.Type.IsComplex())
        {
#>
            :class:`<#=property.Type.GetTypeString()#><onedrivesdk.model.<#=property.Type.GetTypeString().ToUnderscore()#>.<#=property.Type.GetTypeString()#>>`:
<#
        } else {
#>
            <#=property.Type.GetTypeString()#>:
<#
        }
#>
                The <#=property.Name.Split('.')[1]#> property from the <#=collectionPage#>
        """
        return self._<#=property.Name.Split('.')[1].ToUnderscore()#>
<#
}
#>

from ..request.<#=collectionRequest.Replace("Request", "").ToUnderscore()#> import <#=collectionRequest#>
