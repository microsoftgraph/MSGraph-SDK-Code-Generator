<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
CustomT4Host host       = (CustomT4Host) Host;
OdcmModel model         = host.CurrentModel;
CodeWriterPython writer = (CodeWriterPython) host.CodeWriter;
var prop                = host.CurrentType as OdcmProperty;
var type                = prop.Class as OdcmType;
var propName            = prop.Name;
var propClass           = prop.Class.Name.ToUpperFirstChar();
var propRequest         = propClass + prop.Name.ToUpperFirstChar() + "Request";
var propRequestBuilder  = propClass + prop.Name.ToUpperFirstChar() + "RequestBuilder";
TemplateWriterSettings settings = ConfigurationService.Settings;
var isPython2           = ConfigurationService.Settings.CustomFlags.Contains("python2");

#>
<#=writer.WriteHeader(writer.GeneratedHeader)#>
from ..request_base import RequestBase
from ..request_builder_base import RequestBuilderBase
from ..model.<#=propClass.ToUnderscore()#> import <#=propClass#>
import json
<#
if (!isPython2) {
#>
import asyncio
<#
}
#>


class <#=propRequest#>(RequestBase):
    def __init__(self, request_url, client, options):
        """Initialize the <#=propRequest#>

        Args:
            request_url (str): The url to perform the <#=propRequest#>
                on
            client (:class:`OneDriveClient<onedrivesdk.request.one_drive_client.OneDriveClient>`):
                The client which will be used for the request
            options (list of :class:`Option<onedrivesdk.options.Option>`):
                A list of options to pass into the request
        """
        super(<#=propRequest#>, self).__init__(request_url, client, options)

<#
    if (!type.LongDescriptionContains("navigable")) {
#>
    def upload(self, <#=prop.Name.ToUnderscore()#>_local_path):
        """Uploads the file using PUT
        
        Args:
            <#=prop.Name.ToUnderscore()#>_local_path (str):
                The path to the local file to upload.

        Returns: 
            :class:`<#=propClass#><onedrivesdk.model.<#=propClass.ToUnderscore()#>.<#=propClass#>>`:
                The created <#=propClass#>.
        """
        self.method = "PUT"
        entity_response = self.send(path=<#=prop.Name.ToUnderscore()#>_local_path)
        entity = <#=propClass#>(json.loads(entity_response.content))
        return entity

<#
        if (!isPython2) {
#>
    @asyncio.coroutine
    def upload_async(self, <#=prop.Name.ToUnderscore()#>_local_path):
        """Uploads the file using PUT in async
        
        Args:
            <#=prop.Name.ToUnderscore()#>_local_path (str): 
                The path to the local file to upload.

        Yields: 
            :class:`<#=propClass#><onedrivesdk.model.<#=propClass.ToUnderscore()#>.<#=propClass#>>`:
                The created <#=propClass#>.
        """
        future = self._client._loop.run_in_executor(None,
                                                    self.put,
                                                    <#=prop.Name.ToUnderscore()#>_local_path)
        entity = yield from future
        return entity

<#
        }
    }
#>
    def download(self, <#=prop.Name.ToUnderscore()#>_local_path):
        """Downloads the specified <#=propClass#>.
        
        Args:
            <#=prop.Name.ToUnderscore()#>_local_path (str):
                The path where the <#=propClass#> should be downloaded to
        """
        self.download_item(<#=prop.Name.ToUnderscore()#>_local_path)

<#
        if (!isPython2) {
#>
    @asyncio.coroutine
    def download_async(self, <#=prop.Name.ToUnderscore()#>_local_path):
        """
        Downloads the specified <#=propClass#> in async.
        
        Args:
            <#=prop.Name.ToUnderscore()#>_local_path (str):
                The path where the <#=propClass#> should be downloaded to
        """
        future = self._client._loop.run_in_executor(None,
                                                    self.download,
                                                    <#=prop.Name.ToUnderscore()#>_local_path)
        yield from future
<#
        }
#>

class <#=propRequestBuilder#>(RequestBuilderBase):

    def __init__(self, request_url, client):
        """Initialize the <#=propRequestBuilder#>
        
        Args:
            request_url (str): The request URL to initialize
                the <#=propRequestBuilder#> at
            client (:class:`OneDriveClient<onedrivesdk.request.one_drive_client.OneDriveClient>`):
                The client to use for requests made by the
                <#=propRequestBuilder#>
        """
        super(<#=propRequestBuilder#>, self).__init__(request_url, client)

    def request(self):
        """Builds the <#=propRequest#>

        Returns:
            :class:`<#=propRequest#><onedrivesdk.request.<#=propRequest.Replace("Request","").ToUnderscore()#>.<#=propRequest#>>`:
                The <#=propRequest#>
        """
        return <#=propRequest#>(self._request_url, self._client, None)
