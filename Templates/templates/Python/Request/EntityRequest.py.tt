<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
CustomT4Host host       = (CustomT4Host) Host;
OdcmModel model         = host.CurrentModel;
CodeWriterPython writer = (CodeWriterPython) host.CodeWriter;
OdcmClass entity        = host.CurrentType.AsOdcmClass();
var entityName          = entity.Name.ToUpperFirstChar();
var entityRequest       = entityName + "Request";
var jsonContentType     = "application/json";
var isPython2           = ConfigurationService.Settings.CustomFlags.Contains("python2");
#>
<#=writer.WriteHeader(writer.GeneratedHeader)#>
from ..request_base import RequestBase
from ..model.<#=entity.Name.ToUnderscore()#> import <#=entityName#>
import json
<#
if (!isPython2) {
#>
import asyncio
<#
}
#>

class <#=entityRequest#>(RequestBase):
    """The type <#=entityRequest#>."""
    
    def __init__(self, request_url, client, options):
        """Constructs a new <#=entityRequest#>.

        Args:
            request_url (str): The url to perform the <#=entityRequest#>
                on
            client (:class:`OneDriveClient<onedrivesdk.request.one_drive_client.OneDriveClient>`):
                The client which will be used for the request
            options (list of :class:`Option<onedrivesdk.options.Option>`):
                A list of options to pass into the request
        """
        super(<#=entityRequest#>, self).__init__(request_url, client, options)

    def delete(self):
        """Deletes the specified <#=entityName#>."""
        self.method = "DELETE"
        self.send()

<#
    if (!isPython2) {
#>
    @asyncio.coroutine
    def delete_async(self):
        """Deletes the specified <#=entityName#>."""
        future = self._client._loop.run_in_executor(None,
                                                    self.delete)
        yield from future

<#
    }
#>
    def get(self):
        """Gets the specified <#=entityName#>.
        
        Returns:
            :class:`<#=entityName#><onedrivesdk.model.<#=entityName.ToUnderscore()#>.<#=entityName#>>`:
                The <#=entityName#>.
        """
        self.method = "GET"
        entity = <#=entityName#>(json.loads(self.send().content))
        self._initialize_collection_properties(entity)
        return entity

<#
    if (!isPython2) {
#>
    @asyncio.coroutine
    def get_async(self):
        """Gets the specified <#=entityName#> in async.

        Yields:
            :class:`<#=entityName#><onedrivesdk.model.<#=entityName.ToUnderscore()#>.<#=entityName#>>`:
                The <#=entityName#>.
        """
        future = self._client._loop.run_in_executor(None,
                                                    self.get)
        entity = yield from future
        return entity

<#
    }
#>
    def update(self, <#=entity.Name.ToUnderscore()#>):
        """Updates the specified <#=entityName#>.
        
        Args:
            <#=entity.Name.ToUnderscore()#> (:class:`<#=entityName#><onedrivesdk.model.<#=entityName.ToUnderscore()#>.<#=entityName#>>`):
                The <#=entityName#> to update.

        Returns:
            :class:`<#=entityName#><onedrivesdk.model.<#=entityName.ToUnderscore()#>.<#=entityName#>>`:
                The updated <#=entityName#>.
        """
        self.content_type = "<#=jsonContentType#>"
        self.method = "PATCH"
        entity = <#=entityName#>(json.loads(self.send(<#=entity.Name.ToUnderscore()#>).content))
        self._initialize_collection_properties(entity)
        return entity

<#
    if (!isPython2) {
#>
    @asyncio.coroutine
    def update_async(self, <#=entity.Name.ToUnderscore()#>):
        """Updates the specified <#=entityName#> in async
        
        Args:
            <#=entity.Name.ToUnderscore()#> (:class:`<#=entityName#><onedrivesdk.model.<#=entityName.ToUnderscore()#>.<#=entityName#>>`):
                The <#=entityName#> to update.

        Yields:
            :class:`<#=entityName#><onedrivesdk.model.<#=entityName.ToUnderscore()#>.<#=entityName#>>`:
                The updated <#=entityName#>.
        """
        future = self._client._loop.run_in_executor(None,
                                                    self.update,
                                                    <#=entity.Name.ToUnderscore()#>)
        entity = yield from future
        return entity

<#
    }
        var collectionProperties = entity.Properties.Where(property => property.IsCollection() && property.Type.IsComplex());

        if (collectionProperties.Any())
        {
#>
    def _initialize_collection_properties(self, value):
        if value and value._prop_dict:
<#
            foreach(var property in collectionProperties)
            {
                var propertyName = property.Name.ToUnderscore();
                var propertyType = property.GetTypeString();
#>
            if value.<#=propertyName#> and value.<#=propertyName#>._prop_dict:
                if "<#=propertyName.ToLowerFirstChar()#>@odata.nextLink" in value._prop_dict:
                    next_page_link = value._prop_dict["<#=propertyName.ToLowerFirstChar()#>@odata.nextLink"]
                    value.<#=propertyName#>._init_next_page_request(next_page_link, self._client, None)
<#
            }
        }
#>
