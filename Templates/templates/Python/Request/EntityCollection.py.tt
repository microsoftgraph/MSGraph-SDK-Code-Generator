<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
CustomT4Host host       = (CustomT4Host) Host;
OdcmModel model         = host.CurrentModel;
CodeWriterPython writer = (CodeWriterPython) host.CodeWriter;
var clientName          = model.GetEntityContainer().ToUpperFirstChar() + "Client";
var clientNameLower     = clientName.ToLowerFirstChar();
var prop                = host.CurrentType as OdcmProperty;
var innerEntity = prop.Type;
var innerEntityType = innerEntity.IsComplex() ? innerEntity.GetTypeString().ToUpperFirstChar() : innerEntity.GetTypeString();
var innerEntityRequestBuilder = innerEntityType + "RequestBuilder";
var collectionRequest = prop.Name.ToUpperFirstChar() + "CollectionRequest";
var collectionRequestBuilder = prop.Name.ToUpperFirstChar() + "CollectionRequestBuilder";
var collectionPage = prop.Name.ToUpperFirstChar() + "CollectionPage";
var collectionResponse = prop.Name.ToUpperFirstChar() + "CollectionResponse";
TemplateWriterSettings settings = ConfigurationService.Settings;
var jsonContentType     = "application/json";
var isPython2           = ConfigurationService.Settings.CustomFlags.Contains("python2");

#>
<#=writer.WriteHeader(writer.GeneratedHeader)#>
from __future__ import unicode_literals
from ..collection_base import CollectionRequestBase, CollectionResponseBase, CollectionPageBase
from ..request_builder_base import RequestBuilderBase
<#
if (innerEntity.IsComplex()) {
#>
from ..model.<#=innerEntityType.ToUnderscore()#> import <#=innerEntityType#>
<#
}
#>
import json
<#
if (!isPython2) {
#>
import asyncio
<#
}
#>

class <#=collectionRequest#>(CollectionRequestBase):

    def __init__(self, request_url, client, options):
        """Initialize the <#=collectionRequest#>
        
        Args:
            request_url (str): The url to perform the <#=collectionRequest#>
                on
            client (:class:`OneDriveClient<onedrivesdk.request.one_drive_client.OneDriveClient>`):
                The client which will be used for the request
            options (list of :class:`Option<onedrivesdk.options.Option>`):
                A list of options to pass into the request
        """
        super(<#=collectionRequest#>, self).__init__(request_url, client, options)

<#
    if (prop.LongDescriptionContains("writable")){
#>
    def add(self, entity):
        """Add a <#=innerEntityType#> to the collection
        
        Args:
            entity (:class:`<#=innerEntityType#><onedrivesdk.model.<#=innerEntityType.ToUnderscore()#>.<#=innerEntityType#>>`):
                The <#=innerEntityType#> that you would like to add to the collection
        
        Returns: 
            :class:`<#=innerEntityType#><onedrivesdk.model.<#=innerEntityType.ToUnderscore()#>.<#=innerEntityType#>>`:
                The <#=innerEntityType#> that you added, with additional data from OneDrive
        """
        self.content_type = "<#=jsonContentType#>"
        self.method = "POST"
        entity = <#=innerEntityType#>(json.loads(self.send(entity).content))
        return entity

<#
        if (!isPython2) {
#>
    @asyncio.coroutine
    def add_async(self, entity):
        """Add a <#=innerEntityType#> to the collection in async
        
        Args:
            entity (:class:`<#=innerEntityType#><onedrivesdk.model.<#=innerEntityType.ToUnderscore()#>.<#=innerEntityType#>>`):
                The <#=innerEntityType#> that you would like to add to the collection
        
        Yields: 
            :class:`<#=innerEntityType#><onedrivesdk.model.<#=innerEntityType.ToUnderscore()#>.<#=innerEntityType#>>`:
                The <#=innerEntityType#> that you added, with additional data from OneDrive
        """
        future = self._client._loop.run_in_executor(None,
                                                    self.add,
                                                    entity)
        entity = yield from future
        return entity

<#
        }
    }
#>
    def get(self):
        """Gets the <#=collectionPage#>

        Returns: 
            :class:`<#=collectionPage#><onedrivesdk.request.<#=collectionPage.Replace("Page","").ToUnderscore()#>.<#=collectionPage#>>`:
                The <#=collectionPage#>
        """
        self.method = "GET"
        collection_response = <#=collectionResponse#>(json.loads(self.send().content))
        return self._page_from_response(collection_response)

<#
        if (!isPython2) {
#>
    @asyncio.coroutine
    def get_async(self):
        """Gets the <#=collectionPage#> in async

        Yields: 
            :class:`<#=collectionPage#><onedrivesdk.request.<#=collectionPage.Replace("Page","").ToUnderscore()#>.<#=collectionPage#>>`:
                The <#=collectionPage#>
        """
        future = self._client._loop.run_in_executor(None,
                                                    self.get)
        collection_page = yield from future
        return collection_page
<#
        }
#>

class <#=collectionRequestBuilder#>(RequestBuilderBase):

    def __getitem__(self, key):
        """Get the <#=innerEntityRequestBuilder#> with the specified key
        
        Args:
            key (str): The key to get a <#=innerEntityRequestBuilder#> for
        
        Returns: 
            :class:`<#=innerEntityRequestBuilder#><onedrivesdk.request.<#=innerEntityRequestBuilder.ToUnderscore()#>.<#=innerEntityRequestBuilder#>>`:
                A <#=innerEntityRequestBuilder#> for that key
        """
        return <#=innerEntityRequestBuilder#>(self.append_to_request_url(str(key)), self._client)

    def request(self, expand=None, select=None, top=None, order_by=None, options=None):
        """Builds the <#=collectionRequest#>
        
        Args:
            expand (str): Default None, comma-seperated list of relationships
                to expand in the response.
            select (str): Default None, comma-seperated list of properties to
                include in the response.
            top (int): Default None, the number of items to return in a result.
            order_by (str): Default None, comma-seperated list of properties
                that are used to sort the order of items in the response.
            options (list of :class:`Option<onedrivesdk.options.Option>`):
                A list of options to pass into the request. Defaults to None.

        Returns:
            :class:`<#=collectionRequest#><onedrivesdk.request.<#=collectionRequest.Replace("Request","").ToUnderscore()#>.<#=collectionRequest#>>`:
                The <#=collectionRequest#>
        """
        req = <#=collectionRequest#>(self._request_url, self._client, options)
        req._set_query_options(expand=expand, select=select, top=top, order_by=order_by)
        return req

<#
    if (prop.LongDescriptionContains("writable")){
#>
    def add(self, entity):
        """Add a <#=innerEntityType#> to the collection
        
        Args:
            entity (:class:`<#=innerEntityType#><onedrivesdk.model.<#=innerEntityType.ToUnderscore()#>.<#=innerEntityType#>>`):
                The <#=innerEntityType#> that you would like to add to the collection
        
        Returns: 
            :class:`<#=innerEntityType#><onedrivesdk.model.<#=innerEntityType.ToUnderscore()#>.<#=innerEntityType#>>`:
                The <#=innerEntityType#> that you added, with additional data from OneDrive
        """
        return self.request().add(entity)

<#
        if (!isPython2) {
#>
    @asyncio.coroutine
    def add_async(self, entity):
        """Add a <#=innerEntityType#> to the collection in async
        
        Args:
            entity (:class:`<#=innerEntityType#><onedrivesdk.model.<#=innerEntityType.ToUnderscore()#>.<#=innerEntityType#>>`):
                The <#=innerEntityType#> that you would like to add to the collection
        
        Yields: 
            :class:`<#=innerEntityType#><onedrivesdk.model.<#=innerEntityType.ToUnderscore()#>.<#=innerEntityType#>>`:
                The <#=innerEntityType#> that you added, with additional data from OneDrive
        """
        entity = yield from self.request().add_async(entity)
        return entity

<#
        }
    }
#>
    def get(self):
        """Gets the <#=collectionPage#>

        Returns: 
            :class:`<#=collectionPage#><onedrivesdk.request.<#=collectionPage.Replace("Page","").ToUnderscore()#>.<#=collectionPage#>>`:
                The <#=collectionPage#>
        """
        return self.request().get()

<#
        if (!isPython2) {
#>
    @asyncio.coroutine
    def get_async(self):
        """Gets the <#=collectionPage#> in async

        Yields: 
            :class:`<#=collectionPage#><onedrivesdk.request.<#=collectionPage.Replace("Page","").ToUnderscore()#>.<#=collectionPage#>>`:
                The <#=collectionPage#>
        """
        collection_page = yield from self.request().get_async()
        return collection_page
<#
    }
#>


class <#=collectionResponse#>(CollectionResponseBase):

    @property
    def collection_page(self):
        """The collection page stored in the response JSON
        
        Returns:
            :class:`<#=collectionPage#><onedrivesdk.request.<#=collectionPage.Replace("Page","").ToUnderscore()#>.<#=collectionPage#>>`:
                The collection page
        """
        if self._collection_page:
            self._collection_page._prop_list = self._prop_dict["value"]
        else:
            self._collection_page = <#=collectionPage#>(self._prop_dict["value"])

        return self._collection_page


class <#=collectionPage#>(CollectionPageBase):

    def __getitem__(self, index):
        """Get the <#=innerEntityType#> at the index specified
        
        Args:
            index (int): The index of the item to get from the <#=collectionPage#>

        Returns:
            :class:`<#=innerEntityType#><onedrivesdk.model.<#=innerEntityType.ToUnderscore()#>.<#=innerEntityType#>>`:
                The <#=innerEntityType#> at the index
        """
        return <#=innerEntityType#>(self._prop_list[index])

    def <#=prop.Name.ToUnderscore()#>(self):
        """Get a generator of <#=innerEntityType#> within the <#=collectionPage#>
        
        Yields:
            :class:`<#=innerEntityType#><onedrivesdk.model.<#=innerEntityType.ToUnderscore()#>.<#=innerEntityType#>>`:
                The next <#=innerEntityType#> in the collection
        """
        for item in self._prop_list:
            yield <#=innerEntityType#>(item)

    def _init_next_page_request(self, next_page_link, client, options):
        """Initialize the next page request for the <#=collectionPage#>
        
        Args:
            next_page_link (str): The URL for the next page request
                to be sent to
            client (:class:`OneDriveClient<onedrivesdk.model.one_drive_client.OneDriveClient>`:
                The client to be used for the request
            options (list of :class:`Option<onedrivesdk.options.Option>`:
                A list of options
        """
        self._next_page_request = <#=collectionRequest#>(next_page_link, client, options)


from ..request.<#=innerEntityRequestBuilder.ToUnderscore()#> import <#=innerEntityRequestBuilder#>
