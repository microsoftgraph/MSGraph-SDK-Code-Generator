<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
CustomT4Host host               = (CustomT4Host) Host;
OdcmModel model                 = host.CurrentModel;
CodeWriterPHP writer	        = (CodeWriterPHP) host.CodeWriter;
OdcmClass entity                = host.CurrentType.AsOdcmClass();
TemplateWriterSettings settings = ConfigurationService.Settings;
String entityName               = entity.Name.SanitizeEntityName();
String entityCheckedCase        = entity.Name.ToCheckedCase();
String targetNamespace          = TypeHelperPHP.GetPHPNamespace(entity, settings);
String entityBaseName           = TypeHelperPHP.GetBaseTypeFullName(entity.Base, targetNamespace, settings);
if (entityBaseName.Contains("\\"))
{
    entityBaseName = "\\" + entityBaseName;
}

#>
<#=writer.WriteHeader(writer.GetDocBlock(entityName.ToCheckedCase()))#>
namespace <#=targetNamespace#>;

<#=writer.GetClassBlock(entityName.ToCheckedCase().ToString(), "Model")#>
<#
if (String.IsNullOrEmpty(entityBaseName)) {
#>
class <#=entityName.ToCheckedCase()#> implements \JsonSerializable
<#
} else {
#>
class <#=entityName.ToCheckedCase()#> extends <#=entityBaseName#>
<#
}
#>
{
<#
if (String.IsNullOrEmpty(entityBaseName)) {
#>
    /**
    * The array of properties available
    * to the model
    *
    * @var array $_propDict
    */
    protected $_propDict;

    /**
    * Construct a new <#=entityName.ToCheckedCase()#>
    *
    * @param array $propDict A list of properties to set
    */
    function __construct($propDict = array())
    {
        if (!is_array($propDict)) {
           $propDict = array();
        }
        $this->_propDict = $propDict;
    }

    /**
    * Gets the property dictionary of the <#=entity.Name.ToUpperFirstChar()#>
    *
    * @return array The list of properties
    */
    public function getProperties()
    {
        return $this->_propDict;
    }

<#
}
foreach(var property in entity.Properties.Where(prop => prop.Type.GetTypeString() != "bytes")){
    String propertyName = property.Name.SanitizePropertyName(entityName).ToCamelize();
    var camelCasePropertyName = property.Name.ToCamelize();
    var propertyTypeString = property.Type.GetTypeString();
    var propertyNamespace = TypeHelperPHP.GetPHPNamespace(property.Type, settings);

    // Check whether this type is a generated model type or a PHP type
    var fullPropertyTypeName = propertyTypeString[0] == '\\' || propertyTypeString.IsPHPPrimitiveType()
                                ? propertyTypeString
                                : '\\' + string.Join("\\", propertyNamespace, propertyTypeString.SanitizeEntityName().ToCheckedCase());

    var propertyTypeReference = propertyNamespace == targetNamespace && !propertyTypeString.IsPHPPrimitiveType()
                                ? propertyTypeString.SanitizeEntityName().ToCheckedCase()
                                : fullPropertyTypeName;
    if (property.Type.IsComplex()) {
        if (property.IsCollection()) {
#>

     /**
     * Gets the <#=propertyName#>
<# if (property.LongDescription != null || property.Description != null) {
#>
    * <#=property.GetSanitizedLongDescription()#>
<# } #>
     *
     * @return array|null The <#=propertyName#>
     */
    public function get<#=propertyName.ToCheckedCase()#>()
    {
        if (array_key_exists("<#=camelCasePropertyName#>", $this->_propDict)) {
           return $this->_propDict["<#=camelCasePropertyName#>"];
        } else {
            return null;
        }
    }

    /**
    * Sets the <#=propertyName#>
<# if (property.LongDescription != null || property.Description != null) {
#>
    * <#=property.GetSanitizedLongDescription()#>
<# } #>
    *
    * @param <#=propertyTypeReference#>[] $val The <#=propertyName#>
    *
    * @return <#=entityName.ToCheckedCase()#>
    */
    public function set<#=propertyName.ToCheckedCase()#>($val)
    {
        $this->_propDict["<#=camelCasePropertyName#>"] = $val;
        return $this;
    }

<#
   } else {
#>
    /**
    * Gets the <#=propertyName#>
<# if (property.LongDescription != null || property.Description != null) {
#>
    * <#=property.GetSanitizedLongDescription()#>
<# } #>
    *
    * @return <#=propertyTypeReference#>|null The <#=propertyName#>
    */
    public function get<#=propertyName.ToCheckedCase()#>()
    {
        if (array_key_exists("<#=camelCasePropertyName#>", $this->_propDict)) {
            if (is_a($this->_propDict["<#=camelCasePropertyName#>"], "<#=fullPropertyTypeName#>") || is_null($this->_propDict["<#=camelCasePropertyName#>"])) {
                return $this->_propDict["<#=camelCasePropertyName#>"];
            } else {
<# if (propertyTypeString == "\\GuzzleHttp\\Psr7\\Stream") { #>
                $this->_propDict["<#=camelCasePropertyName#>"] = \GuzzleHttp\Psr7\Utils::streamFor($this->_propDict["<#=camelCasePropertyName#>"]);
                return $this->_propDict["<#=camelCasePropertyName#>"];
<# } else { #>
                $this->_propDict["<#=camelCasePropertyName#>"] = new <#=propertyTypeReference#>($this->_propDict["<#=camelCasePropertyName#>"]);
                return $this->_propDict["<#=camelCasePropertyName#>"];
<# } #>
            }
        }
        return null;
    }

    /**
    * Sets the <#=propertyName#>
<# if (property.LongDescription != null || property.Description != null) {
#>
    * <#=property.GetSanitizedLongDescription()#>
<# } #>
    *
    * @param <#=propertyTypeReference#> $val The <#=propertyName#>
    *
    * @return <#=entityName.ToCheckedCase()#>
    */
    public function set<#=propertyName.ToCheckedCase()#>($val)
    {
<#  if (propertyTypeString == "bool") { #>
        $this->_propDict["<#=camelCasePropertyName#>"] = boolval($val);
<#  } else if (propertyTypeString == "int") { #>
        $this->_propDict["<#=camelCasePropertyName#>"] = intval($val);
<#  } else if (propertyTypeString == "float") { #>
        $this->_propDict["<#=camelCasePropertyName#>"] = floatval($val);
<# } else { #>
        $this->_propDict["<#=camelCasePropertyName#>"] = $val;
<# } #>
        return $this;
    }

<#
            }
        } else {
#>
    /**
    * Gets the <#=propertyName#>
<# if (property.LongDescription != null || property.Description != null) {
#>
    * <#=property.GetSanitizedLongDescription()#>
<# } #>
    *
    * @return <#=(property.IsCollection()) ? "array" : propertyTypeReference#>|null The <#=propertyName#>
    */
    public function get<#=propertyName.ToCheckedCase()#>()
    {
        if (array_key_exists("<#=camelCasePropertyName#>", $this->_propDict)) {
<#
            if (propertyTypeString == "\\DateTime") {
#>
            return new \DateTime($this->_propDict["<#=camelCasePropertyName#>"]);
<#
            } else {
#>
            return $this->_propDict["<#=camelCasePropertyName#>"];
<#
            }
#>
        } else {
            return null;
        }
    }

    /**
    * Sets the <#=propertyName#>
<# if (property.LongDescription != null || property.Description != null) {
#>
    * <#=property.GetSanitizedLongDescription()#>
<# } #>
    *
    * @param <#=(property.IsCollection()) ? $"{propertyTypeReference}[]" : propertyTypeReference#> $val The <#=propertyName#>
    *
    * @return <#=entityName.ToCheckedCase()#>
    */
    public function set<#=propertyName.ToCheckedCase()#>($val)
    {
<#
    if (propertyTypeString == "\\DateTime") {
#>
        $this->_propDict["<#=camelCasePropertyName#>"]
            = $val->format(\DateTime::ISO8601) . "Z";
<#
      } else {
#>
<#  if (propertyTypeString == "bool") { #>
        $this->_propDict["<#=property.Name#>"] = boolval($val);
<#  } else if (propertyTypeString == "int") { #>
        $this->_propDict["<#=property.Name#>"] = intval($val);
<# } else if (propertyTypeString == "float") { #>
        $this->_propDict["<#=property.Name#>"] = floatval($val);
<# } else { #>
        $this->_propDict["<#=property.Name#>"] = $val;
<# } #>
<#
            }
#>
        return $this;
    }

<#
        }
    }
    if (String.IsNullOrEmpty(entityBaseName)) {
#>
    /**
    * Gets the ODataType
    *
    * @return string|null The ODataType
    */
    public function getODataType()
    {
        if (array_key_exists('@odata.type', $this->_propDict)) {
            return $this->_propDict["@odata.type"];
        }
        return null;
    }

    /**
    * Sets the ODataType
    *
    * @param string $val The ODataType
    *
    * @return <#=entityName.ToCheckedCase()#>
    */
    public function setODataType($val)
    {
        $this->_propDict["@odata.type"] = $val;
        return $this;
    }

    /**
    * Serializes the object by property array
    * Manually serialize DateTime into RFC3339 format
    *
    * @return array The list of properties
    */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        $serializableProperties = $this->getProperties();
        foreach ($serializableProperties as $property => $val) {
            if (is_a($val, "\DateTime")) {
                $serializableProperties[$property] = $val->format(\DateTime::RFC3339);
            } else if (is_a($val, "\Microsoft\Graph\Core\Enum")) {
                $serializableProperties[$property] = $val->value();
            } else if (is_a($val, "\Entity")) {
                $serializableProperties[$property] = $val->jsonSerialize();
            }
        }
        return $serializableProperties;
    }
<#
    }
#>
}
