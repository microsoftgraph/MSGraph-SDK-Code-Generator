<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var prop = host.CurrentType.AsOdcmProperty();

string propName = null;
string propClass = null;
string propRequest = null;
string @namespace = null;

// If the current type isn't a property it's a content $value stream for a media entity
if (prop == null)
{
    var entity = host.CurrentType.AsOdcmClass();
    propName = "content";
    propClass = entity.Name.ToCheckedCase();
    propRequest = propClass + "ContentRequest";
    @namespace = entity.Namespace.GetNamespaceName();
}
else
{
    propName = prop.Name;
    propClass = prop.Class.Name.ToCheckedCase();
    propRequest = propClass + prop.Name.ToCheckedCase() + "Request";
    @namespace = prop.Class.AsOdcmClass().Namespace.GetNamespaceName();
}

var iBaseRequestTypeName = @namespace.GetCoreLibraryType("IBaseRequest");
var iHttpProviderTypeName = @namespace.GetCoreLibraryType("IHttpProvider");

if (propClass.EndsWith("Request"))
{
    propClass = String.Concat(propClass, "Object");
}
#>

namespace <#=@namespace#>
{
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Threading;

    /// <summary>
    /// The interface I<#=propRequest#>.
    /// </summary>
    public partial interface I<#=propRequest#> : <#=iBaseRequestTypeName#>
    {
        /// <summary>
        /// Gets the stream.
        /// </summary>
        /// <returns>The stream.</returns>
        System.Threading.Tasks.Task<Stream> GetAsync();

        /// <summary>
        /// Gets the stream.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <param name="completionOption">The <see cref="HttpCompletionOption"/> to pass to the <see cref="<#=iHttpProviderTypeName#>"/> on send.</param>
        /// <returns>The stream.</returns>
        System.Threading.Tasks.Task<Stream> GetAsync(CancellationToken cancellationToken, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead);

<#
        if (prop != null)
        {
    #>

        /// <summary>
        /// PUTs the specified stream.
        /// </summary>
        /// <typeparam name="T">The type returned by the PUT call.</typeparam>
        /// <param name="<#=propName#>">The stream to PUT.</param>
        /// <returns>The object returned by the PUT call.</returns>
        System.Threading.Tasks.Task<T> PutAsync<T>(Stream <#=propName#>) where T : <#=propClass#>;

        /// <summary>
        /// PUTs the specified stream.
        /// </summary>
        /// <typeparam name="T">The type returned by the PUT call.</typeparam>
        /// <param name="<#=propName#>">The stream to PUT.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <param name="completionOption">The <see cref="HttpCompletionOption"/> to pass to the <see cref="<#=iHttpProviderTypeName#>"/> on send.</param>
        /// <returns>The object returned by the PUT call.</returns>
        System.Threading.Tasks.Task<T> PutAsync<T>(Stream <#=propName#>, CancellationToken cancellationToken, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead) where T : <#=propClass#>;
    <#
        }
        else
        {
    #>

        /// <summary>
        /// PUTs the specified stream.
        /// </summary>
        /// <param name="<#=propName#>">The stream to PUT.</param>
        /// <returns>The updated stream.</returns>
        System.Threading.Tasks.Task<Stream> PutAsync(Stream <#=propName#>);

        /// <summary>
        /// PUTs the specified stream.
        /// </summary>
        /// <param name="<#=propName#>">The stream to PUT.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <param name="completionOption">The <see cref="HttpCompletionOption"/> to pass to the <see cref="<#=iHttpProviderTypeName#>"/> on send.</param>
        /// <returns>The updated stream.</returns>
        System.Threading.Tasks.Task<Stream> PutAsync(Stream <#=propName#>, CancellationToken cancellationToken, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead);
    <#
        }
    #>

    }
}
