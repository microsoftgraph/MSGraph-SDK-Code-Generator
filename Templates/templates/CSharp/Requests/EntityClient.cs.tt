<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#
var entityContainer = model.EntityContainer;
var clientName = entityContainer.Name.ToCheckedCase() + "Client";

var @namespace = entityContainer.Namespace.GetNamespaceName();
#>

namespace <#=@namespace#>
{
    using System;
    using System.Net.Http;

    /// <summary>
    /// The type <#=clientName#>.
    /// </summary>
    public partial class <#=clientName#> : BaseClient, I<#=clientName#>
    {
        /// <summary>
        /// Instantiates a new <#=clientName#>.
        /// </summary>
        /// <param name="authenticationProvider">The <see cref="IAuthenticationProvider"/> for authenticating request messages.</param>
        /// <param name="httpProvider">The <see cref="IHttpProvider"/> for sending requests.</param>
        public <#=clientName#>(
            IAuthenticationProvider authenticationProvider,
            IHttpProvider httpProvider = null)
            : this("<#=ConfigurationService.Settings.DefaultBaseEndpointUrl#>", authenticationProvider, httpProvider)
        {
        }

        /// <summary>
        /// Instantiates a new <#=clientName#>.
        /// </summary>
        /// <param name="baseUrl">The base service URL. For example, "<#=ConfigurationService.Settings.DefaultBaseEndpointUrl#>".</param>
        /// <param name="authenticationProvider">The <see cref="IAuthenticationProvider"/> for authenticating request messages.</param>
        /// <param name="httpProvider">The <see cref="IHttpProvider"/> for sending requests.</param>
        public <#=clientName#>(
            string baseUrl,
            IAuthenticationProvider authenticationProvider,
            IHttpProvider httpProvider = null)
            : base(baseUrl, authenticationProvider, httpProvider)
        {
        }

        /// <summary>
        /// Instantiates a new <#=clientName#>.
        /// </summary>
        /// <param name="httpClient">The <see cref="HttpClient"/> to use for making requests to Microsoft Graph. Use the <see cref="GraphClientFactory"/>
        /// to get a pre-configured HttpClient that is optimized for use with the Microsoft Graph service API. </param>
        public <#=clientName#>(
            HttpClient httpClient)
            : base("<#=ConfigurationService.Settings.DefaultBaseEndpointUrl#>", httpClient)
        {
        }
    <#

    foreach(var prop in model.EntityContainer.Properties)
    {
        var propName = string.Concat(entityContainer.Name.ToCheckedCase(), prop.Name.ToCheckedCase());
        var sanitizedPropName = prop.Name.ToCheckedCase().GetSanitizedPropertyName();

        if (prop.IsCollection())
        {
            var collectionRequestBuilder = propName + "CollectionRequestBuilder";
    #>

        /// <summary>
        /// Gets the <#=propName#> request builder.
        /// </summary>
<# if (prop.Deprecation != null) { #>
        <#=prop.GetDeprecationString()#>
<# } #>
        public I<#=collectionRequestBuilder#> <#=sanitizedPropName#>
        {
            get
            {
                return new <#=collectionRequestBuilder#>(this.BaseUrl + "/<#=prop.Name#>", this);
            }
        }
    <#
        }
        else
        {
            var requestBuilder = prop.GetTypeString(@namespace, "{0}RequestBuilder");
            var iRequestBuilder = prop.GetTypeString(@namespace, "I{0}RequestBuilder");
    #>

        /// <summary>
        /// Gets the <#=propName#> request builder.
        /// </summary>
<# if (prop.Deprecation != null) { #>
        <#=prop.GetDeprecationString()#>
<# } #>
        public <#=iRequestBuilder#> <#=sanitizedPropName#>
        {
            get
            {
                return new <#=requestBuilder#>(this.BaseUrl + "/<#=prop.Name#>", this);
            }
        }
    <#
        }
    }
    #>

    }
}
