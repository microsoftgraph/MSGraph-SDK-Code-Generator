<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var method = host.CurrentType.AsOdcmMethod();
var @namespace = method.Namespace.GetNamespaceName();

var entityName = method.Class.Name.ToCheckedCase();
var methodName = method.Name.ToCheckedCase();
var requestType = entityName + methodName + "Request";
var requestBuilderType = requestType + "Builder";

var isPost = method.IsAction() && method.Parameters != null && method.Parameters.Any();
var methodType = method.IsFunction ? "Function" : "Action";

var baseMethodRequestBuilderTypeName = @namespace.GetCoreLibraryType("Base" + methodType + "MethodRequestBuilder");
var iBaseClientTypeName = @namespace.GetCoreLibraryType("IBaseClient");
var optionTypeName = @namespace.GetCoreLibraryType("Option");

// Get navigation properties and methods of the return type if the method is composable.
var composableMethodNavigations = method.IsComposable ? method.GetComposableFunctionReturnTypeNavigations() : new List<OdcmProperty>();
var composableNavigationsInfo = composableMethodNavigations.GetAllNavigationPropertyInfo();
var composableMethodMethods = method.IsComposable ? method.GetComposableFunctionReturnTypeMethods() : new List<OdcmMethod>();
var composableMethodsInfo = composableMethodMethods.GetAllMethodsInfo(@namespace);

// Overloads are determined based on the name of method and the type of the binding parameter.
// There is no differentiation between an entity, and a collection of the same entities.
// This may cause issues in the future that would require changes.
var overloads = new List<OdcmMethod>();
overloads.Add(method);
overloads.AddRange(method.Overloads);
var overloadMethodsInfo = overloads.GetAllMethodsInfo(@namespace);

#>

namespace <#=@namespace#>
{
    using System;
    using System.Collections.Generic;
    using System.IO;

    /// <summary>
    /// The type <#=requestBuilderType#>.
    /// </summary>
    public partial class <#=requestBuilderType#> : <#=baseMethodRequestBuilderTypeName#><I<#=requestType#>>, I<#=requestBuilderType#>
    {
<#
// We only want to generate unique method signatures. 
// We'll use the ParametersAsArguments to define the uniqueness of a method.
HashSet<string> uniqueMethods = new HashSet<string>();
foreach (var m in overloadMethodsInfo)
{
    // Only generate a unique method.
    if (uniqueMethods.Add(m.ParametersAsArguments) == true) 
    {
#>
        /// <summary>
        /// Constructs a new <see cref="<#=requestBuilderType#>"/>.
        /// </summary>
        /// <param name="requestUrl">The URL for the request.</param>
        /// <param name="client">The <see cref="<#=iBaseClientTypeName#>"/> for handling requests.</param><#=m.ParameterComments#>
        public <#=requestBuilderType#>(
            string requestUrl,
            <#=iBaseClientTypeName#> client<#=m.ParametersAsArguments#>)
            : base(requestUrl, client)
        {
<#
        foreach (var p in m.Parameters)
        {
#>
            this.SetParameter("<#=p.Name#>", <#=p.ParameterName#>, <#=p.IsNullable.ToString().ToLowerInvariant()#>);
<#
        }
        if (method.IsFunction)
        {
#>
            this.SetFunctionParameters();
<#
        }
#>        }

<#
    }
}
#>
        /// <summary>
        /// A method used by the base class to construct a request class instance.
        /// </summary>
        /// <param name="functionUrl">The request URL to </param>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>An instance of a specific request class.</returns>
        protected override I<#=requestType#> CreateRequest(string functionUrl, IEnumerable<<#=optionTypeName#>> options)
        {
            var request = new <#=requestType#>(functionUrl, this.Client, options);

<#
    if (isPost)
    {
        HashSet<string> uniqueParameters = new HashSet<string>();

        foreach (var m in overloadMethodsInfo)
        {
            foreach (var p in m.Parameters)
            {
                // We only want to add unique parameters to CreateRequest. 
                if (uniqueParameters.Add(p.Name) == true) 
                {
#>
            if (this.HasParameter("<#=p.Name#>"))
            {
                request.RequestBody.<#=p.PropertyName#> = this.GetParameter<<#=p.Type#>>("<#=p.Name#>");
            }

<#
                }
            }
        }
    }
#>
            return request;
        }
<#
    // Add request builders for every function bound to the return type of this function.
    if (composableMethodsInfo != null)
    {
        foreach (var m in composableMethodsInfo)
        {
#>
        /// <summary>
        /// Gets the request builder for <#=m.RequestBuilderType#>.
        /// </summary><#=m.ParameterComments#>
        /// <returns>The <see cref="I<#=m.RequestBuilderType#>"/>.</returns>
        public I<#=m.RequestBuilderType#> <#=m.MethodName#>(<#=m.MethodParametersAsArguments#>)
        {
            return new <#=m.RequestBuilderType#>(
                this.AppendSegmentToRequestUrl("<#=m.MethodFullName#>"),
                this.Client<#=m.ParamArgsForConstructor#>);
        }
<#
        }
    }
#>
<#
    // Add request builders for every navigation property on the return type of this function.
    if (composableNavigationsInfo != null)
    {
        foreach (var n in composableNavigationsInfo)
        {
#>
        /// <summary>
        /// Gets the request builder for <#=n.Name#>.
        /// <#=n.Description#>
        /// </summary>
        /// <returns>The <see cref="<#=n.ReturnInterfaceRequestBuilderName#>"/>.</returns>
        public <#=n.ReturnInterfaceRequestBuilderName#> <#=n.Name#>
        {
            get
            {
                return new <#=n.ReturnClassRequestBuilderName#>(this.AppendSegmentToRequestUrl("<#=n.Segment#>"), this.Client);
            }
        }
<#
        }
    }
#>
    }
}
