<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var prop = host.CurrentType.AsOdcmProperty();

string propName = null;
string propClass = null;
string propRequest = null;
string propRequestBuilder = null;
string @namespace = null;

// If the current type isn't a property it's a content $value stream for a media entity
if (prop == null)
{
    var entity = host.CurrentType.AsOdcmClass();
    propName = "content";
    propClass = entity.Name.ToCheckedCase();
    propRequest = propClass + "ContentRequest";
    propRequestBuilder = propClass + "ContentRequestBuilder";
    @namespace = entity.Namespace.GetNamespaceName();
}
else
{
    propName = prop.Name;
    propClass = prop.Class.Name.ToCheckedCase();
    propRequest = propClass + prop.Name.ToCheckedCase() + "Request";
    propRequestBuilder = propClass + prop.Name.ToCheckedCase() + "RequestBuilder";
    @namespace = prop.Class.AsOdcmClass().Namespace.GetNamespaceName();
}

var iBaseClientTypeName = @namespace.GetCoreLibraryType("IBaseClient");
var optionTypeName = @namespace.GetCoreLibraryType("Option");
var baseRequestBuilderTypeName = @namespace.GetCoreLibraryType("BaseRequestBuilder");

#>

namespace <#=@namespace#>
{
    using System.Collections.Generic;

    /// <summary>
    /// The type <#=propRequestBuilder#>.
    /// </summary>
    public partial class <#=propRequestBuilder#> : <#=baseRequestBuilderTypeName#>, I<#=propRequestBuilder#>
    {
        /// <summary>
        /// Constructs a new <#=propRequestBuilder#>.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="<#=iBaseClientTypeName#>"/> for handling requests.</param>
        public <#=propRequestBuilder#>(
            string requestUrl,
            <#=iBaseClientTypeName#> client)
            : base(requestUrl, client)
        {
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>The built request.</returns>
        public I<#=propRequest#> Request(IEnumerable<<#=optionTypeName#>> options = null)
        {
            return new <#=propRequest#>(this.RequestUrl, this.Client, options);
        }
    }
}
