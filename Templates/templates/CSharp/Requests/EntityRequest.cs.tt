<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="EntityRequest.Base.template.tt"#>
<#

OdcmClass entity = host.CurrentType.AsOdcmClass();
var @namespace = this.GetNamespaceName(entity);
var entityName = this.GetEntityNameString(entity);

var features = host.CurrentType.GetFeatures();

#>

namespace <#=@namespace#>
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Linq.Expressions;

    <#=this.GetEntityRequestClassDefinition(entity)#>
    {
        <#=this.GetEntityRequestConstructor(entity)#>

<#
    if (features.CanCreate)
    {
        Write("        ");
        Write(this.GetEntityCreateAsyncMethod(entity));
        Write("\n\n");
    }

    if (features.CanDelete)
    {
        Write("        ");
        Write(this.GetEntityDeleteAsyncMethod(entity));
        Write("\n\n");
    }

    Write("        ");
    Write(this.GetEntityGetAsyncMethod(entity));
    Write("\n\n");

    if (features.CanUpdate)
    {
        Write("        ");
        Write(this.GetEntityUpdateAsyncMethod(entity));
        Write("\n\n");
    }

    if (features.CanExpand)
    {
        Write("        ");
        Write(this.GetEntityExpandMethods(entity));
        Write("\n\n");
    }

    if (features.CanSelect)
    {
        Write("        ");
        Write(this.GetEntitySelectMethods(entity));
        Write("\n\n");
    }

	// This change supports the scenario where we have an entity based model whose name ends with "Request".
	// This will disambiguate with Request objects that are created for models.
	var thisEntity_Name = entity.Name;

	// Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
	if (entityName.EndsWith("Request"))
	{
		thisEntity_Name = String.Concat(entity.Name, "Object");
		entityName = String.Concat(entityName, "Object");
	}


#>
        /// <summary>
        /// Initializes any collection properties after deserialization, like next requests for paging.
        /// </summary>
        /// <param name="<#=thisEntity_Name#>ToInitialize">The <see cref="<#=entityName#>"/> with the collection properties to initialize.</param>
        private void InitializeCollectionProperties(<#=entityName#> <#=thisEntity_Name#>ToInitialize)
        {
<#
        var navigationCollectionProperties = entity.Properties.Where(property => property.IsCollection() && property.IsNavigation());

        if (navigationCollectionProperties.Any())
        {
#>

            if (<#=thisEntity_Name#>ToInitialize != null && <#=thisEntity_Name#>ToInitialize.AdditionalData != null)
            {
<#
            foreach(var property in navigationCollectionProperties)
            {
                var propertyName = property.Name.ToCheckedCase().GetSanitizedPropertyName();

                if (property.IsComplex())
                {
#>

                if (<#=thisEntity_Name#>ToInitialize.<#=propertyName#> != null && <#=thisEntity_Name#>ToInitialize.<#=propertyName#>.CurrentPage != null)
                {
                    <#=thisEntity_Name#>ToInitialize.<#=propertyName#>.AdditionalData = <#=thisEntity_Name#>ToInitialize.AdditionalData;

                    object nextPageLink;
                    <#=thisEntity_Name#>ToInitialize.AdditionalData.TryGetValue("<#=propertyName.ToLowerFirstChar()#>@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        <#=thisEntity_Name#>ToInitialize.<#=propertyName#>.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }
<#
                }
            }
#>

            }

<#
        }
#>

        }
    }
}
