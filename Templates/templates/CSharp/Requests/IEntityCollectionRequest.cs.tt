<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="ICollectionRequest.Base.template.tt"#>
<#
var prop = host.CurrentType.AsOdcmProperty();
var @namespace = this.GetNamespaceName(prop.Class.AsOdcmClass());

var innerEntityType = prop.GetTypeString(@namespace);
if (innerEntityType.EndsWith("Request"))
{
	innerEntityType = String.Concat(innerEntityType, "Object");
}

var collectionRequest = this.GetPropertyCollectionRequestName(prop);
var collectionResponse = string.Concat(prop.Class.Name.ToCheckedCase(), prop.Name.ToCheckedCase(), "CollectionResponse");
var collectionPage = string.Concat(prop.Class.Name.ToCheckedCase(), prop.Name.ToCheckedCase(), "CollectionPage");

var features = host.CurrentType.GetFeatures();
#>

namespace <#=@namespace#>
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Linq.Expressions;

    <#=this.GetCollectionInterfaceDefinition(prop)#>
    {
        <#=GetPostAsyncMethod(prop, @namespace)#>
        /// <summary>
        /// Gets the collection page.
        /// </summary>
        /// <returns>The collection page.</returns>
        System.Threading.Tasks.Task<I<#=collectionPage#>> GetAsync();

        /// <summary>
        /// Gets the collection page.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The collection page.</returns>
        System.Threading.Tasks.Task<I<#=collectionPage#>> GetAsync(CancellationToken cancellationToken);

<# if (features.CanExpand) { #>
        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        I<#=collectionRequest#> Expand(string value);

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="expandExpression">The expression from which to calculate the expand value.</param>
        /// <returns>The request object to send.</returns>
        I<#=collectionRequest#> Expand(Expression<Func<<#=innerEntityType#>, object>> expandExpression);

<# } #>
<# if (features.CanSelect) { #>
        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        I<#=collectionRequest#> Select(string value);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="selectExpression">The expression from which to calculate the select value.</param>
        /// <returns>The request object to send.</returns>
        I<#=collectionRequest#> Select(Expression<Func<<#=innerEntityType#>, object>> selectExpression);

<# } #>
<# if (features.CanUseTop) { #>
        /// <summary>
        /// Adds the specified top value to the request.
        /// </summary>
        /// <param name="value">The top value.</param>
        /// <returns>The request object to send.</returns>
        I<#=collectionRequest#> Top(int value);

<# } #>
<# if (features.CanFilter) { #>
        /// <summary>
        /// Adds the specified filter value to the request.
        /// </summary>
        /// <param name="value">The filter value.</param>
        /// <returns>The request object to send.</returns>
        I<#=collectionRequest#> Filter(string value);

<# } #>
<# if (features.CanSkip) { #>
        /// <summary>
        /// Adds the specified skip value to the request.
        /// </summary>
        /// <param name="value">The skip value.</param>
        /// <returns>The request object to send.</returns>
        I<#=collectionRequest#> Skip(int value);

<# } #>
<# if (features.CanSort) { #>
        /// <summary>
        /// Adds the specified orderby value to the request.
        /// </summary>
        /// <param name="value">The orderby value.</param>
        /// <returns>The request object to send.</returns>
        I<#=collectionRequest#> OrderBy(string value);
<# } #>
    }
}
