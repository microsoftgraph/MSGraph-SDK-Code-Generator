<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var method = host.CurrentType.AsOdcmMethod();
var @namespace = method.Namespace.GetNamespaceName();
var entityName = method.Class.Name.ToCheckedCase();
var methodName = method.Name.Substring(method.Name.IndexOf('.') + 1).ToCheckedCase();
var monitorType = entityName + methodName + "AsyncMonitor";

var isSpecialCollection = method.LongDescriptionContains("specialCollection");
var isCollection = method.IsCollection || isSpecialCollection;

var returnEntityType = method.ReturnType.GetTypeString(@namespace);
var returnTypeObject = method.ReturnType.AsOdcmClass();
var returnType = isCollection ? "I" + entityName + methodName + "CollectionPage" : returnEntityType;
var serializationType = isCollection ? entityName + methodName + "CollectionResponse" : returnEntityType;
var hasParameters = method.Parameters != null && method.Parameters.Any();

#>

namespace <#=@namespace#>
{
    using System;
    using System.Collections.Generic;
    using System.Threading;

    /// <summary>
    /// The type <#=monitorType#>.
    /// </summary>
    public partial class <#=monitorType#> : AsyncMonitor<<#=serializationType#>>, I<#=monitorType#>
    {
        public <#=monitorType#>(IBaseClient client, string monitorUrl)
            : base(client, monitorUrl)
        {
        }
    <#
    bool includeRequestBody = hasParameters && method.IsAction();
    var methodParameter = "null";
    if (includeRequestBody)
    {
        methodParameter = "this.RequestBody";
    }

    var asyncString = isCollection ? "async " : "";

    #>

        /// <summary>
        /// Polls until the async operation is complete and returns the resulting <#=returnType#>.
        /// </summary>
        public <#=asyncString#>System.Threading.Tasks.Task<<#=returnType#>> CompleteOperationAsync(IProgress<AsyncOperationStatus> progress, CancellationToken cancellationToken)
        {
        <#
        if (isCollection)
        {
        #>

            var response = await this.PollForOperationCompletionAsync(progress, cancellationToken);
            if (response != null && response.Value != null && response.Value.CurrentPage != null)
            {
                if (response.AdditionalData != null)
                {
                    response.Value.AdditionalData = response.AdditionalData;

                    object nextPageLink;
                    response.AdditionalData.TryGetValue("@odata.nextLink", out nextPageLink);

                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        response.Value.InitializeNextPageRequest(
                            this.OneDriveClient,
                            nextPageLinkString);
                    }
                }
            <#
            if (isSpecialCollection)
            {
                foreach (var property in returnTypeObject.Properties)
                {
                    if (!property.LongDescriptionContains("ignorableCollection"))
                    {
                        var propertyName = property.Name.Substring(property.Name.IndexOf('.') + 1).ToCheckedCase();
            #>

                response.Value.<#=propertyName#> = response.<#=propertyName#>;
            <#
                    }
                }
            }
            #>

                return response.Value;
            }

            return null;
        <#
        }
        else
        {
        #>

            return this.PollForOperationCompletionAsync(progress, cancellationToken);
        <#
        }
        #>

        }
    }
}
