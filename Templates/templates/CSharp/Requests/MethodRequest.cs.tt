<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var method = host.CurrentType.AsOdcmMethod();
var @namespace = method.Namespace.GetNamespaceName();

var queryOptionTypeName = @namespace.GetCoreLibraryType("QueryOption");
var baseRequestTypeName = @namespace.GetCoreLibraryType("BaseRequest");
var iBaseClientTypeName = @namespace.GetCoreLibraryType("IBaseClient");
var optionTypeName = @namespace.GetCoreLibraryType("Option");

var entityName = method.Class.Name.ToCheckedCase();

var isFunction = method.IsFunction;
var isAction = !isFunction;
var isComposable = method.IsComposable;
var isCollection = method.IsCollection;

var methodName = method.Name.Substring(method.Name.IndexOf('.') + 1).ToCheckedCase();
var requestType = entityName + methodName + "Request";

var returnEntityParameter = string.Empty;

// Represents the return of the SendAsync call within a public GetSync() or PostAsync() call.
var sendAsyncReturnType = string.Empty;

// Indicates whether the OData method returns an OData primitive (non-collection).
// Collections of OData primitives is already supported.
var isPrimitiveReturnType = false;

// Represents the return type of a GetAsync() or PostAsync() call.
var returnEntityType = method.ReturnType == null ? null : method.ReturnType.GetTypeString(@namespace);

// Set the SendAsync return type and determine whether we are working with an OData primitive.
if (returnEntityType != null) 
{
    returnEntityParameter = returnEntityType.ToLower();
    if (isCollection)
    {
        sendAsyncReturnType = "I" + entityName + methodName + "CollectionPage";
    }
    else
    {
        // Updates to supported OData primitives need to occur here,
        // IMethodRequest.cs.tt, Microsoft.Graph.Core, and in
        // GetMethodRequestPrimitiveReturnTypeString() in SharedCSharp.
        sendAsyncReturnType = GetMethodRequestPrimitiveReturnTypeString(returnEntityType);

        // These magic strings represent types in M.G.C.
        if (sendAsyncReturnType == "ODataMethodStringResponse" ||
            sendAsyncReturnType == "ODataMethodIntResponse" ||
            sendAsyncReturnType == "ODataMethodBooleanResponse" ||
            sendAsyncReturnType == "ODataMethodLongResponse")
        {
            isPrimitiveReturnType = true;
        }
    }
}
else
{
    sendAsyncReturnType = returnEntityType;
}

// Set the return type of the public GetSync() or PostAsync() call.
var methodReturnType = string.Empty;
if (sendAsyncReturnType == null)
{
    methodReturnType = "System.Threading.Tasks.Task";
}
else
{
    if (isCollection)
    {
        var collectionPage = "I" + entityName + methodName + "CollectionPage";
        methodReturnType = "System.Threading.Tasks.Task<" + collectionPage + ">";
    }
    else
    {   
        var returnParameter = sendAsyncReturnType == "ODataMethodIntResponse" ||
                              sendAsyncReturnType == "ODataMethodBooleanResponse" ||
                              sendAsyncReturnType == "ODataMethodLongResponse" ? returnEntityType + "?"
                              : returnEntityType;
        methodReturnType = "System.Threading.Tasks.Task<" + returnParameter + ">";
    }
}

string methodOverloadReturnType = methodReturnType;

if (isCollection || isPrimitiveReturnType)
{
    methodReturnType = string.Concat("async ", methodReturnType);
}

bool hasParameters = method.Parameters != null && method.Parameters.Any();
bool includeRequestBody = hasParameters && isAction;
bool returnsStream = string.Equals(sendAsyncReturnType, "Stream");

var features = host.CurrentType.GetFeatures();

#>

namespace <#=@namespace#>
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Threading;

    /// <summary>
    /// The type <#=requestType#>.
    /// </summary>
<# if (method.Deprecation != null) { #>
    <#=method.GetDeprecationString()#>
<# } #>
    public partial class <#=requestType#> : <#=baseRequestTypeName#>, I<#=requestType#>
    {
        /// <summary>
        /// Constructs a new <#=requestType#>.
        /// </summary>
        public <#=requestType#>(
            string requestUrl,
            <#=iBaseClientTypeName#> client,
            IEnumerable<<#=optionTypeName#>> options)
            : base(requestUrl, client, options)
        {
<#
    if (includeRequestBody)
    {
#>
            this.ContentType = "application/json";
            this.RequestBody = new <#=requestType#>Body();
<#
    }
#>
        }
<#
    if (includeRequestBody)
    {
#>

        /// <summary>
        /// Gets the request body.
        /// </summary>
        public <#=requestType#>Body RequestBody { get; private set; }
<#
    }
#>
<# 
    if(isAction) // POST
    {
#>

        /// <summary>
        /// Issues the POST request.
        /// </summary>
        public <#=methodOverloadReturnType#> PostAsync()
        {
            return this.PostAsync(CancellationToken.None);
        }

        /// <summary>
        /// Issues the POST request.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
<#
    if (returnsStream)
    {
#>
        /// <param name="httpCompletionOption">The <see cref="HttpCompletionOption"/> for the request.</param>
<#
    }
#>
        /// <returns>The task to await for async call.</returns>
        public <#=methodReturnType#> PostAsync(
<#
    if (returnsStream)
    {
#>
            CancellationToken cancellationToken,
            HttpCompletionOption httpCompletionOption = HttpCompletionOption.ResponseContentRead)
<#
    }
    else
    {
#>
            CancellationToken cancellationToken)
<#
    }
#>
        {
            this.Method = "POST";
<#
    var methodParameter = includeRequestBody ? "this.RequestBody" : "null";

    if (isCollection)
    {
#>
            var response = await this.SendAsync<<#=entityName#><#=methodName#>CollectionResponse>(<#=methodParameter#>, cancellationToken).ConfigureAwait(false);
            if (response != null && response.Value != null && response.Value.CurrentPage != null)
            {
                if (response.AdditionalData != null)
                {
                    response.Value.AdditionalData = response.AdditionalData;

                    object nextPageLink;
                    response.AdditionalData.TryGetValue("@odata.nextLink", out nextPageLink);

                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        response.Value.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                return response.Value;
            }

            return null;
<#
    }
    else if (returnsStream)
    {
#>
            return this.SendStreamRequestAsync(null, cancellationToken, httpCompletionOption);
<#
    }
    else if (!string.IsNullOrEmpty(sendAsyncReturnType))
    {
        if (isPrimitiveReturnType)
        {
#>
            var response = await this.SendAsync<<#=sendAsyncReturnType#>>(<#=methodParameter#>, cancellationToken);
            return response.Value;
<#
        }
        else
        {
#>
            return this.SendAsync<<#=sendAsyncReturnType#>>(<#=methodParameter#>, cancellationToken);
<#
        }
    }
    else
    {
#>
            return this.SendAsync(<#=methodParameter#>, cancellationToken);
<#
    }
#>
        }

<#  } // End POST

#>

<# 
    if(method.IsFunction) // GET for a OData function.
    {
#>
        /// <summary>
        /// Issues the GET request.
        /// </summary>
        public <#=methodOverloadReturnType#> GetAsync()
        {
            return this.GetAsync(CancellationToken.None);
        }

        /// <summary>
        /// Issues the GET request.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
<#
    if (returnsStream)
    {
#>
        /// <param name="httpCompletionOption">The <see cref="HttpCompletionOption"/> for the request.</param>
<#
    }
#>
        /// <returns>The task to await for async call.</returns>
        public <#=methodReturnType#> GetAsync(
<#
    if (returnsStream)
    {
#>
            CancellationToken cancellationToken,
            HttpCompletionOption httpCompletionOption = HttpCompletionOption.ResponseContentRead)
<#
    }
    else
    {
#>
            CancellationToken cancellationToken)
<#
    }
#>
        {
            this.Method = "GET";
<#
   // var methodParameter = includeRequestBody ? "this.RequestBody" : "null";

    if (isCollection)
    {
#>
            var response = await this.SendAsync<<#=entityName#><#=methodName#>CollectionResponse>(null, cancellationToken).ConfigureAwait(false);
            if (response != null && response.Value != null && response.Value.CurrentPage != null)
            {
                if (response.AdditionalData != null)
                {
                    response.Value.AdditionalData = response.AdditionalData;

                    object nextPageLink;
                    response.AdditionalData.TryGetValue("@odata.nextLink", out nextPageLink);

                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        response.Value.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                return response.Value;
            }

            return null;
<#
    }
    else if (returnsStream)
    {
#>
            return this.SendStreamRequestAsync(null, cancellationToken, httpCompletionOption);
<#
    }
    else if (!string.IsNullOrEmpty(sendAsyncReturnType))
    {
        if (isPrimitiveReturnType)
        {
#>
            var response = await this.SendAsync<<#=sendAsyncReturnType#>>(null, cancellationToken);
            return response.Value;
<#
        }
        else
        {
#>
            return this.SendAsync<<#=sendAsyncReturnType#>>(null, cancellationToken);
<#
        }
    }
    else
    {
#>
            return this.SendAsync(null, cancellationToken);
<#
    }
#>
        }
<#  } // End GET
 #>

<# 
    if(method.IsFunction && method.IsComposable) // PATCH for a OData function.
    {
#>

        /// <summary>
        /// Issues the PATCH request.
        /// </summary>
        /// <param name="<#=returnEntityParameter#>">The <#=returnEntityType#> object set with the properties to update.</param>
        /// <returns>The task to await for async call.</returns>
        public <#=methodOverloadReturnType#> PatchAsync(<#=returnEntityType#> <#=returnEntityParameter.GetSanitizedParameterName()#>)
        {
            return this.PatchAsync(<#=returnEntityParameter.GetSanitizedParameterName()#>, CancellationToken.None);
        }

        /// <summary>
        /// Issues the PATCH request.
        /// </summary>
        /// <param name="<#=returnEntityParameter#>">The <#=returnEntityType#> object set with the properties to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
<#
    if (returnsStream)
    {
#>
        /// <param name="httpCompletionOption">The <see cref="HttpCompletionOption"/> for the request.</param>
<#
    }
#>
        /// <returns>The task to await for async call.</returns>
        public <#=methodReturnType#> PatchAsync(<#=returnEntityType#> <#=returnEntityParameter.GetSanitizedParameterName()#>, 
<#
    if (returnsStream)
    {
#>
            CancellationToken cancellationToken,
            HttpCompletionOption httpCompletionOption = HttpCompletionOption.ResponseContentRead)
<#
    }
    else
    {
#>
            CancellationToken cancellationToken)
<#
    }
#>
        {
            this.Method = "PATCH";
<#
    var methodParameter = includeRequestBody ? "this.RequestBody" : "null";

    if (isCollection)
    {
#>
            var response = await this.SendAsync<<#=entityName#><#=methodName#>CollectionResponse>(<#=returnEntityParameter.GetSanitizedParameterName()#>, cancellationToken).ConfigureAwait(false);
            if (response != null && response.Value != null && response.Value.CurrentPage != null)
            {
                if (response.AdditionalData != null)
                {
                    response.Value.AdditionalData = response.AdditionalData;

                    object nextPageLink;
                    response.AdditionalData.TryGetValue("@odata.nextLink", out nextPageLink);

                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        response.Value.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                return response.Value;
            }

            return null;
<#
    }
    else if (returnsStream)
    {
#>
            return this.SendStreamRequestAsync(null, cancellationToken, httpCompletionOption);
<#
    }
    else if (!string.IsNullOrEmpty(sendAsyncReturnType))
    {
#>
            return this.SendAsync<<#=sendAsyncReturnType#>>(<#=returnEntityParameter.GetSanitizedParameterName()#>, cancellationToken);
<#
    }
    else
    {
#>
            return this.SendAsync(<#=returnEntityParameter.GetSanitizedParameterName()#>, cancellationToken);
<#
    }
#>
        }        
<#  } // End PATCH for a OData function.
#>
<# 
    if(method.IsFunction && method.IsComposable) // PUT for a OData function.
    {
#>

        /// <summary>
        /// Issues the PUT request.
        /// </summary>
        /// <param name="<#=returnEntityParameter#>">The <#=returnEntityType#> object to update.</param>
        /// <returns>The task to await for async call.</returns>
        public <#=methodOverloadReturnType#> PutAsync(<#=returnEntityType#> <#=returnEntityParameter.GetSanitizedParameterName()#>)
        {
            return this.PutAsync(<#=returnEntityParameter.GetSanitizedParameterName()#>, CancellationToken.None);
        }

        /// <summary>
        /// Issues the PUT request.
        /// </summary>
        /// <param name="<#=returnEntityParameter#>">The <#=returnEntityType#> object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
<#
    if (returnsStream)
    {
#>
        /// <param name="httpCompletionOption">The <see cref="HttpCompletionOption"/> for the request.</param>
<#
    }
#>
        /// <returns>The task to await for async call.</returns>
        public <#=methodReturnType#> PutAsync(<#=returnEntityType#> <#=returnEntityParameter.GetSanitizedParameterName()#>, 
<#
    if (returnsStream)
    {
#>
            CancellationToken cancellationToken,
            HttpCompletionOption httpCompletionOption = HttpCompletionOption.ResponseContentRead)
<#
    }
    else
    {
#>
            CancellationToken cancellationToken)
<#
    }
#>
        {
            this.Method = "PUT";
<#
    var methodParameter = includeRequestBody ? "this.RequestBody" : "null";

    if (isCollection)
    {
#>
            var response = await this.SendAsync<<#=entityName#><#=methodName#>CollectionResponse>(<#=returnEntityParameter.GetSanitizedParameterName()#>, cancellationToken).ConfigureAwait(false);
            if (response != null && response.Value != null && response.Value.CurrentPage != null)
            {
                if (response.AdditionalData != null)
                {
                    response.Value.AdditionalData = response.AdditionalData;

                    object nextPageLink;
                    response.AdditionalData.TryGetValue("@odata.nextLink", out nextPageLink);

                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        response.Value.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                return response.Value;
            }

            return null;
<#
    }
    else if (returnsStream)
    {
#>
            return this.SendStreamRequestAsync(null, cancellationToken, httpCompletionOption);
<#
    }
    else if (!string.IsNullOrEmpty(sendAsyncReturnType))
    {
#>
            return this.SendAsync<<#=sendAsyncReturnType#>>(<#=returnEntityParameter.GetSanitizedParameterName()#>, cancellationToken);
<#
    }
    else
    {
#>
            return this.SendAsync(<#=returnEntityParameter.GetSanitizedParameterName()#>, cancellationToken);
<#
    }
#>
        }        
<#  } // End PUT for a OData function.
#>
<#
    if (!returnsStream)
    {
        if (features.CanExpand)
        {
#>

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> Expand(string value)
        {
            this.QueryOptions.Add(new <#=queryOptionTypeName#>("$expand", value));
            return this;
        }
<#
        }

        if (features.CanSelect)
        {
#>

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> Select(string value)
        {
            this.QueryOptions.Add(new <#=queryOptionTypeName#>("$select", value));
            return this;
        }
<#
        }

        if (isCollection)
        {
            if (features.CanUseTop)
            {
#>

        /// <summary>
        /// Adds the specified top value to the request.
        /// </summary>
        /// <param name="value">The top value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> Top(int value)
        {
            this.QueryOptions.Add(new <#=queryOptionTypeName#>("$top", value.ToString()));
            return this;
        }
<#
            }

            if (features.CanFilter)
            {
#>

        /// <summary>
        /// Adds the specified filter value to the request.
        /// </summary>
        /// <param name="value">The filter value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> Filter(string value)
        {
            this.QueryOptions.Add(new <#=queryOptionTypeName#>("$filter", value));
            return this;
        }
<#
            }

            if (features.CanSkip)
            {
#>

        /// <summary>
        /// Adds the specified skip value to the request.
        /// </summary>
        /// <param name="value">The skip value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> Skip(int value)
        {
            this.QueryOptions.Add(new <#=queryOptionTypeName#>("$skip", value.ToString()));
            return this;
        }
<#
            }

            if (features.CanSort)
            {
#>

        /// <summary>
        /// Adds the specified orderby value to the request.
        /// </summary>
        /// <param name="value">The orderby value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> OrderBy(string value)
        {
            this.QueryOptions.Add(new <#=queryOptionTypeName#>("$orderby", value));
            return this;
        }
<#
            }
        }
    }
#>
    }
}
