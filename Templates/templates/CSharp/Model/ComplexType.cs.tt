<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

OdcmClass complex = host.CurrentType.AsOdcmClass();
var complexTypeName = complex.Name.ToCheckedCase();

var @namespace = complex.Namespace.GetNamespaceName();
var derivedTypeConverterTypeName = @namespace.GetCoreLibraryType("DerivedTypeConverter");

var typeDeclaration = complexTypeName;

// In the case a complex type name ends with "Request", we will have a collision with the *Request objects
// when we generate. For example, there is a complex type named SearchRequest and an entity named Search.
// The SearchRequest complex type results in a SearchResult class in our models collection. The Search entity
// results in a SearchRequest request object causing conflicts.

if (typeDeclaration.EndsWith("Request"))
{
    typeDeclaration = String.Concat(typeDeclaration, "Object");
}

// Capture the cstor type declaration as the typedeclaration may get appended with a base type. 
string cstorTypeDeclaration = typeDeclaration;

if (complex.Base != null)
{
    // Disambiguate the base type declaration for the same reason we did this 
	// for typeDeclaration.
	var baseTypeDeclaration = complex.Base.GetTypeString(complex.Namespace.GetNamespaceName());

    if (baseTypeDeclaration.EndsWith("Request"))
    {
        baseTypeDeclaration = String.Concat(baseTypeDeclaration, "Object");
    }

    typeDeclaration = string.Format("{0} : {1}", typeDeclaration, baseTypeDeclaration);
}

var isMethodResponse = complex.LongDescriptionContains("methodResponse");
var classType = complex.IsAbstract ? "abstract partial class" : "partial class";

var attributeStringBuilder = new StringBuilder();

if (complex.Deprecation != null)
{
   attributeStringBuilder.Append(complex.GetDeprecationString());
   attributeStringBuilder.Append(Environment.NewLine);
   attributeStringBuilder.Append("    ");
}

attributeStringBuilder.Append("[JsonObject(MemberSerialization = MemberSerialization.OptIn)]");

// We only want to add the derived type converter to the class at the top of the inheritance hierarchy
if (complex.Derived != null && complex.Base == null)
{
    attributeStringBuilder.Append(Environment.NewLine);
    attributeStringBuilder.Append("    ");
    attributeStringBuilder.AppendFormat("[JsonConverter(typeof({0}))]", derivedTypeConverterTypeName);
}

#>

namespace <#=@namespace#>
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type <#=complexTypeName#>.
    /// </summary>
    <#=attributeStringBuilder.ToString()#>
    public <#=classType#> <#=typeDeclaration#>
    {
<#
// Generate a constructor to initialize the @odata.type property when this type is not abstract.
if (!complex.IsAbstract)
{
#>        /// <summary>
        /// Initializes a new instance of the <see cref="<#=cstorTypeDeclaration#>"/> class.
        /// </summary>
        public <#=cstorTypeDeclaration#>()
        {
            this.ODataType = "<#=complex.FullName#>";
        }
<#
}
        foreach(var property in complex.Properties)
        {

            var propertyTypeString = property.GetTypeString(complex.Namespace.GetNamespaceName());
            var propertyType = property.IsCollection ? string.Format("IEnumerable<{0}>", propertyTypeString) : propertyTypeString;
            var propertyName = isMethodResponse
                ? property.Name.Substring(property.Name.IndexOf('.') + 1).ToCheckedCase()
                : property.Name.ToCheckedCase().GetSanitizedPropertyName(property);

            var attributeDefinition = string.Format("[JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = \"{0}\", Required = Newtonsoft.Json.Required.Default)]", property.Name);

            if (property.Deprecation != null)
            {
                attributeDefinition = property.GetDeprecationString() + Environment.NewLine + "        " + attributeDefinition;
            }

            if (property.IsTypeNullable() || property.IsCollection)
            {
    #>

        /// <summary>
        /// Gets or sets <#=property.Name#>.
<# if (property.LongDescription != null || property.Description != null) {
#>
        /// <#=property.GetSanitizedLongDescription()#>
<# } #>
        /// </summary>
        <#=attributeDefinition#>
        public <#=propertyType#> <#=propertyName#> { get; set; }
    <#
        }
        else
        {
    #>

        /// <summary>
        /// Gets or sets <#=property.Name#>.
<# if (property.LongDescription != null || property.Description != null) {
#>
        /// <#=property.GetSanitizedLongDescription()#>
<# } #>
        /// </summary>
        <#=attributeDefinition#>
        public <#=propertyType#>? <#=propertyName#> { get; set; }
    <#
            }
        }

    // Only include AdditionalData in the base classes.
    // Adding odata.type to all complex types with no base class. 
    if (complex.Base == null)
    {
    #>

        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    <#
    }
    #>

    }
}
