<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

OdcmClass entity = host.CurrentType.AsOdcmClass();
var entityName = entity.Name.ToCheckedCase();

var @namespace = entity.Namespace.GetNamespaceName();
var derivedTypeConverterTypeName = @namespace.GetCoreLibraryType("DerivedTypeConverter");

var typeDeclaration = entityName;


// In the case a entity type name ends with "Request", we will have a collision with the Request objects
// when we generate. For example, there are entities named EventMessage and EventMessageRequest. Those entities
// lead to the generation of an EventMessageRequest and EventMessageRequestRequest request objects in the same
// namespace as the entities. We add 'Object' to the end of the name to disambiguate the entity.
// This change needs to sync with changes for the *Request templates.

if (typeDeclaration.EndsWith("Request"))
{
    typeDeclaration = String.Concat(typeDeclaration, "Object");
}

string cstorTypeDeclaration = typeDeclaration;

if (entity.Base != null)
{
    var baseTypeDeclaration = entity.Base.GetTypeString(entity.Namespace.GetNamespaceName());

    if (baseTypeDeclaration.EndsWith("Request"))
    {
        baseTypeDeclaration = String.Concat(baseTypeDeclaration, "Object");
    }

    typeDeclaration = string.Format("{0} : {1}", typeDeclaration, baseTypeDeclaration);
}

var attributeStringBuilder = new StringBuilder();

if (entity.Deprecation != null)
{
   attributeStringBuilder.Append(entity.GetDeprecationString());
   attributeStringBuilder.Append(Environment.NewLine);
   attributeStringBuilder.Append("    ");
}

attributeStringBuilder.Append("[JsonObject(MemberSerialization = MemberSerialization.OptIn)]");

// We only want to add the derived type converter to the classes at the top of the inheritance hierarchy
if (entity.Derived != null && entity.Base == null)
{
    attributeStringBuilder.Append(Environment.NewLine);
    attributeStringBuilder.Append("    ");
    attributeStringBuilder.AppendFormat("[JsonConverter(typeof({0}))]", derivedTypeConverterTypeName);
}

#>

namespace <#=@namespace#>
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type <#=entityName.SplitCamelCase()#>.
    /// </summary>
    <#=attributeStringBuilder.ToString()#>
    public partial class <#=typeDeclaration#>
    {
    <#
        if (entity.IsAbstract)
        {
    #>

		///<summary>
		/// The internal <#=entityName#> constructor
		///</summary>
        protected internal <#=cstorTypeDeclaration#>()
        {
            // Don't allow initialization of abstract entity types
        }
    <#
        }
		else
		{
	#>

		///<summary>
		/// The <#=entityName#> constructor
		///</summary>
        public <#=cstorTypeDeclaration#>()
        {
            this.ODataType = "<#=entity.FullName#>";
        }
	<#
		}
        foreach(var property in entity.Properties)
        {
            var propertyTypeString = property.GetTypeString(entity.Namespace.GetNamespaceName());
            var propertyType = property.IsTypeNullable() || property.IsCollection()
                    ? propertyTypeString
                    : propertyTypeString + "?";

            // We want to disambiguate structural property return types in case there is a naming 
            // collision with a request builder, like what we had for the Search entity, and the SearchRequest
            // complex type.
            if (propertyType.EndsWith("Request") && property.IsNavigation() == false)
            {
                propertyType = String.Concat(propertyType, "Object");
            }

            var propertyName = property.Name.ToCheckedCase();
            var propertyCollectionPage = property.IsReference() ? string.Concat(entityName, propertyName, "CollectionWithReferencesPage") : string.Concat(entityName, propertyName, "CollectionPage");

            var attributeDefinition = string.Format("[JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = \"{0}\", Required = Newtonsoft.Json.Required.Default)]", property.Name);

            if (property.Deprecation != null)
            {
                attributeDefinition = property.GetDeprecationString() + Environment.NewLine + "        " + attributeDefinition;
            }

            if (property.IsCollection())
            {
                if (property.IsNavigation())
                {
    #>

        /// <summary>
        /// Gets or sets <#=property.Name.SplitCamelCase().ToLower()#>.
<# if (property.LongDescription != null || property.Description != null) {
#>
        /// <#=property.GetSanitizedLongDescription()#>
<# } #>
        /// </summary>
        <#=attributeDefinition#>
        public I<#=propertyCollectionPage#> <#=propertyName.GetSanitizedPropertyName()#> { get; set; }
    <#
                }
                else
                {
    #>

        /// <summary>
        /// Gets or sets <#=property.Name.SplitCamelCase().ToLower()#>.
<# if (property.LongDescription != null || property.Description != null) {
#>
        /// <#=property.GetSanitizedLongDescription()#>
<# } #>
        /// </summary>
        <#=attributeDefinition#>
        public IEnumerable<<#=propertyType#>> <#=propertyName.GetSanitizedPropertyName()#> { get; set; }
    <#
                }
            }
            else
            {
    #>

        /// <summary>
        /// Gets or sets <#=property.Name.SplitCamelCase().ToLower()#>.
<# if (property.LongDescription != null || property.Description != null) {
#>
        /// <#=property.GetSanitizedLongDescription()#>
<# } #>
        /// </summary>
        <#=attributeDefinition#>
        public <#=propertyType#> <#=propertyName.GetSanitizedPropertyName(property)#> { get; set; }
    <#
            }
        }

    // Only include @odata.type and AdditionalData in the base classes.
    if (entity.Base == null)
    {
    #>

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }

        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true, WriteData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }
    <#
    }
    #>

    }
}

