<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>

<#
var enumT = host.CurrentType.AsOdcmEnum();
var enumName = enumT.Name.ToCheckedCase();
var @namespace = enumT.Namespace.GetNamespaceName();

var enumConverterTypeName = @namespace.GetCoreLibraryType("EnumConverter");
#>

namespace <#=enumT.Namespace.GetNamespaceName()#>
{
    using System;
    using Newtonsoft.Json;

    /// <summary>
    /// The enum <#=enumName#>.
    /// </summary>
<# if (enumT.Deprecation != null) { #>
    <#=enumT.GetDeprecationString()#>
<# } #>
    [JsonConverter(typeof(<#=enumConverterTypeName#>))]
<#  if (enumT.IsFlags == true)
    {
#>
	[System.Flags]
<#
		}
#>
    public enum <#=enumName#>
    {
    <#
        foreach(var emumMember in enumT.Members)
        {
    #>

        /// <summary>
        /// <#=emumMember.Name.ToUpperFirstChar().SplitCamelCase()#>
        /// </summary>
<# if (emumMember.Deprecation != null) { #>
        <#=emumMember.GetDeprecationString()#>
<# } #>
        <#=emumMember.Name.ToCheckedCase().GetSanitizedPropertyName()#> = <#=emumMember.Value#>,
	<#
		}
    #>

    }
}
