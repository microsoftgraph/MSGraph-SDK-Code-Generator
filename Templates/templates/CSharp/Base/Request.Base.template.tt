<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#+

public string GetClassDefinition(string className, string @namespace)
{
    var baseRequestTypeName = @namespace.GetCoreLibraryType("BaseRequest");
    var stringBuilder = new StringBuilder();

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("    /// The type {0}.", className);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("    /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("    public partial class {0} : {1}, I{0}", className, baseRequestTypeName);

    return stringBuilder.ToString();
}

public string GetConstructor(string instanceTypeName, string @namespace)
{
    var iBaseClientTypeName = @namespace.GetCoreLibraryType("IBaseClient");
    var optionTypeName = @namespace.GetCoreLibraryType("Option");

    var stringBuilder = new StringBuilder();

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Constructs a new {0}.", instanceTypeName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(
@"        /// </summary>
        /// <param name=""requestUrl"">The URL for the built request.</param>
        /// <param name=""client"">The <see cref=""");
    stringBuilder.Append(iBaseClientTypeName);
    stringBuilder.Append(@"""/> for handling requests.</param>
        /// <param name=""options"">Query and header option name value pairs for the request.</param>");

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public {0}(", instanceTypeName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(
@"            string requestUrl,
            ");
    stringBuilder.Append(iBaseClientTypeName);
    stringBuilder.Append(@" client,
            IEnumerable<");
    stringBuilder.Append(optionTypeName);
    stringBuilder.Append(@"> options)
            : base(requestUrl, client, options)
        {
        }");

    return stringBuilder.ToString();
}

#>
