<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="RequestBuilder.Base.template.tt"#>
<#+

// -------------------------------------------------------------
// Methods for standard entity collection classes
// -------------------------------------------------------------
public string GetCollectionClassDefinition(OdcmProperty odcmProperty)
{
    return this.GetClassDefinition(this.GetPropertyCollectionRequestBuilderName(odcmProperty), odcmProperty.GetClassNamespace());
}

public string GetCollectionRequestBuilderConstructor(OdcmProperty odcmProperty)
{
    return this.GetConstructor(this.GetPropertyCollectionRequestBuilderName(odcmProperty), odcmProperty.GetClassNamespace());
}

public string GetCollectionRequestMethod(OdcmProperty odcmProperty)
{
    return this.GetRequestMethod(this.GetPropertyCollectionRequestName(odcmProperty));
}

public string GetCollectionRequestMethodWithOptions(OdcmProperty odcmProperty)
{
    return this.GetRequestMethodWithOptions(this.GetPropertyCollectionRequestName(odcmProperty), odcmProperty.GetClassNamespace());
}


// -------------------------------------------------------------
// Methods for the reference of an entity collection
// -------------------------------------------------------------
public string GetCollectionReferencesClassDefinition(OdcmProperty odcmProperty)
{
    return this.GetClassDefinition(this.GetPropertyCollectionReferencesRequestBuilderName(odcmProperty), odcmProperty.GetClassNamespace());
}

public string GetCollectionReferencesRequestBuilderConstructor(OdcmProperty odcmProperty)
{
    return this.GetConstructor(this.GetPropertyCollectionReferencesRequestBuilderName(odcmProperty), odcmProperty.GetClassNamespace());
}

public string GetCollectionReferencesRequestMethod(OdcmProperty odcmProperty)
{
    return this.GetRequestMethod(this.GetPropertyCollectionReferencesRequestName(odcmProperty));
}

public string GetCollectionReferencesRequestMethodWithOptions(OdcmProperty odcmProperty)
{
    return this.GetRequestMethodWithOptions(this.GetPropertyCollectionReferencesRequestName(odcmProperty), odcmProperty.GetClassNamespace());
}


// -------------------------------------------------------------
// Methods for entity collection classes that support $ref addressing
// -------------------------------------------------------------
public string GetCollectionWithReferencesClassDefinition(OdcmProperty odcmProperty)
{
    return this.GetClassDefinition(this.GetPropertyCollectionWithReferencesRequestBuilderName(odcmProperty), odcmProperty.GetClassNamespace());
}

public string GetCollectionWithReferencesRequestBuilderConstructor(OdcmProperty odcmProperty)
{
    return this.GetConstructor(this.GetPropertyCollectionWithReferencesRequestBuilderName(odcmProperty), odcmProperty.GetClassNamespace());
}

public string GetCollectionWithReferencesRequestMethod(OdcmProperty odcmProperty)
{
    return this.GetRequestMethod(this.GetPropertyCollectionWithReferencesRequestName(odcmProperty));
}

public string GetCollectionWithReferencesRequestMethodWithOptions(OdcmProperty odcmProperty)
{
    return this.GetRequestMethodWithOptions(this.GetPropertyCollectionWithReferencesRequestName(odcmProperty), odcmProperty.GetClassNamespace());
}

// Creates the request builder property definition for the $ref navigation on the collection
public string GetCollectionReferencesRequestBuilder(OdcmProperty odcmProperty)
{
    var propertyClass = odcmProperty.Class.AsOdcmClass();
    if (propertyClass.Kind != OdcmClassKind.Service && odcmProperty.IsNavigation() && !odcmProperty.ContainsTarget)
    {
        var stringBuilder = new StringBuilder();
        var entityReferencesRequestBuilder = this.GetPropertyCollectionReferencesRequestBuilderName(odcmProperty);

        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        /// <summary>");
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("        /// Gets an <see cref=\"I{0}\"/> for the references in the collection.", entityReferencesRequestBuilder);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        /// </summary>");
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("        /// <returns>The <see cref=\"I{0}\"/>.</returns>", entityReferencesRequestBuilder);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("        public I{0} References", entityReferencesRequestBuilder);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append(
@"        {
            get
            {
");

        stringBuilder.AppendFormat("                return new {0}(this.AppendSegmentToRequestUrl(\"$ref\"), this.Client);", entityReferencesRequestBuilder);
        stringBuilder.Append(@"
            }
        }
");

        return stringBuilder.ToString();
    }

    return string.Empty;
}


// -------------------------------------------------------------
// Indexer properties
// -------------------------------------------------------------
// Creates the indexer property definition for a standard navigation collection
public string GetCollectionIndexRequestBuilder(OdcmProperty odcmProperty)
{
    // In case there is an action or function with the name of item. This is to avoid CS0102
    // https://msdn.microsoft.com/en-US/library/26f2y168%28v=VS.90%29.aspx
    var allMethods = new List<OdcmMethod>();
    foreach (var method in odcmProperty.Projection.Type.AsOdcmClass().Methods)
    {
        allMethods.Add(method);
        allMethods.AddRange(method.Overloads);
    }
    var renameItem = "";
    if (allMethods.Exists(x => x.Name.ToLower().Equals("item")))
    {
            renameItem = "\n        [System.Runtime.CompilerServices.IndexerName(\"ThisItem\")]";        
    }

    var stringBuilder = new StringBuilder();
    var propTypeName = string.Concat(this.GetEntityNameString(odcmProperty.Class), this.GetPropertyTypeName(odcmProperty));
    var entityRequestBuilder = this.GetPropertyTypeRequestBuilderName(odcmProperty);

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Gets an <see cref=\"{0}\"/> for the specified {1}.", entityRequestBuilder.ClassToInterface(), propTypeName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <param name=\"id\">The ID for the {0}.</param>", propTypeName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <returns>The <see cref=\"{0}\"/>.</returns>", entityRequestBuilder.ClassToInterface());
    stringBuilder.Append(renameItem);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public {0} this[string id]", entityRequestBuilder.ClassToInterface());
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(
@"        {
            get
            {
");

    stringBuilder.AppendFormat("                return new {0}(this.AppendSegmentToRequestUrl(id), this.Client);", entityRequestBuilder);
    stringBuilder.Append(@"
            }
        }");

    return stringBuilder.ToString();
}

// Creates the indexer property definition for a collection that supports $ref
public string GetCollectionWithReferencesIndexRequestBuilder(OdcmProperty odcmProperty)
{
    var stringBuilder = new StringBuilder();

    var propTypeName = string.Concat(this.GetEntityNameString(odcmProperty.Class), this.GetPropertyTypeName(odcmProperty));
    var entityRequestBuilder = this.GetPropertyTypeWithReferenceRequestBuilderName(odcmProperty);

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Gets an <see cref=\"{0}\"/> for the specified {1}.", entityRequestBuilder.ClassToInterface(), propTypeName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <param name=\"id\">The ID for the {0}.</param>", propTypeName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <returns>The <see cref=\"{0}\"/>.</returns>", entityRequestBuilder.ClassToInterface());
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public {0} this[string id]", entityRequestBuilder.ClassToInterface());
    stringBuilder.Append(@"
        {
            get
            {
");

        stringBuilder.AppendFormat("                return new {0}(this.AppendSegmentToRequestUrl(id), this.Client);", entityRequestBuilder);
        stringBuilder.Append(@"
            }
        }
");

    return stringBuilder.ToString();
}

#>
