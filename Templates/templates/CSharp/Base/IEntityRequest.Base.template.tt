<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="IRequest.Base.template.tt"#>
<#+

// -------------------------------------------------------------
// Methods for entity reference requests
// -------------------------------------------------------------
public string GetEntityReferenceRequestInterfaceDefinition(OdcmClass odcmClass)
{
    return this.GetInterfaceDefinition(this.GetEntityReferenceRequestName(odcmClass), odcmClass.GetNamespaceName());
}

public string GetEntityWithReferenceRequestInterfaceDefinition(OdcmClass odcmClass)
{
    return this.GetInterfaceDefinition(this.GetEntityWithReferenceRequestName(odcmClass), odcmClass.GetNamespaceName());
}

public string GetEntityReferenceDeleteAsyncMethod(OdcmClass odcmClass)
{
    return this.GetDeleteAsyncMethod(string.Concat(this.GetEntityNameString(odcmClass), " reference"));
}

public string GetEntityReferencePutAsyncMethod(OdcmClass odcmClass)
{
    return this.GetPutAsyncMethod(string.Concat(this.GetEntityNameString(odcmClass), " reference"));
}

// -------------------------------------------------------------
// Methods for standard entity requests
// -------------------------------------------------------------
public string GetEntityRequestInterfaceDefinition(OdcmClass odcmClass)
{
    return this.GetInterfaceDefinition(this.GetEntityRequestName(odcmClass), odcmClass.GetNamespaceName());
}


// -------------------------------------------------------------
// Build CRUD methods
// -------------------------------------------------------------
public void AppendEntityCreateAsyncMethodHeader(string entityName, string lowerCaseEntityName, StringBuilder stringBuilder, bool includeSendParams)
{
	// Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
	if (entityName.EndsWith("Request"))
	{
		entityName = String.Concat(entityName, "Object");
	}

    if (includeSendParams)
    {
        stringBuilder.Append("        ");
    }

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Creates the specified {0} using POST.", entityName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <param name=\"{0}ToCreate\">The {1} to create.</param>", lowerCaseEntityName, entityName);

    if (includeSendParams)
    {
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        /// <param name=\"cancellationToken\">The <see cref=\"CancellationToken\"/> for the request.</param>");
    }

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <returns>The created {0}.</returns>", entityName);
}

public string GetEntityCreateAsyncMethod(OdcmClass odcmClass)
{
    var stringBuilder = new StringBuilder();

    var entityName = this.GetEntityNameString(odcmClass);

	// Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
	if (entityName.EndsWith("Request"))
	{
		entityName = String.Concat(entityName, "Object");
	}

    var lowerCaseEntityName = entityName.ToLowerFirstChar();

    this.AppendEntityCreateAsyncMethodHeader(entityName, lowerCaseEntityName, stringBuilder, false);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        System.Threading.Tasks.Task<{0}> CreateAsync({0} {1}ToCreate);", entityName, lowerCaseEntityName);

    this.AppendEntityCreateAsyncMethodHeader(entityName, lowerCaseEntityName, stringBuilder, true);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        System.Threading.Tasks.Task<{0}> CreateAsync({0} {1}ToCreate, CancellationToken cancellationToken);", entityName, lowerCaseEntityName);

    return stringBuilder.ToString();
}

public void AppendDeleteAsyncMethodHeader(string deleteTargetString, StringBuilder stringBuilder, bool includeSendParams)
{
	// Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
	if (deleteTargetString.EndsWith("Request"))
	{
		deleteTargetString = String.Concat(deleteTargetString, "Object");
	}

    if (includeSendParams)
    {
        stringBuilder.Append("        ");
    }

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Deletes the specified {0}.", deleteTargetString);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");

    if (includeSendParams)
    {
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        /// <param name=\"cancellationToken\">The <see cref=\"CancellationToken\"/> for the request.</param>");
    }

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// <returns>The task to await.</returns>");
}

public string GetDeleteAsyncMethod(string deleteTargetString)
{
	// Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
	if (deleteTargetString.EndsWith("Request"))
	{
		deleteTargetString = String.Concat(deleteTargetString, "Object");
	}

    var stringBuilder = new StringBuilder();

    this.AppendDeleteAsyncMethodHeader(deleteTargetString, stringBuilder, false);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        System.Threading.Tasks.Task DeleteAsync();");

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(Environment.NewLine);

    this.AppendDeleteAsyncMethodHeader(deleteTargetString, stringBuilder, true);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken);");

    return stringBuilder.ToString();
}

public void AppendPutAsyncMethodHeader(string putTargetString, StringBuilder stringBuilder, bool includeSendParams)
{
    if (includeSendParams)
    {
        stringBuilder.Append("        ");
    }

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Puts the specified {0}.", putTargetString);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
	stringBuilder.Append(Environment.NewLine);
	stringBuilder.AppendFormat("        /// <param name=\"id\">The {0} reference to update.</param>", putTargetString);
    if (includeSendParams)
    {
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        /// <param name=\"cancellationToken\">The <see cref=\"CancellationToken\"/> for the request.</param>");
    }

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// <returns>The task to await.</returns>");
}

public string GetPutAsyncMethod(string putTargetString)
{
    var stringBuilder = new StringBuilder();

    this.AppendPutAsyncMethodHeader(putTargetString, stringBuilder, false);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        System.Threading.Tasks.Task PutAsync(string id);");

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(Environment.NewLine);

    this.AppendPutAsyncMethodHeader(putTargetString, stringBuilder, true);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        System.Threading.Tasks.Task PutAsync(string id, CancellationToken cancellationToken);");

    return stringBuilder.ToString();
}

public string GetEntityDeleteAsyncMethod(OdcmClass odcmClass)
{
    return this.GetDeleteAsyncMethod(this.GetEntityNameString(odcmClass));
}

public void AppendGetAsyncMethodHeader(string entityName, StringBuilder stringBuilder, bool includeSendParams)
{
	// Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
	if (entityName.EndsWith("Request"))
	{
		entityName = String.Concat(entityName, "Object");
	}

    if (includeSendParams)
    {
        stringBuilder.Append("        ");
    }

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Gets the specified {0}.", entityName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");

    if (includeSendParams)
    {
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        /// <param name=\"cancellationToken\">The <see cref=\"CancellationToken\"/> for the request.</param>");
    }

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <returns>The {0}.</returns>", entityName);
}

public string GetEntityGetAsyncMethod(OdcmClass odcmClass)
{
    var stringBuilder = new StringBuilder();

    var entityName = this.GetEntityNameString(odcmClass);

	// Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
	if (entityName.EndsWith("Request"))
	{
		entityName = String.Concat(entityName, "Object");
	}

    this.AppendGetAsyncMethodHeader(entityName, stringBuilder, false);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        System.Threading.Tasks.Task<{0}> GetAsync();", entityName);

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(Environment.NewLine);

    this.AppendGetAsyncMethodHeader(entityName, stringBuilder, true);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        System.Threading.Tasks.Task<{0}> GetAsync(CancellationToken cancellationToken);", entityName);

    return stringBuilder.ToString();
}

public void AppendUpdateAsyncMethodHeader(string entityName, string lowerCaseEntityName, string @namespace, StringBuilder stringBuilder, bool includeSendParams)
{
    var clientExceptionTypeName = @namespace.GetCoreLibraryType("ClientException");
	// Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
	if (entityName.EndsWith("Request"))
	{
		entityName = String.Concat(entityName, "Object");
	}

    if (includeSendParams)
    {
        stringBuilder.Append("        ");
    }

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Updates the specified {0} using PATCH.", entityName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <param name=\"{0}ToUpdate\">The {1} to update.</param>", lowerCaseEntityName, entityName);

    if (includeSendParams)
    {
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        /// <param name=\"cancellationToken\">The <see cref=\"CancellationToken\"/> for the request.</param>");
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("        /// <exception cref=\"{0}\">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>", clientExceptionTypeName);
    }

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <returns>The updated {0}.</returns>", entityName);
}

public string GetEntityUpdateAsyncMethod(OdcmClass odcmClass)
{
    var stringBuilder = new StringBuilder();

    var entityName = this.GetEntityNameString(odcmClass);

	// Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
	if (entityName.EndsWith("Request"))
	{
		entityName = String.Concat(entityName, "Object");
	}

    var lowerCaseEntityName = entityName.ToLowerFirstChar();

    this.AppendUpdateAsyncMethodHeader(entityName, lowerCaseEntityName, odcmClass.GetNamespaceName(), stringBuilder, false);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        System.Threading.Tasks.Task<{0}> UpdateAsync({0} {1}ToUpdate);", entityName, lowerCaseEntityName);

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(Environment.NewLine);

    this.AppendUpdateAsyncMethodHeader(entityName, lowerCaseEntityName, odcmClass.GetNamespaceName(), stringBuilder, true);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        System.Threading.Tasks.Task<{0}> UpdateAsync({0} {1}ToUpdate, CancellationToken cancellationToken);", entityName, lowerCaseEntityName);

    return stringBuilder.ToString();
}


// -------------------------------------------------------------
// Build select and expand methods
// -------------------------------------------------------------

public string GetExpandExpressionMethod(string requestType, string underlyingType)
{

	// Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
	if (underlyingType.EndsWith("Request"))
	{
		underlyingType = String.Concat(underlyingType, "Object");
	}

    var stringBuilder = new StringBuilder();

    stringBuilder.Append(
      @"/// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name=""expandExpression"">The expression from which to calculate the expand value.</param>
        /// <returns>The request object to send.</returns>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        I{0} Expand(Expression<Func<{1}, object>> expandExpression);", requestType, underlyingType);

    return stringBuilder.ToString();
}

public string GetExpandMethod(string entityRequest)
{
    var stringBuilder = new StringBuilder();

    stringBuilder.Append(
      @"/// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name=""value"">The expand value.</param>
        /// <returns>The request object to send.</returns>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        I{0} Expand(string value);", entityRequest);

    return stringBuilder.ToString();
}

public string GetSelectExpressionMethod(string requestType, string underlyingType)
{

	// Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
	if (underlyingType.EndsWith("Request"))
	{
		underlyingType = String.Concat(underlyingType, "Object");
	}

    var stringBuilder = new StringBuilder();

    stringBuilder.Append(
      @"/// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name=""selectExpression"">The expression from which to calculate the select value.</param>
        /// <returns>The request object to send.</returns>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        I{0} Select(Expression<Func<{1}, object>> selectExpression);", requestType, underlyingType);

    return stringBuilder.ToString();
}

public string GetSelectMethod(string entityRequest)
{
    var stringBuilder = new StringBuilder();

    stringBuilder.Append(
      @"/// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name=""value"">The select value.</param>
        /// <returns>The request object to send.</returns>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        I{0} Select(string value);", entityRequest);

    return stringBuilder.ToString();
}

// Standard entity
public string GetEntityExpandMethods(OdcmClass odcmClass)
{
    string entityName = this.GetEntityNameString(odcmClass);
    return this.GetExpandMethod(this.GetRequestString(entityName)) +
    Environment.NewLine + Environment.NewLine + "        " +
    this.GetExpandExpressionMethod(this.GetRequestString(entityName), entityName);
}

public string GetEntitySelectMethods(OdcmClass odcmClass)
{
    string entityName = this.GetEntityNameString(odcmClass);
    return this.GetSelectMethod(this.GetRequestString(entityName)) +
    Environment.NewLine + Environment.NewLine + "        " +
    this.GetSelectExpressionMethod(this.GetRequestString(entityName), entityName);
}

// Entity with references
public string GetEntityWithReferenceExpandMethods(OdcmClass odcmClass)
{
    string entityWithReferenceRequestName = this.GetEntityWithReferenceRequestName(odcmClass);
    return this.GetExpandMethod(entityWithReferenceRequestName) +
    Environment.NewLine + Environment.NewLine + "        " +
    this.GetExpandExpressionMethod(entityWithReferenceRequestName, this.GetEntityNameString(odcmClass));
}

public string GetEntityWithReferenceSelectMethods(OdcmClass odcmClass)
{
    string entityWithReferenceRequestName = this.GetEntityWithReferenceRequestName(odcmClass);
    return this.GetSelectMethod(entityWithReferenceRequestName) +
    Environment.NewLine + Environment.NewLine + "        " +
    this.GetSelectExpressionMethod(entityWithReferenceRequestName, this.GetEntityNameString(odcmClass));
}

#>
