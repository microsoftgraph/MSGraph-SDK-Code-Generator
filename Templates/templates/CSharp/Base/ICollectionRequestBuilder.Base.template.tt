<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="IRequestBuilder.Base.template.tt"#>
<#+

// -------------------------------------------------------------
// Methods for standard entity collection classes
// -------------------------------------------------------------
public string GetCollectionInterfaceDefinition(OdcmProperty odcmProperty)
{
    return this.GetInterfaceDefinition(this.GetPropertyCollectionRequestBuilderName(odcmProperty), odcmProperty.GetClassNamespace());
}

public string GetCollectionRequestMethod(OdcmProperty odcmProperty)
{
    return this.GetRequestMethod(this.GetPropertyCollectionRequestName(odcmProperty));
}

public string GetCollectionRequestMethodWithOptions(OdcmProperty odcmProperty)
{
    return this.GetRequestMethodWithOptions(this.GetPropertyCollectionRequestName(odcmProperty), odcmProperty.GetClassNamespace());
}

// Creates the indexer property definition for the collection
public string GetCollectionIndexRequestBuilder(OdcmProperty odcmProperty)
{
    var propTypeName = this.GetPropertyTypeName(odcmProperty);
    var entityRequestBuilder = this.GetPropertyTypeRequestBuilderName(odcmProperty);

    // In case there is an action or function with the name of item. This is to avoid CS0102
    // https://msdn.microsoft.com/en-US/library/26f2y168%28v=VS.90%29.aspx
    var allMethods = new List<OdcmMethod>();
    foreach (var method in odcmProperty.Projection.Type.AsOdcmClass().Methods)
    {
        allMethods.Add(method);
        allMethods.AddRange(method.Overloads);
    }
    
    var hasItemMethod = allMethods.Exists(x => x.Name.ToLower().Equals("item")) ? true : false;   

    return this.GetIndexRequestBuilder(propTypeName, entityRequestBuilder, hasItemMethod);
}


// -------------------------------------------------------------
// Methods for the reference of an entity collection
// -------------------------------------------------------------
public string GetCollectionReferencesInterfaceDefinition(OdcmProperty odcmProperty)
{
    return this.GetInterfaceDefinition(this.GetPropertyCollectionReferencesRequestBuilderName(odcmProperty), odcmProperty.GetClassNamespace());
}

public string GetCollectionReferencesRequestMethod(OdcmProperty odcmProperty)
{
    return this.GetRequestMethod(this.GetPropertyCollectionReferencesRequestName(odcmProperty));
}

public string GetCollectionReferencesRequestMethodWithOptions(OdcmProperty odcmProperty)
{
    return this.GetRequestMethodWithOptions(this.GetPropertyCollectionReferencesRequestName(odcmProperty), odcmProperty.GetClassNamespace());
}


// -------------------------------------------------------------
// Methods for entity collection classes that support $ref addressing
// -------------------------------------------------------------
public string GetCollectionWithReferencesInterfaceDefinition(OdcmProperty odcmProperty)
{
    return this.GetInterfaceDefinition(this.GetPropertyCollectionWithReferencesRequestBuilderName(odcmProperty), odcmProperty.GetClassNamespace());
}

public string GetCollectionWithReferencesRequestMethod(OdcmProperty odcmProperty)
{
    return this.GetRequestMethod(this.GetPropertyCollectionWithReferencesRequestName(odcmProperty));
}

public string GetCollectionWithReferencesRequestMethodWithOptions(OdcmProperty odcmProperty)
{
    return this.GetRequestMethodWithOptions(this.GetPropertyCollectionWithReferencesRequestName(odcmProperty), odcmProperty.GetClassNamespace());
}


// -------------------------------------------------------------
// Indexer properties
// -------------------------------------------------------------
// Creates an indexer for the specified property name and requestBuilderTypeName
public string GetIndexRequestBuilder(string propertyName, string requestBuilderTypeName, bool hasItemMethod)
{
    var stringBuilder = new StringBuilder();

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Gets an <see cref=\"{0}\"/> for the specified {1}.", requestBuilderTypeName.ClassToInterface(), propertyName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <param name=\"id\">The ID for the {0}.</param>", propertyName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <returns>The <see cref=\"{0}\"/>.</returns>", requestBuilderTypeName.ClassToInterface());
    stringBuilder.Append(Environment.NewLine);
    if (hasItemMethod) 
    {
        stringBuilder.AppendFormat("        [System.Runtime.CompilerServices.IndexerName(\"ThisItem\")]"); // Special case for methods named Item. 
        stringBuilder.Append(Environment.NewLine);
    }
    stringBuilder.AppendFormat("        {0} this[string id] {{ get; }}", requestBuilderTypeName.ClassToInterface());

    return stringBuilder.ToString();
}

// Creates the request builder property definition for the $ref navigation on the collection
public string GetCollectionReferencesRequestBuilder(OdcmProperty odcmProperty)
{
    var propertyClass = odcmProperty.Class.AsOdcmClass();
    if (propertyClass.Kind != OdcmClassKind.Service && odcmProperty.IsNavigation() && !odcmProperty.ContainsTarget)
    {
        var stringBuilder = new StringBuilder();
        var collectionReferencesRequestBuilder = this.GetPropertyCollectionReferencesRequestBuilderName(odcmProperty);

        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        /// <summary>");
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("        /// Gets an <see cref=\"I{0}\"/> for the references in the collection.", collectionReferencesRequestBuilder);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        /// </summary>");
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("        /// <returns>The <see cref=\"I{0}\"/>.</returns>", collectionReferencesRequestBuilder);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("        I{0} References {{ get; }}", collectionReferencesRequestBuilder);
        stringBuilder.Append(Environment.NewLine);

        return stringBuilder.ToString();
    }

    return string.Empty;
}

// Creates the indexer property definition for a collection that supports $ref
public string GetCollectionWithReferencesIndexRequestBuilder(OdcmProperty odcmProperty)
{
    var propTypeName = this.GetPropertyTypeName(odcmProperty);
    var entityRequestBuilder = this.GetPropertyTypeWithReferenceRequestBuilderName(odcmProperty);

    return this.GetIndexRequestBuilder(propTypeName, entityRequestBuilder, false);
}

#>
