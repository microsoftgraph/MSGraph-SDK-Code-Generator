<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#

CustomT4Host host   = (CustomT4Host)Host;
OdcmModel model     = host.CurrentModel;
var writer          = (CodeWriterCSharp)host.CodeWriter;
bool logTemplateSrc = true;

#>
<#=writer.WriteHeader()#>

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

<# if (logTemplateSrc) { #>
// Template Source: <#= host.GetTemplateFileName(host.TemplateFile) #>
<# } #>
<#+

// -------------------------------------------------------------
// Methods to retrieve name strings from various Odcm types
// -------------------------------------------------------------
public string GetNamespaceName(OdcmClass odcmClass)
{
    return odcmClass.Namespace.GetNamespaceName();
}

public string GetEntityNameString(OdcmClass entityClass)
{
    return entityClass.Name.ToCheckedCase();
}

public string GetMethodName(OdcmMethod odcmMethod)
{
    return odcmMethod.Name.ToCheckedCase();
}

public string GetPropertyName(OdcmProperty odcmProperty)
{
    return odcmProperty.Name.ToCheckedCase();
}


// -------------------------------------------------------------
// Methods for appending standard postfixes onto names, like "Request" or "RequestBuilder"
// -------------------------------------------------------------
public string GetRequestString(string prefix)
{
    return string.Concat(prefix, "Request");
}

public string GetRequestBuilderString(string prefix)
{
    return string.Concat(prefix, "RequestBuilder");
}


// -------------------------------------------------------------
// Methods for appending reference-related strings to names
// -------------------------------------------------------------
public string GetReferenceString(string prefix)
{
    return string.Concat(prefix, "Reference");
}

public string GetReferencesString(string prefix)
{
    return string.Concat(prefix, "References");
}

public string GetWithReferenceString(string prefix)
{
    return string.Concat(prefix, "WithReference");
}

public string GetWithReferencesString(string prefix)
{
    return string.Concat(prefix, "WithReferences");
}

public string GetWithReferenceRequestString(string prefix)
{
    return this.GetRequestString(this.GetWithReferenceString(prefix));
}

public string GetWithReferencesRequestString(string prefix)
{
    return this.GetRequestString(this.GetWithReferencesString(prefix));
}

public string GetWithReferenceRequestBuilderString(string prefix)
{
    return this.GetRequestBuilderString(this.GetWithReferenceString(prefix));
}

public string GetWithReferencesRequestBuilderString(string prefix)
{
    return this.GetRequestBuilderString(this.GetWithReferencesString(prefix));
}


// -------------------------------------------------------------
// Methods for appending collection-related postfixes
// -------------------------------------------------------------
public string GetCollectionString(string prefix)
{
    return string.Concat(prefix, "Collection");
}

public string GetCollectionRequestString(string prefix)
{
    return this.GetRequestString(string.Concat(prefix, "Collection"));
}

public string GetCollectionRequestBuilderString(string prefix)
{
    return this.GetRequestBuilderString(string.Concat(prefix, "Collection"));
}

public string GetCollectionWithReferencesRequestBuilderString(string prefix)
{
    return this.GetWithReferencesRequestBuilderString(string.Concat(prefix, "Collection"));
}


// -------------------------------------------------------------
// Methods for entity request naming
// -------------------------------------------------------------
public string GetEntityRequestName(OdcmClass odcmClass)
{
    return this.GetRequestString(this.GetEntityNameString(odcmClass));
}

public string GetEntityReferenceRequestName(OdcmClass odcmClass)
{
    return this.GetRequestString(this.GetReferenceString(this.GetEntityNameString(odcmClass)));
}

public string GetEntityWithReferenceRequestName(OdcmClass odcmClass)
{
    return this.GetRequestString(this.GetWithReferenceString(this.GetEntityNameString(odcmClass)));
}


// -------------------------------------------------------------
// Methods for entity request builder naming
// -------------------------------------------------------------
public string GetEntityRequestBuilderName(OdcmClass odcmClass)
{
    return this.GetRequestBuilderString(this.GetEntityNameString(odcmClass));
}

public string GetEntityReferenceRequestBuilderName(OdcmClass odcmClass)
{
    return this.GetRequestBuilderString(this.GetReferenceString(this.GetEntityNameString(odcmClass)));
}

public string GetEntityWithReferenceRequestBuilderName(OdcmClass odcmClass)
{
    return this.GetRequestBuilderString(this.GetWithReferenceString(this.GetEntityNameString(odcmClass)));
}


// -------------------------------------------------------------
// Methods for property naming
// -------------------------------------------------------------
public string GetPropertyReferenceName(OdcmProperty odcmProperty)
{
    return this.GetReferenceString(this.GetPropertyName(odcmProperty));
}

public string GetPropertyWithReferenceName(OdcmProperty odcmProperty)
{
    return this.GetWithReferenceString(this.GetPropertyName(odcmProperty));
}

public string GetPropertyWithReferencesName(OdcmProperty odcmProperty)
{
    return this.GetWithReferencesString(this.GetPropertyName(odcmProperty));
}

public string GetPropertyTypeName(OdcmProperty odcmProperty)
{
    return odcmProperty.GetTypeString(odcmProperty.GetClassNamespace());
}

public string GetPropertyTypeName(OdcmProperty odcmProperty, string namespaceContext)
{
    return odcmProperty.GetTypeString(namespaceContext);
}

public string GetPropertyReferenceTypeName(OdcmProperty odcmProperty)
{
    return this.GetReferenceString(this.GetPropertyTypeName(odcmProperty));
}

public string GetPropertyWithReferenceTypeName(OdcmProperty odcmProperty)
{
    return this.GetWithReferenceString(this.GetPropertyTypeName(odcmProperty));
}

public string GetPropertyWithReferencesTypeName(OdcmProperty odcmProperty)
{
    return this.GetWithReferencesString(this.GetPropertyTypeName(odcmProperty));
}


// -------------------------------------------------------------
// Methods for standard property collection naming
// -------------------------------------------------------------
public string GetPropertyCollectionRequestName(OdcmProperty odcmProperty)
{
    return this.GetCollectionRequestString(string.Concat(this.GetEntityNameString(odcmProperty.Class), this.GetPropertyName(odcmProperty)));
}

public string GetPropertyCollectionRequestBuilderName(OdcmProperty odcmProperty)
{
    return this.GetCollectionRequestBuilderString(string.Concat(this.GetEntityNameString(odcmProperty.Class), this.GetPropertyName(odcmProperty)));
}

public string GetPropertyReferenceTypeRequestBuilderName(OdcmProperty odcmProperty)
{
    return this.GetRequestBuilderString(this.GetPropertyReferenceTypeName(odcmProperty));
}

public string GetPropertyTypeRequestBuilderName(OdcmProperty odcmProperty)
{
    return this.GetRequestBuilderString(this.GetPropertyTypeName(odcmProperty));
}


// -------------------------------------------------------------
// Methods for property collection reference naming
// -------------------------------------------------------------
public string GetPropertyCollectionReferencesRequestBuilderName(OdcmProperty odcmProperty)
{
    return this.GetRequestBuilderString(
        this.GetReferencesString(
            this.GetCollectionString(
                string.Concat(
                    this.GetEntityNameString(odcmProperty.Class),
                    this.GetPropertyName(odcmProperty)))));
}

public string GetPropertyCollectionReferencesRequestName(OdcmProperty odcmProperty)
{
    return this.GetRequestString(
        this.GetReferencesString(
            this.GetCollectionString(
                string.Concat(
                    this.GetEntityNameString(odcmProperty.Class),
                    this.GetPropertyName(odcmProperty)))));
}


// -------------------------------------------------------------
// Methods for property collection naming where the collection supports $ref addressing
// -------------------------------------------------------------
public string GetPropertyCollectionWithReferencesRequestBuilderName(OdcmProperty odcmProperty)
{
    return this.GetRequestBuilderString(
        this.GetWithReferencesString(
            this.GetCollectionString(
                string.Concat(
                    this.GetEntityNameString(odcmProperty.Class),
                    this.GetPropertyName(odcmProperty)))));
}

public string GetPropertyCollectionWithReferencesRequestName(OdcmProperty odcmProperty)
{
    return this.GetRequestString(
        this.GetWithReferencesString(
            this.GetCollectionString(
                string.Concat(
                    this.GetEntityNameString(odcmProperty.Class),
                    this.GetPropertyName(odcmProperty)))));
}

public string GetPropertyTypeWithReferenceRequestBuilderName(OdcmProperty odcmProperty)
{
    return this.GetRequestBuilderString(this.GetPropertyWithReferenceTypeName(odcmProperty));
}


// -------------------------------------------------------------
// Methods for request builder method headers
// -------------------------------------------------------------
public string GetRequestMethodHeader()
{
    return
      @"/// <summary>
        /// Builds the request.
        /// </summary>
        /// <returns>The built request.</returns>";
}

public string GetRequestMethodWithOptionsHeader()
{
    return
      @"/// <summary>
        /// Builds the request.
        /// </summary>
        /// <param name=""options"">The query and header options for the request.</param>
        /// <returns>The built request.</returns>";
}

// -------------------------------------------------------------
// Methods used in MethodRequest.cs.tt and IMethodRequest.cs.tt for OData actions and functions.
// -------------------------------------------------------------

/// <summary>
/// Used in MethodRequest.cs.tt and IMethodRequest.cs.tt to get the ODataMethod*Response type
/// defined in Microsoft.Graph.Core. Updates to supported OData primitives for OData methods
/// needs to occur in MethodRequest.cs.tt, IMethodRequest.cs.tt, Microsoft.Graph.Core, and here.
/// </summary>
/// <param name="type"></param>
/// <returns></returns>
public string GetMethodRequestPrimitiveReturnTypeString(string type)
{
    switch (type.ToLowerInvariant())
    {
        case "string":
            return "ODataMethodStringResponse";
        case "int32":
            return "ODataMethodIntResponse";
        case "boolean":
        case "bool":
            return "ODataMethodBooleanResponse";
        case "int64":
            return "ODataMethodLongResponse";
        default:
            return type;
    }
}


#>
