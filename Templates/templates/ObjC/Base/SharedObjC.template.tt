<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#
host                = (CustomT4Host)Host;
model               = host.CurrentModel;
writer              = (CodeWriterObjC)host.CodeWriter;
prefix              = writer.GetPrefix();
#>
<#=writer.WriteHeader()#>
<#+

private String prefix;
private CodeWriterObjC writer;
private CustomT4Host host;
private OdcmModel model;
private bool withReference = false;
private bool entityReference = false;
private bool collectionReference = false;

private string GetObjCTypeIdentifier(OdcmObject o, bool getUnderlyingType=false)
{
    if(o==null)
    {
        return GetStaticBaseObject();
    }

    if(o is OdcmProperty)
    {
        OdcmProperty prop=(OdcmProperty)o;

        if(prop.IsCollection && !getUnderlyingType)
        {
            return @"NSArray";
        }

        if (prop.IsComplexCollectionOpenType(model) && !getUnderlyingType)
        {
            return @"NSDictionary";
        }

        return GetObjCTypeIdentifier(prop.Projection.Type,getUnderlyingType);
    }
    else if(o is OdcmType)
    {
        return ((OdcmType)o).GetTypeString();
    }

    return string.Empty;
}

private string GetObjCTypeForVarDeclaration(OdcmObject o, bool getUnderlyingType=false)
{
    if(o is OdcmProperty)
    {
        OdcmProperty prop=(OdcmProperty)o;
        if(prop.IsCollection || prop.IsComplex())
        {
            return GetObjCTypeIdentifier(prop,getUnderlyingType) + "*";
        }
    }
    else if(o is OdcmType)
    {
        OdcmType type=(OdcmType)o;
        if(type.IsComplex())
        {
            return GetObjCTypeIdentifier(type,getUnderlyingType) + "*";
        }
    }

    return GetObjCTypeIdentifier(o,getUnderlyingType);
}

private string GetObjCEnumMember(OdcmEnum en, OdcmEnumMember em)
{
    return GetObjCTypeIdentifier(en) + em.Name.ToUpperFirstChar();
}

private string GetObjCProperty(OdcmProperty prop)
{
    return prop.SanitizePropertyName().ToLowerFirstChar();
}

private string GetObjCPropertyGetter(OdcmProperty prop)
{
    return writer.GetGetterString(GetObjCProperty(prop));
}

private string GetObjCPropertySetter(OdcmProperty prop)
{
    return "set" + GetObjCProperty(prop).ToUpperFirstChar();
}

private bool IsObjCTypeSameAsJsonType(OdcmType type)
{
    // TODO: To be more correct, we should add a GetJsonType() method
    //       and return (GetObjCType(type) == GetJsonType(type)). Practically speaking though,
    //       only Edm.String has the same friendly ObjC type and JSON serializer type.
    string ts=GetObjCTypeIdentifier(type);
    return ts=="NSString";
}

private string GetJsonToObjCExpressionConversion(string expr,OdcmProperty prop)
{
    // This generates a wrapper around a provided JSON-typed expression (i.e. types obtained from NSJSONSerialization)
    //   that converts it to a user-friendly ObjC type i.e. generated Entity/enum class etc.
    if(GetObjCTypeIdentifier(prop,true)=="NSDate" ||
       GetObjCTypeIdentifier(prop,true)=="MSDate")
    {
        return String.Format(@"[{0} ms_dateFromString: {1}]",
            GetObjCTypeIdentifier(prop,true),
            expr);
    }

    if(GetObjCTypeIdentifier(prop,true)=="MSTimeOfDay")
    {
        return String.Format(@"[{0} ms_timeFromString: {1}]",
            GetObjCTypeIdentifier(prop,true),
            expr);
    }

	if(GetObjCTypeIdentifier(prop,true)=="MSDuration")
    {
        return String.Format(@"[{0} ms_durationFromString: {1}]",
            GetObjCTypeIdentifier(prop,true),
            expr);
    }

    if(prop.IsEnum())
    {
        return String.Format(
        @"[{0} to{1}]",
        expr,
        GetObjCTypeIdentifier(prop,true));
    }

    var type = prop.Projection.Type;

    if(type is OdcmEntityClass || type is OdcmMediaClass || type is OdcmComplexClass)
    {
        return String.Format(
        @"[[{0} alloc] initWithDictionary: {1}]",
        GetObjCTypeIdentifier(prop,true),
        expr);
    }

	if(type.Name == "Byte")
	{
		return expr;
	}

    return String.Format(
    @"[{0} {1}]",
    expr,
    type.GetNSNumberValueMethod());
}

private string GetObjCTypeIdentifierCollection(OdcmProperty prop)
{
    var propName =  GetObjCTypeIdentifier(prop,true);
    if (prop.IsComplexCollectionOpenType(model))
    {
        propName = propName.RemoveFromEnd("Collection");
    }

    return propName;
}

private string GetHydratedPropertyFromDictionary(OdcmProperty prop)
{
    return GetJsonToObjCExpressionConversion(String.Format(@"self.dictionary[@""{0}""]",prop.Name),prop);
}

private string GetObjCToJsonConvertibleExpressionConversion(OdcmType type, bool isCollection, string val)
{
    // This generates a wrapper around a provided friendly-ObjC-typed expression that converts it
    //   to an expression that can be passed into [MSObject getNSJsonSerializationCompatibleValue].
    //
    // The categories of Obj-C property types are as follows:
    //   Entity/Complex generated classes
    //   Collections (NSArrays)
    //   Enum generated classes
    //   System object-types (NSString, NSDate)
    //   System primitives (int types, BOOL)
    // 
    // All of these implement the methods (some via extensions) dictionary/arrayWithItem or ms_toString
    //   except for system primitives, which we need to box here using @().
    if (type.IsPrimitive() && !isCollection)
    {
        return "@(" + val + ")";
    }

    return val;
}

private string GetObjCToJsonConvertibleExpressionConversion(OdcmProperty prop,string val)
{
    return GetObjCToJsonConvertibleExpressionConversion(prop.Projection.Type, prop.IsCollection, val);
}

private string SetDictionaryPropertyInJsonConvertibleForm(OdcmProperty prop, string val)
{
    // Dictionary entries can either be directly NSJSON-typed, or convertible to
    //   a NSJSON type via [MSObject getNSJsonSerializationCompatibleValue].
    // 

	if(GetObjCTypeIdentifier(prop,true)=="NSDate" ||
       GetObjCTypeIdentifier(prop,true)=="MSDate")
    {
        return String.Format(@"self.dictionary[@""{0}""] = {1};",
		prop.Name,
		String.Format(@"[{0} ms_toString]",GetObjCToJsonConvertibleExpressionConversion(prop,val)));
    }

    if(GetObjCTypeIdentifier(prop,true)=="MSTimeOfDay")
    {
       return String.Format(@"self.dictionary[@""{0}""] = {1};",
		prop.Name,
		String.Format(@"[{0} ms_toString]",GetObjCToJsonConvertibleExpressionConversion(prop,val)));
    }

	if(GetObjCTypeIdentifier(prop,true)=="MSDuration")
    {
       return String.Format(@"self.dictionary[@""{0}""] = {1};",prop.Name,String.Format(@"{0}.durationString",GetObjCToJsonConvertibleExpressionConversion(prop,val)));
    }

    return String.Format(@"self.dictionary[@""{0}""] = {1};",prop.Name,GetObjCToJsonConvertibleExpressionConversion(prop,val));
}

private string GetHydratedIVarFromDictionary(OdcmProperty prop)
{
    if(prop.IsCollection)
    {
        return String.Format(@"
    NSMutableArray *{0}Result = [NSMutableArray array];
    NSArray *{0} = self.dictionary[@""{1}""];

    if ([{0} isKindOfClass:[NSArray class]]){{
        for (id {2} in {0}){{
            [{0}Result addObject:{2}];
        }}
    }}

    _{0} = {0}Result;
        ",
        GetObjCProperty(prop),
        prop.Name,
        "temp"+prop.Projection.Type.Name.ToUpperFirstChar(),
        GetJsonToObjCExpressionConversion(prop.Projection.Type.Name.ToLowerFirstChar(), prop));
    }

    if(prop.IsComplexCollectionOpenType(model))
    {
        return String.Format(@"
    NSMutableDictionary *{0}Result = [[NSMutableDictionary alloc] init];
    NSDictionary *{0} = self.dictionary[@""{1}""];

    if ([{0} isKindOfClass:[NSDictionary class]]){{
        [{0} enumerateKeysAndObjectsUsingBlock:^(NSString* key, id value, BOOL* stop){{
            [{0}Result setValue:{3} forKey:key];
        }}];
    }}

    _{0} = {0}Result;
        ",
        GetObjCProperty(prop),
        prop.Name,
        prop.Projection.Type.Name.ToLowerFirstChar().RemoveFromEnd("Collection"),
        GetJsonToObjCExpressionConversionOpenType(prop));
    }

    return String.Format(@"_{0} = {1};",GetObjCProperty(prop),GetHydratedPropertyFromDictionary(prop));
}

private string GetJsonToObjCExpressionConversionOpenType(OdcmProperty prop)
{
    string objCIdentifierType = GetObjCTypeIdentifierCollection(prop);

    if(model.GetComplexTypes().Any(complexType => objCIdentifierType.Equals(writer.GetNamespacePrefixForType(complexType) + complexType.Name.ToUpperFirstChar())))
    {
        return String.Format("[[{0} alloc] initWithDictionary:value]", objCIdentifierType);
    }

    return "value";
}

public string GetFunctionParameterDictionary(List<OdcmParameter> parameters)
{
    var result = new StringBuilder();

    if (parameters.Any())
    {
        result.Append("NSDictionary *params = [[NSDictionary alloc] initWithObjectsAndKeys:");
    }
    else
    {
        result.Append("NSDictionary *params = nil;");
    }

    foreach (var param in parameters)
    {
        result.AppendFormat("[{0}Object getNSJsonSerializationCompatibleValue:{1}],",
        writer.GetStaticCodePrefix(),
        GetObjCToJsonConvertibleExpressionConversion(param.Type, param.IsCollection, "_"+param.Name.ToLowerFirstChar()));

        result.AppendFormat("@\"{0}\",", param.Name);
    }

    if (parameters.Any())
    {
        result.AppendLine("nil];").AppendLine();
    }

    return result.ToString();
}

/*
 * Methods to get strings from non-generated SDK objects
 */

private string GetStaticCollectionObject()
{
    return writer.GetStaticCodePrefix() +"Collection";
}

private string GetStaticBaseObject()
{
    return writer.GetStaticCodePrefix() + "Object";
}

private string GeneratePropertyDeclarationLine(OdcmProperty prop)
{
    if(prop.IsCollection || prop.IsComplex())
    {
        if(prop.IsNullable==true) 
        {
            return "@property (nullable, nonatomic, setter=" + GetObjCPropertySetter(prop) + ":, getter=" + GetObjCPropertyGetter(prop) + ") " + GetObjCTypeForVarDeclaration(prop) + " " + GetObjCProperty(prop) + ";";
        }
        else
        {
            return "@property (nonnull, nonatomic, setter=" + GetObjCPropertySetter(prop) + ":, getter=" + GetObjCPropertyGetter(prop) + ") " + GetObjCTypeForVarDeclaration(prop) + " " + GetObjCProperty(prop) + ";";
        }
    }
    else
    {
        return "@property (nonatomic, setter=" + GetObjCPropertySetter(prop) + ":, getter=" + GetObjCPropertyGetter(prop) + ") " + GetObjCTypeForVarDeclaration(prop) + " " + GetObjCProperty(prop) + ";";
    }
}

private void PropertyGetterImplementation(OdcmProperty prop)
{
#>
- (<#=GetObjCTypeForVarDeclaration(prop)#>) <#=GetObjCPropertyGetter(prop)#>
{
<#+
    if(IsObjCTypeSameAsJsonType(prop.Projection.Type))
    {
#>
<#+
    if(prop.IsNullable==true) 
    {
#>
    if([[NSNull null] isEqual:self.dictionary[@"<#=prop.Name#>"]])
    {
        return nil;
    }   
<#+
}
#>
    return self.dictionary[@"<#=prop.Name#>"];
<#+
    }
    else
    {
#>
<#+
        if(prop.IsComplex())
        {
#>
    if(!_<#=GetObjCProperty(prop)#>){
        <#=GetHydratedIVarFromDictionary(prop)#>
    }
<#+
        }
        else
        {
#>
    <#=GetHydratedIVarFromDictionary(prop)#>
<#+
        }
#>
    return _<#=GetObjCProperty(prop)#>;
<#+
    }
#>
}

<#+
}

private void PropertySetterImplementation(OdcmProperty prop)
{
#>
- (void) <#=GetObjCPropertySetter(prop)#>: (<#=GetObjCTypeForVarDeclaration(prop)#>) val
{
<#+
    if(IsObjCTypeSameAsJsonType(prop.Projection.Type))
    {
#>
    self.dictionary[@"<#=prop.Name#>"] = val;
<#+
    }
    else
    {
#>
    _<#=GetObjCProperty(prop)#> = val;
    <#=SetDictionaryPropertyInJsonConvertibleForm(prop,"val")#>
<#+
    }
#>
}

<#+
}
#>
