<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedObjC.template.tt"#>
<#

var prop = host.CurrentType.AsOdcmProperty();
var innerEntity = prop.Projection.Type;
var isServiceES = prop.Class.Kind == OdcmClassKind.Service;

var collectionNamer = prop.IsReference() ? ((collectionReference)?"CollectionReferences":"CollectionWithReferences") : "Collection";
var baseName = isServiceES ? prop.Name.ToUpperFirstChar() : prop.Class.Name.ToUpperFirstChar() + prop.Name.ToUpperFirstChar();

var propName = writer.GetPrefix() + baseName;
var propRequestBuilder = propName + collectionNamer +"Builder";
var propRequest = propName + collectionNamer + "Request";

var innerEntityType = innerEntity.GetTypeString();
var entityRequestBuilder = innerEntityType + "RequestBuilder";
var entityRequest = innerEntityType + "Request";
if (innerEntityType.Equals(propName))
{
    propName = propName + collectionNamer;
}
#>

@class <#=entityRequest#>, <#=writer.GetStaticCodePrefix()#>URLSessionDataTask;

#import "<#=writer.GetPrefix()#>Models.h"
#import "<#=writer.GetStaticCodePrefix()#>CollectionRequest.h"

typedef void (^<#=innerEntityType#>CompletionHandler)(<#=innerEntityType#> *response, NSError *error);

typedef void (^<#=propName + collectionNamer#>CompletionHandler)(<#=writer.GetStaticCodePrefix()#>Collection *response, <#=propRequest#> *nextRequest, NSError *error);

@interface <#=propRequest#> : <#=writer.GetStaticCodePrefix()#>CollectionRequest

<#
if(!collectionReference)
{
#>
- (<#=writer.GetStaticCodePrefix()#>URLSessionDataTask *)getWithCompletion:(<#=propName + collectionNamer#>CompletionHandler)completionHandler;
<#
}

if (!prop.LongDescriptionContains("readonly") && (!prop.IsReference() || collectionReference))
{
#>

- (<#=writer.GetStaticCodePrefix()#>URLSessionDataTask *)add<#=innerEntity.Name.ToUpperFirstChar()#>:(<#=innerEntityType#>*)<#=innerEntity.Name.ToLowerFirstChar()#> withCompletion:(<#=innerEntityType#>CompletionHandler)completionHandler;

<#
}
#>
@end
