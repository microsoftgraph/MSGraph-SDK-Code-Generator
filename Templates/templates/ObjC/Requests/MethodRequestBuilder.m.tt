<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedObjC.template.tt"#>
<#
var func = host.CurrentType.AsOdcmMethod();
var entityName = writer.GetPrefix() + func.Class.Name.ToUpperFirstChar();
var method = (func.IsFunction) ? "GET" : "POST";
var methodName = "request";
var requestType = entityName + func.Name.Substring(func.Name.IndexOf('.') + 1).ToUpperFirstChar() + "Request";
var requestBuilderType = requestType + "Builder";
#>

#import "<#=writer.GetPrefix()#>ODataEntities.h"

<#
if (func.Parameters.Count > 0)
{
#>
@interface <#=requestBuilderType#>()

<#
    foreach (var param in func.Parameters)
    {
        var paramTypeString = param.Type.GetTypeString() + " ";
        if (param.Type.IsComplex())
        {
            paramTypeString = paramTypeString + "*";
        }

        if(param.IsCollection)
        {
            paramTypeString = "NSArray *";
        }
#>

<#=writer.GetPropertyDeclaration(param.Name.ToLowerFirstChar(),paramTypeString)#>

<#
    }
#>
@end
<#
}
#>

@implementation <#=requestBuilderType#>

<#
if (func.Parameters.Count > 0)
{
#>

- (instancetype)initWith<#=writer.GetParamsString(func.Parameters)#>URL:(NSURL *)url client:(ODataBaseClient*)client
{
    self = [super initWithURL:url client:client];
    if (self){
<#
    foreach (var param in func.Parameters)
    {
#>
        _<#=param.Name.ToLowerFirstChar()#> = <#=param.Name.ToLowerFirstChar()#>;
<#
    }
#>
    }
    return self;
}

- (<#=requestType#> *)request
{
    return [self requestWithOptions:nil];
}

- (<#=requestType#> *)requestWithOptions:(NSArray *)options
{

<#
    var stringBuilder = new StringBuilder("return [[" + requestType + " alloc] "  + "initWith");
    var firstParam = func.Parameters.First();
    var spacesString = stringBuilder.ToString() + firstParam.Name.ToUpperFirstChar();
    // adding the indent...
    spacesString = spacesString.ToSpaces() + "    ";
    foreach (var param in func.Parameters)
    {
        if (firstParam == param)
        {
            stringBuilder.AppendLine(param.Name.ToUpperFirstChar() + ":" + "self." + param.Name.ToLowerFirstChar());
        }
        else
        {
            stringBuilder.AppendLine(spacesString.Substring(0, spacesString.Length - param.Name.ToLowerFirstChar().Length) + param.Name.ToLowerFirstChar() + ":" + "self." + param.Name.ToLowerFirstChar());
        }
    }
    stringBuilder.AppendLine(spacesString.Substring(0, spacesString.Length - 3) + "URL:self.requestURL");
    stringBuilder.AppendLine(spacesString.Substring(0, spacesString.Length - "options".Length) + "options:options");
    stringBuilder.AppendLine(spacesString.Substring(0, spacesString.Length - "client".Length) + "client:self.client];");
#>
    <#=stringBuilder.ToString()#>
}

<#
    }
    else
    {
#>
- (<#=requestType#> *)request
{
    return [self requestWithOptions:nil];
}

- (<#=requestType#> *)requestWithOptions:(NSArray *)options
{
    return [[<#=requestType#> alloc] initWithURL:self.requestURL client:self.client];
}

<#
    }

#>
@end
