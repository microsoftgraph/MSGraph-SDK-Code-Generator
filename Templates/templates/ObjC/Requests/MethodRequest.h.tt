<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedObjC.template.tt"#>

<#
var func = host.CurrentType.AsOdcmMethod();
var entityName = writer.GetPrefix() + func.Class.Name.ToUpperFirstChar();
var requestType = entityName + func.Name.Substring(func.Name.IndexOf('.') + 1).ToUpperFirstChar() + "Request";
var returnTypeObject = func.ReturnType.AsOdcmClass();
string returnType = null;
if (func.ReturnType != null)
{
    returnType = writer.GetPrefix() + func.ReturnType.Name.ToUpperFirstChar();
}
else 
{
    returnType = "NSDictionary";
}

var superClass = writer.GetStaticCodePrefix() + ((func.IsCollection || func.LongDescriptionContains("specialCollection")) ?  "CollectionRequest" : "Request");
var method = ((func.Verbs & OdcmAllowedVerbs.Get) != OdcmAllowedVerbs.Get) ? "POST" : "GET";
var isAsync = func.LongDescriptionContains("async");
var specialCollectionType = writer.GetPrefix() + func.Class.Name.ToUpperFirstChar() + func.Name.Substring(func.Name.IndexOf('.') + 1).ToUpperFirstChar() + "Collection";
    
if (func.LongDescriptionContains("specialCollection"))
{
#>
@class <#=writer.GetStaticCodePrefix()#>URLSessionDataTask, <#=specialCollectionType#>;
<#
}
else 
{
#>
@class <#=writer.GetStaticCodePrefix()#>URLSessionDataTask;
<#
}
#>

#import "<#=superClass#>.h"

@interface <#=requestType#> : <#=superClass#>

@property (readonly) NSMutableURLRequest *mutableRequest;

<#
if (func.Parameters.Count > 0)
{
#>
- (instancetype)initWith<#=writer.GetParamsString(func.Parameters)#>URL:(NSURL *)url options:(NSArray *)options client:(ODataBaseClient*)client;
<#
}
string completionHandler;
string taskType = writer.GetStaticCodePrefix() + "URLSessionDataTask *";
if (func.IsCollection || func.LongDescriptionContains("specialCollection"))
{
    string collectionType = writer.GetStaticCodePrefix() + "Collection";
    if (func.LongDescriptionContains("specialCollection"))
    {
       collectionType = specialCollectionType; 
    }
    completionHandler = "(void (^)(" + collectionType + " *response, " + requestType + " *nextRequest, NSError *error))";

}
else if(isAsync)
{
    completionHandler = "(void (^)(" + returnType + " *response, " + writer.GetStaticCodePrefix() + "AsyncOperationStatus *status, NSError *error))";
    taskType = writer.GetStaticCodePrefix() + "AsyncURLSessionDataTask *";
}
else
{

    completionHandler = writer.GetNetworkCompletionBlock(returnType, "response"); 
}
if (!returnType.Contains("Stream"))
{

#>

- (<#=taskType#>)executeWithCompletion:<#=completionHandler#>completionHandler;
<#
}
#>

@end
