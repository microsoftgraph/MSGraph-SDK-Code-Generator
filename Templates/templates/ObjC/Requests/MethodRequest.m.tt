<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedObjC.template.tt"#>

<#
var func = host.CurrentType.AsOdcmMethod();
var entityName = writer.GetPrefix() + func.Class.Name.ToUpperFirstChar();
var requestType = entityName + func.Name.Substring(func.Name.IndexOf('.') + 1).ToUpperFirstChar() + "Request";
string returnType = null;
if (func.ReturnType != null)
{
    returnType = writer.GetPrefix() + func.ReturnType.Name.ToUpperFirstChar();
    var returnTypeObject = func.ReturnType.AsOdcmClass();
    //special method
    if (returnTypeObject != null && returnTypeObject.Properties.Any(prop => prop.IsCollection && prop.Name.Contains("values")))
    {
        var valuesProperty = returnTypeObject.Properties.First(prop => prop.IsCollection);
        returnType = writer.GetPrefix() + valuesProperty.Projection.Type.Name.ToUpperFirstChar();
    }
}
else
{
    returnType = "NSDictionary";
}


var superClass = writer.GetStaticCodePrefix() + ((func.IsCollection) ?  "CollectionRequest" : "Request");
var method = ((func.Verbs & OdcmAllowedVerbs.Get) != OdcmAllowedVerbs.Get) ? "POST" : "GET";
var isAsync = func.LongDescriptionContains("async");
var specialCollecitonName = writer.GetPrefix() + func.Class.Name.ToUpperFirstChar() + func.Name.Substring(func.Name.IndexOf('.') + 1).ToUpperFirstChar() + "Collection";

#>

#import "<#=writer.GetPrefix()#>ODataEntities.h"
#import "<#=writer.GetPrefix()#>Models.h"
#import "<#=writer.GetStaticCodePrefix()#>URLSessionDataTask.h"
<#
if (func.LongDescriptionContains("specialCollection"))
{
#>
#import "<#=specialCollecitonName#>.h"
<#
}
#>


<#
// if we are in a function not an action
if (method == @"GET")
{
#>
#import "<#=writer.GetStaticCodePrefix()#>FunctionParameters.h"
<#
}
#>



@interface <#=writer.GetStaticCodePrefix()#>Request()

@property NSMutableArray *options;

- (NSMutableURLRequest *)requestWithMethod:(NSString *)method
                                      body:(NSData *)body
                                   headers:(NSDictionary *)headers;

@end

<#
if (func.Parameters.Count > 0)
{
#>
@interface <#=requestType#>()

<#
    foreach (var param in func.Parameters)
    {
        var paramTypeString = param.Type.GetTypeString() + " ";
        if (param.Type.IsComplex())
        {
            paramTypeString = paramTypeString + "*";
        }
        if(param.IsCollection)
        {
            paramTypeString = "NSArray *";
        }
#>

<#=writer.GetPropertyDeclaration(param.Name.ToLowerFirstChar(),paramTypeString)#>

<#
    }
#>
@end
<#
}
#>

@implementation <#=requestType#>

<#
if (func.Parameters.Count > 0)
{
#>

- (instancetype)initWith<#=writer.GetParamsString(func.Parameters)#>URL:(NSURL *)url options:(NSArray *)options client:(ODataBaseClient*)client
{
<#
    foreach (var param in func.Parameters)
    {
        if (!param.IsNullable)
        {
#>
    NSParameterAssert(<#=param.Name.ToLowerFirstChar()#>);
<#
        }
    }
#>
    self = [super initWithURL:url options:options client:client];
    if (self){
<#
    foreach (var param in func.Parameters)
    {
#>
        _<#=param.Name.ToLowerFirstChar()#> = <#=param.Name.ToLowerFirstChar()#>;
<#
    }
#>
    }
    return self;
}
<#
}
#>

- (NSMutableURLRequest *)mutableRequest
{
<#
if (func.Parameters.Count > 0)
{
    // if we are in a function not an action
    if (method == @"GET")
    {
        foreach (var param in func.Parameters)
        {
#>
    [self.options addObject:[[<#=writer.GetStaticCodePrefix()#>FunctionParameters alloc] initWithKey:@"<#=param.Name#>"
                                                                value:[<#=writer.GetStaticCodePrefix()#>Object getNSJsonSerializationCompatibleValue:<#=GetObjCToJsonConvertibleExpressionConversion(param.Type, param.IsCollection, "_"+param.Name.ToLowerFirstChar())#>]]];
<#
        }
#>

    return [self requestWithMethod:@"<#=method#>" body:nil headers:nil];
<#
    }
    else
    {
#>
    <#=GetFunctionParameterDictionary(func.Parameters)#>
    NSData *body = [NSJSONSerialization dataWithJSONObject:params options:0 error:nil];
    return [self requestWithMethod:@"<#=method#>" body:body headers:nil];
<#
    }
}
else
{
#>
    return [self requestWithMethod:@"<#=method#>" body:nil headers:nil];
<#
}
#>
}

<#
string completionBlock;
string completionHandler;
string taskMethod;
string taskType = writer.GetStaticCodePrefix() + "URLSessionDataTask *";
if (func.IsCollection || func.LongDescriptionContains("specialCollection"))
{

    if (func.LongDescriptionContains("specialCollection"))
    {
        completionHandler = "(void (^)(" + specialCollecitonName + " *response, " + requestType + " *nextRequest, NSError *error))";
    }
    else
    {
        completionHandler = "(void (^)(" + writer.GetStaticCodePrefix() +"Collection *response, " + requestType + " *nextRequest, NSError *error))";
    }
    var stringBuilder = new StringBuilder();
    var baseIndents = ("    " + writer.GetStaticCodePrefix() + "URLSessionDataTask *task = [").ToSpaces();

    stringBuilder.AppendLine("^(" + writer.GetStaticCodePrefix() + "Collection *collectionResponse, NSError *error){");
	string returnCollectionName = "collectionResponse";
    if (func.LongDescriptionContains("specialCollection"))
    {
		returnCollectionName = "collection";
		stringBuilder.AppendLine(baseIndents + "    " + specialCollecitonName + " *" + returnCollectionName +"= nil;");
        stringBuilder.AppendLine(baseIndents + "    if(collectionResponse){");
        stringBuilder.AppendLine(baseIndents + "        " + returnCollectionName + " = [[" + specialCollecitonName + " alloc] initWithCollection:collectionResponse];");
        stringBuilder.AppendLine(baseIndents + "    }");
    }
    stringBuilder.AppendLine(baseIndents + "    if(!error && "+ returnCollectionName + ".nextLink && completionHandler){");
    stringBuilder.AppendLine(baseIndents + "            " + requestType + " *nextRequest = [[" + requestType + " alloc] initWithURL:" + returnCollectionName + ".nextLink");
    stringBuilder.AppendLine(baseIndents + "                                                                                options:nil");
    stringBuilder.AppendLine(baseIndents + "                                                                                client:self.client];");
    stringBuilder.AppendLine(baseIndents + "        completionHandler(" + returnCollectionName + ", nextRequest, nil);");
    stringBuilder.AppendLine(baseIndents + "    }");
    stringBuilder.AppendLine(baseIndents + "    else if(completionHandler){");
    stringBuilder.AppendLine(baseIndents + "        completionHandler(" + returnCollectionName + ", nil, error);");
    stringBuilder.AppendLine(baseIndents + "    }");
    stringBuilder.Append(baseIndents + "}");

    completionBlock = stringBuilder.ToString();
    taskMethod = "[self collectionTaskWithRequest:";

}
else if(isAsync)
{
    completionHandler = "(void (^)(" + returnType + " *response, " + writer.GetStaticCodePrefix() + "AsyncOperationStatus *status, NSError *error))";
    completionBlock = "completionHandler";
    taskMethod = "[self asyncTaskWithRequest:";
    taskType = writer.GetStaticCodePrefix() + "AsyncURLSessionDataTask *";
}
else
{
    completionHandler = writer.GetNetworkCompletionBlock(returnType, "response");
    completionBlock = "completionHandler";
    taskMethod = "[self taskWithRequest:";
}
var indentSpace = ("    " + taskType + "task = " + taskMethod).ToSpaces();
if (!returnType.Contains("Stream"))
{
#>

- (<#=taskType#>)executeWithCompletion:<#=completionHandler#>completionHandler
{

    <#=taskType#>task = <#=taskMethod#>self.mutableRequest
<#=indentSpace.Substring("odObjectWithDictionary".Length + 1)#>odObjectWithDictionary:^(id responseObject){
<#
if (returnType == writer.GetPrefix() + "String" || returnType == writer.GetStaticCodePrefix() + "Guid")
{
#>
<#=indentSpace#>    return [responseObject copy];
<#
}
else
{
#>
<#=indentSpace#>    return [[<#=returnType#> alloc] initWithDictionary:responseObject];
<#
}
#>
<#=indentSpace#>}
<#=indentSpace.Substring("completion".Length + 1)#>completion:<#=completionBlock#>];
    [task execute];
    return task;
}
<#
}
#>

@end
