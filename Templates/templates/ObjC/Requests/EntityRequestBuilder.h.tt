<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedObjC.template.tt"#>

<#
var entity = host.CurrentType.AsOdcmClass();
var refString = (withReference ? "WithReference" : (entityReference ? "Reference" : ""));
var entityName = writer.GetPrefix() + entity.Name.ToUpperFirstChar() + refString;
var entityRequestName = entityName + "Request";

var baseEntityRequestName = "";
if(!withReference && !entityReference && entity.Base!=null)
{
    baseEntityRequestName =  writer.GetPrefix() + entity.Base.Name.ToUpperFirstChar() + (withReference?"WithReference":(entityReference?"Reference":"")) + "RequestBuilder";
}
else
{
    baseEntityRequestName = writer.GetStaticCodePrefix() + "RequestBuilder";
}

var classes = new List<string>();
classes.Add(entityRequestName);

if(!withReference && !entityReference)
{

foreach(var prop in entity.NavigationProperties())
{
    var fetcher = string.Empty;
    fetcher = writer.GetPrefix() + prop.Projection.Type.Name.ToUpperFirstChar() + "RequestBuilder";

    if(!classes.Contains(fetcher)) classes.Add(fetcher);

    if(prop.IsCollection)
    {
        var collectionNamer = prop.IsReference() ? "CollectionWithReferences" : "Collection";
        var collectionFetcher = writer.GetPrefix() + prop.Class.Name.ToUpperFirstChar() + prop.Name.ToUpperFirstChar() + collectionNamer + "RequestBuilder";

        if(!classes.Contains(collectionFetcher)) classes.Add(collectionFetcher);
    }
    else
    {
        var requestType = writer.GetPrefix() + prop.Name.ToUpperFirstChar() + "RequestBuilder";
        if (!classes.Contains(requestType))
        {
            classes.Add(requestType);
        }
    }
}

foreach(var prop in entity.GetProperties(typeName:"Stream"))
{
    var streamRequest = writer.GetPrefix() + prop.Class.Name.ToUpperFirstChar() + prop.Name.ToUpperFirstChar() + "Request";
    if (!classes.Contains(streamRequest))
    {
        classes.Add(streamRequest);
    }
}

foreach(var prop in entity.Properties.Where(prop => prop.Projection.Type is OdcmMediaClass))
{
    var streamRequest = writer.GetPrefix() + prop.Projection.Type.Name.ToUpperFirstChar() + "StreamRequest";
    if (!classes.Contains(streamRequest))
    {
        classes.Add(streamRequest);
    }
}

foreach(var func in entity.Methods)
{
    var requestType = writer.GetPrefix() + entity.Name.ToUpperFirstChar() +
                   func.Name.Substring(func.Name.IndexOf('.') + 1).ToUpperFirstChar() + "RequestBuilder";
    if (!classes.Contains(requestType))
    {
        classes.Add(requestType);
    }
}

foreach(var complexType in entity.Properties.Where(prop => prop.LongDescriptionContains("navigable") ||
                                                           prop.Projection.Type.LongDescriptionContains("navigable"))
                                            .Where(prop => prop.Projection.Type is OdcmClass))
{
    var requestType = writer.GetPrefix() + complexType.Projection.Type.Name.ToUpperFirstChar() + "RequestBuilder";
    if (!classes.Contains(requestType))
    {
        classes.Add(requestType);
    }
}

}

if (classes.Count > 0)
{
	var lastClass = classes[classes.Count -1];
	StringBuilder stringBuilder = new StringBuilder();
	foreach(var propertyClass in classes)
	{
		stringBuilder.Append(propertyClass);
		if (propertyClass != lastClass)
		{
			stringBuilder.Append(", ");
		}
		else
		{
			stringBuilder.Append(";");
		}
	}
#>
@class <#=stringBuilder.ToString()#>
<#
}
#>


#import "<#=writer.GetPrefix()#>Models.h"
#import "<#=baseEntityRequestName#>.h"

<#
if(withReference)
{
#>
#import "<#=writer.GetPrefix() + entity.Name.ToUpperFirstChar()#>ReferenceRequestBuilder.h"
<#
}
#>

@interface <#=entityName#>RequestBuilder : <#=baseEntityRequestName#>

<#
if(!withReference && !entityReference)
{

foreach(var prop in entity.NavigationProperties())
{
	var propInstanceName = prop.Name.ToLowerFirstChar();
	var innerPropTypeName = writer.GetPrefix() + prop.Projection.Type.Name.ToUpperFirstChar();
	var innerPropTypeRequestName = innerPropTypeName + "RequestBuilder";
	
    if(prop.IsCollection)
    {
		var collectionNamer = prop.IsReference() ? "CollectionWithReferences" : "Collection";
		var collectionRequestName = writer.GetPrefix() + prop.Class.Name.ToUpperFirstChar() + prop.Name.ToUpperFirstChar() + collectionNamer + "RequestBuilder";
		var innerPropInstanceName = prop.Projection.Type.Name.ToLowerFirstChar();
#>
- (<#=collectionRequestName#> *)<#=propInstanceName#>;

<#
        if (!(prop.Projection.Type is OdcmComplexClass) || prop.LongDescriptionContains("queryable"))
        {
#>
- (<#=innerPropTypeRequestName#> *)<#=propInstanceName#>:(NSString *)<#=innerPropInstanceName#>;

<#
        }
    }
    else
    {
#>
- (<#=innerPropTypeRequestName#> *) <#=propInstanceName#>;

<#
    }
}
foreach(var complexType in entity.Properties.Where(prop => prop.LongDescriptionContains("navigable") ||
                                                           prop.Projection.Type.LongDescriptionContains("navigable"))
                                            .Where(prop => prop.Projection.Type is OdcmClass))
{
#>
- (<#=writer.GetPrefix() + complexType.Projection.Type.Name.ToUpperFirstChar()#>RequestBuilder *) <#=complexType.Name#>;

<#
}

foreach(var prop in entity.GetProperties(typeName:"Stream"))
{
    var propName = prop.Name.ToUpperFirstChar();
    var propRequestName = writer.GetPrefix() + prop.Class.Name.ToUpperFirstChar() + prop.Name.ToUpperFirstChar() + "Request";
#>
- (<#=propRequestName#> *) <#=propName.ToLowerFirstChar()#>RequestWithOptions:(NSArray *)options;

- (<#=propRequestName#> *) <#=propName.ToLowerFirstChar()#>Request;

<#
}
foreach(var prop in entity.Properties.Where( prop => prop.Projection.Type is OdcmMediaClass))
{
    var propName = prop.Name.ToUpperFirstChar();
    var propRequestName = writer.GetPrefix() + prop.Projection.Type.Name.ToUpperFirstChar() + "StreamRequest";
#>
- (<#=propRequestName#> *) <#=propName.ToLowerFirstChar()#>ValueWithOptions:(NSArray *)options;

- (<#=propRequestName#> *) <#=propName.ToLowerFirstChar()#>Value;

<#
}

foreach(var func in entity.MethodsAndOverloads())
{
    var methodName = func.Name.Substring(func.Name.IndexOf('.') + 1).ToLowerFirstChar();
    var requestBuilderName = writer.GetPrefix() + entity.Name.ToUpperFirstChar() + methodName.ToUpperFirstChar() + "RequestBuilder";
    if (func.Parameters.Count > 0)
    {
        methodName += ("With" + writer.GetParamsString(func.Parameters));
    }
#>
- (<#=requestBuilderName#> *)<#=methodName#>;

<#

}
}
#>

- (<#=entityRequestName#> *) request;

- (<#=entityRequestName#> *) requestWithOptions:(NSArray *)options;

<#
if(withReference)
{
#>
- (<#= writer.GetPrefix() + entity.Name.ToUpperFirstChar() + "ReferenceRequestBuilder" #> *) reference;
<#
}
#>

@end
