<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedObjC.template.tt"#>
<#
var entity = host.CurrentType.AsOdcmEnum();
var typeName = GetObjCTypeIdentifier(entity);
var valueTypeName = typeName + "Value";
#>

#import "<#=typeName#>.h"

@interface <#=typeName#> () {
    <#=valueTypeName#> _enumValue;
}
@property (nonatomic, readwrite) <#=valueTypeName#> enumValue;
@end

@implementation <#=typeName#>

<#
/////////////////////////////////////////////////////////////////
// Generate the static methods that look like [DayOfWeek Monday]
/////////////////////////////////////////////////////////////////
foreach (var member in entity.Members.OrderBy(x => x.Value))
{
#>
+ (<#=typeName#>*) <#=member.Name.ToLowerFirstChar()#> {
    static <#=typeName#> *_<#=member.Name.ToLowerFirstChar()#>;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _<#=member.Name.ToLowerFirstChar()#> = [[<#=typeName#> alloc] init];
        _<#=member.Name.ToLowerFirstChar()#>.enumValue = <#=GetObjCEnumMember(entity, member)#>;
    });
    return _<#=member.Name.ToLowerFirstChar()#>;
}
<#
}
#>

+ (<#=typeName#>*) UnknownEnumValue {
    static <#=typeName#> *_unknownValue;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _unknownValue = [[<#=typeName#> alloc] init];
        _unknownValue.enumValue = <#=typeName#>EndOfEnum;
    });
    return _unknownValue;
}

<#
///////////////////////////////////////////////////////////////
// Generate conversion from enum to boxed type and vice versa
// e.g. [DayOfWeek dayOfWeekWithEnumValue:DayOfWeekMonday]
///////////////////////////////////////////////////////////////
#>

+ (<#=typeName#>*) <#=entity.Name.ToLowerFirstChar()#>WithEnumValue:(<#=valueTypeName#>)val {

    switch(val)
    {
<#
    foreach(var member in entity.Members)
    {
#>
        case <#=GetObjCEnumMember(entity,member)#>:
            return [<#=typeName#> <#=member.Name.ToLowerFirstChar()#>];
<#
    }
#>
        case <#=typeName#>EndOfEnum:
        default:
            return [<#=typeName#> UnknownEnumValue];
    }

    return nil;
}

- (NSString*) ms_toString {

    switch(self.enumValue)
    {
<#
    foreach(var member in entity.Members)
    {
#>
        case <#=GetObjCEnumMember(entity,member)#>:
            return @"<#=member.Name#>";
<#
    }
#>
        case <#=typeName#>EndOfEnum:
        default:
            return nil;
    }

    return nil;
}

- (<#=valueTypeName#>) enumValue {
    return _enumValue;
}

@end

@implementation NSString (<#=typeName#>)

- (<#=typeName#>*) to<#=typeName#>{

    <#
    foreach(var member in entity.Members)
    {
    #>if([self isEqualToString:@"<#=member.Name#>"])
    {
          return [<#=typeName#> <#=member.Name.ToLowerFirstChar()#>];
    }
    else <#
    }
    #>{
        return [<#=typeName#> UnknownEnumValue];
    }
}

@end
