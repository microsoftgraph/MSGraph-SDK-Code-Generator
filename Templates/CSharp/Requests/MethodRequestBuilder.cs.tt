<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var method = host.CurrentType.AsOdcmMethod();
var entityName = method.Class.Name.ToCheckedCase();
var methodName = method.Name.ToCheckedCase();
var requestType = entityName + methodName + "Request";
var requestBuilderType = requestType + "Builder";

var isPost = method.IsAction() && method.Parameters != null && method.Parameters.Any();
var methodType = isPost ? "Post" : "Get";

var overloads = new List<OdcmMethod>();
overloads.Add(method);
overloads.AddRange(method.Overloads);

var methods = overloads
    .Select(m =>
        {
            var parameters = m.Parameters
                .Select(p =>
                    {
                        var type = p.Type.GetTypeString();
                        var name = p.Name.ToLowerFirstChar();
                        var parameterName = p.Name.GetSanitizedParameterName();
                        var propertyName = p.Name.ToCheckedCase();

                        if (p.IsCollection)
                        {
                            type = string.Format("IEnumerable<{0}>", type);
                        }
                        else if (!p.Type.IsTypeNullable() && p.IsNullable)
                        {
                            type += "?";
                        }

                        return new { Type = type, Name = name, ParameterName = parameterName, PropertyName = propertyName, IsNullable = p.IsNullable };
                    })
                .OrderBy(p => p.IsNullable ? 1 : 0);

            var paramStrings = parameters.Select(p => string.Format(",\n            {0} {1}", p.Type, p.ParameterName));
            var paramComments = parameters.Select(p => string.Format("\n        /// <param name=\"{0}\">A {0} parameter for the OData method call.</param>", p.ParameterName));

            return new
            {
                Parameters = parameters,
                ParametersAsArguments = string.Join("", paramStrings),
                ParameterComments = string.Join("", paramComments),
            };
        });

#>

namespace <#=method.Namespace.GetNamespaceName()#>
{
    using System;
    using System.Collections.Generic;
    using System.IO;

    /// <summary>
    /// The type <#=requestBuilderType#>.
    /// </summary>
    public partial class <#=requestBuilderType#> : Base<#=methodType#>MethodRequestBuilder<I<#=requestType#>>, I<#=requestBuilderType#>
    {
<#
foreach (var m in methods)
{
#>
        /// <summary>
        /// Constructs a new <see cref="<#=requestBuilderType#>"/>.
        /// </summary>
        /// <param name="requestUrl">The URL for the request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param><#=m.ParameterComments#>
        public <#=requestBuilderType#>(
            string requestUrl,
            IBaseClient client<#=m.ParametersAsArguments#>)
            : base(requestUrl, client)
        {
<#
    foreach (var p in m.Parameters)
    {
#>
            this.SetParameter("<#=p.Name#>", <#=p.ParameterName#>, <#=p.IsNullable.ToString().ToLowerInvariant()#>);
<#
    }
#>
        }

<#
}
#>
        /// <summary>
        /// A method used by the base class to construct a request class instance.
        /// </summary>
        /// <param name="functionUrl">The request URL to </param>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>An instance of a specific request class.</returns>
        protected override I<#=requestType#> CreateRequest(string functionUrl, IEnumerable<Option> options)
        {
            var request = new <#=requestType#>(functionUrl, this.Client, options);

<#
    if (isPost)
    {
        foreach (var m in methods)
        {
            foreach (var p in m.Parameters)
            {
#>
            if (this.HasParameter("<#=p.Name#>"))
            {
                request.RequestBody.<#=p.PropertyName#> = this.GetParameter<<#=p.Type#>>("<#=p.Name#>");
            }

<#
            }
        }
    }
#>
            return request;
        }
    }
}
