<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#
var entityContainer = model.EntityContainer;
var clientName = entityContainer.Name.ToCheckedCase() + "Client";
var namespaceName = entityContainer.Namespace.GetNamespaceName();
#>

namespace <#=namespaceName#>
{
<# if (!this.IsGraphNamespace(namespaceName)) { #>
    using Microsoft.Graph;

<# } #>
    /// <summary>
    /// The type <#=clientName#>.
    /// </summary>
    public partial class <#=clientName#> : BaseClient, I<#=clientName#>
    {
        /// <summary>
        /// Instantiates a new <#=clientName#>.
        /// </summary>
        /// <param name="authenticationProvider">The <see cref="IAuthenticationProvider"/> for authenticating request messages.</param>
        /// <param name="httpProvider">The <see cref="IHttpProvider"/> for sending requests.</param>
        public <#=clientName#>(
            IAuthenticationProvider authenticationProvider,
            IHttpProvider httpProvider = null)
            : this("<#=ConfigurationService.Settings.DefaultBaseEndpointUrl#>", authenticationProvider, httpProvider)
        {
        }

        /// <summary>
        /// Instantiates a new <#=clientName#>.
        /// </summary>
        /// <param name="baseUrl">The base service URL. For example, "<#=ConfigurationService.Settings.DefaultBaseEndpointUrl#>".</param>
        /// <param name="authenticationProvider">The <see cref="IAuthenticationProvider"/> for authenticating request messages.</param>
        /// <param name="httpProvider">The <see cref="IHttpProvider"/> for sending requests.</param>
        public <#=clientName#>(
            string baseUrl,
            IAuthenticationProvider authenticationProvider,
            IHttpProvider httpProvider = null)
            : base(baseUrl, authenticationProvider, httpProvider)
        {
        }
<#
    foreach(var prop in model.EntityContainer.Properties)
    {
        var propName = string.Concat(entityContainer.Name.ToCheckedCase(), prop.Name.ToCheckedCase());
        var sanitizedPropName = prop.Name.ToCheckedCase().GetSanitizedPropertyName();

        if (prop.IsCollection())
        {
            var collectionRequestBuilder = propName + "CollectionRequestBuilder";
#>

        /// <summary>
        /// Gets the <#=propName#> request builder.
        /// </summary>
        public I<#=collectionRequestBuilder#> <#=sanitizedPropName#>
        {
            get
            {
                return new <#=collectionRequestBuilder#>(this.BaseUrl + "/<#=prop.Name#>", this);
            }
        }
<#
        }
        else
        {
            var requestBuilder = prop.Projection.Type.Name.ToCheckedCase() + "RequestBuilder";
#>

        /// <summary>
        /// Gets the <#=propName#> request builder.
        /// </summary>
        public I<#=requestBuilder#> <#=sanitizedPropName#>
        {
            get
            {
                return new <#=requestBuilder#>(this.BaseUrl + "/<#=prop.Name#>", this);
            }
        }
<#
        }
    }
#>
    }
}
