<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var method = host.CurrentType.AsOdcmMethod();
var entityName = method.Class.Name.ToCheckedCase();

var isFunction = method.IsFunction;
var isAction = !isFunction;
var isComposable = method.IsComposable;

var methodName = method.Name.Substring(method.Name.IndexOf('.') + 1).ToCheckedCase();
var requestType = entityName + methodName + "Request";

var returnEntityType = method.ReturnType == null ? null : method.ReturnType.Name.GetTypeString();
var returnEntityParameter = string.Empty;
if (returnEntityType != null) {returnEntityParameter = returnEntityType.ToLower();}
var returnTypeObject = method.ReturnType == null ? null : method.ReturnType.AsOdcmClass();

var isCollection = method.IsCollection;

var sendAsyncReturnType = isCollection
    ? "I" + entityName + methodName + "CollectionPage"
    : returnEntityType;

var methodReturnType = sendAsyncReturnType == null
    ? "System.Threading.Tasks.Task"
    : "System.Threading.Tasks.Task<" + sendAsyncReturnType + ">";

bool hasParameters = method.Parameters != null && method.Parameters.Any();
bool includeRequestBody = hasParameters && isAction;
bool returnsStream = string.Equals(sendAsyncReturnType, "Stream");

var features = host.CurrentType.GetFeatures();

#>

namespace <#=method.Namespace.GetNamespaceName()#>
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Threading;

    /// <summary>
    /// The interface I<#=requestType#>.
    /// </summary>
    public partial interface I<#=requestType#> : IBaseRequest
    {
<#
    if (includeRequestBody)
    {
#>

        /// <summary>
        /// Gets the request body.
        /// </summary>
        <#=requestType#>Body RequestBody { get; }
<#
    }

    string sendParameterHeadersForOverload, sendOverloadParameters;

    if (returnsStream)
    {
        sendParameterHeadersForOverload = @"/// <param name=""cancellationToken"">The <see cref=""CancellationToken""/> for the request.</param>
        /// <param name=""httpCompletionOption"">The <see cref=""HttpCompletionOption""/> for the request.</param>";

        sendOverloadParameters = "CancellationToken cancellationToken, HttpCompletionOption httpCompletionOption = HttpCompletionOption.ResponseContentRead";
    }
    else
    {
        sendParameterHeadersForOverload = "/// <param name=\"cancellationToken\">The <see cref=\"CancellationToken\"/> for the request.</param>";
        sendOverloadParameters = "CancellationToken cancellationToken";
    }
#>

<# 
    if(isAction) // POST
    {
#>

        /// <summary>
        /// Issues the POST request.
        /// </summary>
        <#=methodReturnType#> PostAsync();

        /// <summary>
        /// Issues the POST request.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
<#
    if (returnsStream)
    {
#>
        /// <param name="httpCompletionOption">The <see cref="HttpCompletionOption"/> for the request.</param>
<#
    }
#>
        /// <returns>The task to await for async call.</returns>
        <#=methodReturnType#> PostAsync(
<#
    if (returnsStream)
    {
#>
            CancellationToken cancellationToken,
            HttpCompletionOption httpCompletionOption = HttpCompletionOption.ResponseContentRead);
<#
    }
    else
    {
#>
            CancellationToken cancellationToken);
<#
    }
#>
        
<#  } // End POST

#>

<# 
    if(method.IsFunction) // GET for a OData function.
    {
#>
        /// <summary>
        /// Issues the GET request.
        /// </summary>
        <#=methodReturnType#> GetAsync();
        
        /// <summary>
        /// Issues the GET request.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
<#
    if (returnsStream)
    {
#>
        /// <param name="httpCompletionOption">The <see cref="HttpCompletionOption"/> for the request.</param>
<#
    }
#>
        /// <returns>The task to await for async call.</returns>
        <#=methodReturnType#> GetAsync(
<#
    if (returnsStream)
    {
#>
            CancellationToken cancellationToken,
            HttpCompletionOption httpCompletionOption = HttpCompletionOption.ResponseContentRead);
<#
    }
    else
    {
#>
            CancellationToken cancellationToken);
<#
    }
#>
  
<#  } // End GET
 #>

<#
    if (!returnsStream)
    {
        if (features.CanExpand)
        {
#>

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        I<#=requestType#> Expand(string value);
<#
        }

        if (features.CanSelect)
        {
#>

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        I<#=requestType#> Select(string value);
<#
        }

        if (isCollection)
        {

            if (features.CanUseTop)
            {
#>

        /// <summary>
        /// Adds the specified top value to the request.
        /// </summary>
        /// <param name="value">The top value.</param>
        /// <returns>The request object to send.</returns>
        I<#=requestType#> Top(int value);
<#
            }

            if (features.CanFilter)
            {
#>

        /// <summary>
        /// Adds the specified filter value to the request.
        /// </summary>
        /// <param name="value">The filter value.</param>
        /// <returns>The request object to send.</returns>
        I<#=requestType#> Filter(string value);
<#
            }

            if (features.CanSkip)
            {
#>

        /// <summary>
        /// Adds the specified skip value to the request.
        /// </summary>
        /// <param name="value">The skip value.</param>
        /// <returns>The request object to send.</returns>
        I<#=requestType#> Skip(int value);
<#
            }

            if (features.CanSort)
            {
#>

        /// <summary>
        /// Adds the specified orderby value to the request.
        /// </summary>
        /// <param name="value">The orderby value.</param>
        /// <returns>The request object to send.</returns>
        I<#=requestType#> OrderBy(string value);
<#
            }
        }
    }
#>
    }
}
