<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var method = host.CurrentType.AsOdcmMethod();
var entityName = method.Class.Name.ToCheckedCase();
var httpMethod = (method.IsAction()) ? "POST" : "GET";
var methodName = method.Name.Substring(method.Name.IndexOf('.') + 1).ToCheckedCase();
var requestType = entityName + methodName + "Request";

var returnEntityType = method.ReturnType == null ? null : method.ReturnType.Name.GetTypeString().ToCheckedCase();
var returnTypeObject = method.ReturnType == null ? null : method.ReturnType.AsOdcmClass();

var isCollection = method.IsCollection;
bool isAsyncMethod = method.IsAsync();

string sendAsyncReturnType = null;

if (isCollection)
{
    if (isAsyncMethod)
    {
        sendAsyncReturnType = string.Format("I{0}{1}AsyncMonitor", entityName, methodName);
    }
    else
    {
        sendAsyncReturnType = string.Format("I{0}{1}CollectionPage", entityName, methodName);
    }
}
else
{
    sendAsyncReturnType = returnEntityType;

    if (isAsyncMethod)
    {
        sendAsyncReturnType = string.Format("IAsyncMonitor<{0}>", sendAsyncReturnType);
    }
}

var methodReturnType = sendAsyncReturnType == null
    ? "System.Threading.Tasks.Task"
    : "System.Threading.Tasks.Task<" + sendAsyncReturnType + ">";

var methodReturnTag = sendAsyncReturnType == null
    ? "The task to await."
    : string.Concat("The", sendAsyncReturnType);

bool hasParameters = method.Parameters != null && method.Parameters.Any();
bool returnsStream = string.Equals(sendAsyncReturnType, "Stream");

var namespaceName = method.Namespace.GetNamespaceName();

var features = host.CurrentType.GetFeatures();

#>

namespace <#=namespaceName#>
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
<# if (!this.IsGraphNamespace(namespaceName)) { #>
    using Microsoft.Graph;
<# } #>

    /// <summary>
    /// The interface I<#=requestType#>.
    /// </summary>
    public partial interface I<#=requestType#> : IBaseRequest
    {
<#
    if (hasParameters && method.IsAction())
    {
#>

        /// <summary>
        /// Gets the request body.
        /// </summary>
        <#=requestType#>Body RequestBody { get; }
<#
    }

    string sendParameterHeadersForOverload, sendOverloadParameters;

    if (returnsStream)
    {
        sendParameterHeadersForOverload = @"/// <param name=""cancellationToken"">The <see cref=""CancellationToken""/> for the request.</param>
        /// <param name=""httpCompletionOption"">The <see cref=""HttpCompletionOption""/> for the request.</param>";

        sendOverloadParameters = "CancellationToken cancellationToken, HttpCompletionOption httpCompletionOption = HttpCompletionOption.ResponseContentRead";
    }
    else
    {
        sendParameterHeadersForOverload = "/// <param name=\"cancellationToken\">The <see cref=\"CancellationToken\"/> for the request.</param>";
        sendOverloadParameters = "CancellationToken cancellationToken";
    }

#>

        /// <summary>
        /// Issues the <#=httpMethod#> request.
        /// </summary>
        <#=methodReturnType#> <#=httpMethod.ToLower().ToCheckedCase()#>Async();

        /// <summary>
        /// Issues the <#=httpMethod#> request.
        /// </summary>
        /// <#=sendParameterHeadersForOverload#>
        /// <returns><#=methodReturnTag#></returns>
        <#=methodReturnType#> <#=httpMethod.ToLower().ToCheckedCase()#>Async(<#=sendOverloadParameters#>);
<#
    if (!returnsStream)
    {
        if (features.CanExpand)
        {
#>

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        I<#=requestType#> Expand(string value);
<#
        }

        if (features.CanSelect)
        {
#>

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        I<#=requestType#> Select(string value);
<#
        }

        if (isCollection)
        {

            if (features.CanUseTop)
            {
#>

        /// <summary>
        /// Adds the specified top value to the request.
        /// </summary>
        /// <param name="value">The top value.</param>
        /// <returns>The request object to send.</returns>
        I<#=requestType#> Top(int value);
<#
            }

            if (features.CanFilter)
            {
#>

        /// <summary>
        /// Adds the specified filter value to the request.
        /// </summary>
        /// <param name="value">The filter value.</param>
        /// <returns>The request object to send.</returns>
        I<#=requestType#> Filter(string value);
<#
            }

            if (features.CanSkip)
            {
#>

        /// <summary>
        /// Adds the specified skip value to the request.
        /// </summary>
        /// <param name="value">The skip value.</param>
        /// <returns>The request object to send.</returns>
        I<#=requestType#> Skip(int value);
<#
            }

            if (features.CanSort)
            {
#>

        /// <summary>
        /// Adds the specified orderby value to the request.
        /// </summary>
        /// <param name="value">The orderby value.</param>
        /// <returns>The request object to send.</returns>
        I<#=requestType#> OrderBy(string value);
<#
            }
        }
    }
#>
    }
}
