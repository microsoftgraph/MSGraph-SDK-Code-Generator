<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var method = host.CurrentType.AsOdcmMethod();
var entityName = method.Class.Name.ToCheckedCase();

var isFunction = method.IsFunction;
var isAction = !isFunction;
var isComposable = method.IsComposable;

var methodName = method.Name.Substring(method.Name.IndexOf('.') + 1).ToCheckedCase();
var requestType = entityName + methodName + "Request";

var returnEntityType = method.ReturnType == null ? null : method.ReturnType.Name.GetTypeString();

var returnEntityParameter = string.Empty;
if (returnEntityType != null) {returnEntityParameter = returnEntityType.ToLower();}

var returnTypeObject = method.ReturnType == null ? null : method.ReturnType.AsOdcmClass();

var isCollection = method.IsCollection;

var sendAsyncReturnType = isCollection
    ? "I" + entityName + methodName + "CollectionPage"
    : returnEntityType;

var methodReturnType = sendAsyncReturnType == null
    ? "System.Threading.Tasks.Task"
    : "System.Threading.Tasks.Task<" + sendAsyncReturnType + ">";

string methodOverloadReturnType = methodReturnType;

if (isCollection)
{
    methodReturnType = string.Concat("async ", methodReturnType);
}

bool hasParameters = method.Parameters != null && method.Parameters.Any();
bool includeRequestBody = hasParameters && isAction;
bool returnsStream = string.Equals(sendAsyncReturnType, "Stream");

var features = host.CurrentType.GetFeatures();

#>

namespace <#=method.Namespace.GetNamespaceName()#>
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Threading;

    /// <summary>
    /// The type <#=requestType#>.
    /// </summary>
    public partial class <#=requestType#> : BaseRequest, I<#=requestType#>
    {
        /// <summary>
        /// Constructs a new <#=requestType#>.
        /// </summary>
        public <#=requestType#>(
            string requestUrl,
            IBaseClient client,
            IEnumerable<Option> options)
            : base(requestUrl, client, options)
        {
<#
    if (includeRequestBody)
    {
#>
            this.ContentType = "application/json";
            this.RequestBody = new <#=requestType#>Body();
<#
    }
#>
        }
<#
    if (includeRequestBody)
    {
#>

        /// <summary>
        /// Gets the request body.
        /// </summary>
        public <#=requestType#>Body RequestBody { get; private set; }
<#
    }
#>
<# 
    if(isAction) // POST
    {
#>

        /// <summary>
        /// Issues the POST request.
        /// </summary>
        public <#=methodOverloadReturnType#> PostAsync()
        {
            return this.PostAsync(CancellationToken.None);
        }

        /// <summary>
        /// Issues the POST request.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
<#
    if (returnsStream)
    {
#>
        /// <param name="httpCompletionOption">The <see cref="HttpCompletionOption"/> for the request.</param>
<#
    }
#>
        /// <returns>The task to await for async call.</returns>
        public <#=methodReturnType#> PostAsync(
<#
    if (returnsStream)
    {
#>
            CancellationToken cancellationToken,
            HttpCompletionOption httpCompletionOption = HttpCompletionOption.ResponseContentRead)
<#
    }
    else
    {
#>
            CancellationToken cancellationToken)
<#
    }
#>
        {
            this.Method = "POST";
<#
    var methodParameter = includeRequestBody ? "this.RequestBody" : "null";

    if (isCollection)
    {
#>
            var response = await this.SendAsync<<#=entityName#><#=methodName#>CollectionResponse>(<#=methodParameter#>, cancellationToken).ConfigureAwait(false);
            if (response != null && response.Value != null && response.Value.CurrentPage != null)
            {
                if (response.AdditionalData != null)
                {
                    response.Value.AdditionalData = response.AdditionalData;

                    object nextPageLink;
                    response.AdditionalData.TryGetValue("@odata.nextLink", out nextPageLink);

                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        response.Value.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                return response.Value;
            }

            return null;
<#
    }
    else if (returnsStream)
    {
#>
            return this.SendStreamRequestAsync(null, cancellationToken, httpCompletionOption);
<#
    }
    else if (!string.IsNullOrEmpty(sendAsyncReturnType))
    {
#>
            return this.SendAsync<<#=sendAsyncReturnType#>>(<#=methodParameter#>, cancellationToken);
<#
    }
    else
    {
#>
            return this.SendAsync(<#=methodParameter#>, cancellationToken);
<#
    }
#>
        }

<#  } // End POST

#>

<# 
    if(method.IsFunction) // GET for a OData function.
    {
#>
        /// <summary>
        /// Issues the GET request.
        /// </summary>
        public <#=methodOverloadReturnType#> GetAsync()
        {
            return this.GetAsync(CancellationToken.None);
        }

        /// <summary>
        /// Issues the GET request.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
<#
    if (returnsStream)
    {
#>
        /// <param name="httpCompletionOption">The <see cref="HttpCompletionOption"/> for the request.</param>
<#
    }
#>
        /// <returns>The task to await for async call.</returns>
        public <#=methodReturnType#> GetAsync(
<#
    if (returnsStream)
    {
#>
            CancellationToken cancellationToken,
            HttpCompletionOption httpCompletionOption = HttpCompletionOption.ResponseContentRead)
<#
    }
    else
    {
#>
            CancellationToken cancellationToken)
<#
    }
#>
        {
            this.Method = "GET";
<#
   // var methodParameter = includeRequestBody ? "this.RequestBody" : "null";

    if (isCollection)
    {
#>
            var response = await this.SendAsync<<#=entityName#><#=methodName#>CollectionResponse>(null, cancellationToken).ConfigureAwait(false);
            if (response != null && response.Value != null && response.Value.CurrentPage != null)
            {
                if (response.AdditionalData != null)
                {
                    response.Value.AdditionalData = response.AdditionalData;

                    object nextPageLink;
                    response.AdditionalData.TryGetValue("@odata.nextLink", out nextPageLink);

                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        response.Value.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                return response.Value;
            }

            return null;
<#
    }
    else if (returnsStream)
    {
#>
            return this.SendStreamRequestAsync(null, cancellationToken, httpCompletionOption);
<#
    }
    else if (!string.IsNullOrEmpty(sendAsyncReturnType))
    {
#>
            return this.SendAsync<<#=sendAsyncReturnType#>>(null, cancellationToken);
<#
    }
    else
    {
#>
            return this.SendAsync(null, cancellationToken);
<#
    }
#>
        }
<#  } // End GET
 #>

<#
    if (!returnsStream)
    {
        if (features.CanExpand)
        {
#>

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> Expand(string value)
        {
            this.QueryOptions.Add(new QueryOption("$expand", value));
            return this;
        }
<#
        }

        if (features.CanSelect)
        {
#>

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> Select(string value)
        {
            this.QueryOptions.Add(new QueryOption("$select", value));
            return this;
        }
<#
        }

        if (isCollection)
        {
            if (features.CanUseTop)
            {
#>

        /// <summary>
        /// Adds the specified top value to the request.
        /// </summary>
        /// <param name="value">The top value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> Top(int value)
        {
            this.QueryOptions.Add(new QueryOption("$top", value.ToString()));
            return this;
        }
<#
            }

            if (features.CanFilter)
            {
#>

        /// <summary>
        /// Adds the specified filter value to the request.
        /// </summary>
        /// <param name="value">The filter value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> Filter(string value)
        {
            this.QueryOptions.Add(new QueryOption("$filter", value));
            return this;
        }
<#
            }

            if (features.CanSkip)
            {
#>

        /// <summary>
        /// Adds the specified skip value to the request.
        /// </summary>
        /// <param name="value">The skip value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> Skip(int value)
        {
            this.QueryOptions.Add(new QueryOption("$skip", value.ToString()));
            return this;
        }
<#
            }

            if (features.CanSort)
            {
#>

        /// <summary>
        /// Adds the specified orderby value to the request.
        /// </summary>
        /// <param name="value">The orderby value.</param>
        /// <returns>The request object to send.</returns>
        public I<#=requestType#> OrderBy(string value)
        {
            this.QueryOptions.Add(new QueryOption("$orderby", value));
            return this;
        }
<#
            }
        }
    }
#>
    }
}
