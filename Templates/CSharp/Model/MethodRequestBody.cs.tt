<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var method = host.CurrentType.AsOdcmMethod();
var entityName = method.Class.Name.ToCheckedCase();
var requestBody = entityName + method.Name.Substring(method.Name.IndexOf('.') + 1).ToCheckedCase() + "RequestBody";

// Commenting this out as 12.1.1.1, Action Overload Rules, states "Bound actions support overloading (multiple 
// actions having the same name within the same namespace) by binding parameter type. The combination of action 
// name and the binding parameter type MUST be unique within a namespace."
// System.Diagnostics.Debug.Assert(!method.Overloads.Any(), "Overload actions are not allowed in OData services");

var attributeStringBuilder = new StringBuilder();
attributeStringBuilder.Append("[JsonObject(MemberSerialization = MemberSerialization.OptIn)]");
#>

namespace <#=method.Namespace.GetNamespaceName()#>
{
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;

    /// <summary>
    /// The type <#=requestBody#>.
    /// </summary>
    <#=attributeStringBuilder.ToString()#>
    public partial class <#=requestBody#>
    {
    <#
    foreach (var param in method.WithDistinctParameters())
    {
        var paramTypeString = param.Type.GetTypeString(method.Namespace.GetNamespaceName());
        
        // Adds support for classes ending in "Request" that have been dismabiguated.
        if (paramTypeString.EndsWith("Request"))
        {   
            paramTypeString = String.Concat(paramTypeString, "Object");
        }
        if (param.IsCollection)
        {
            paramTypeString = string.Format("IEnumerable<{0}>", paramTypeString);
        }
        else if (param.IsNullable && !param.Type.IsTypeNullable())
        {
            paramTypeString = string.Format("{0}?", paramTypeString);
        }

        var paramName = param.Name.ToCheckedCase().GetSanitizedPropertyName();
		var attributeDefinition = string.Format("[JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = \"{0}\", Required = Newtonsoft.Json.Required.Default)]", param.Name);
    #>

        /// <summary>
        /// Gets or sets <#=paramName#>.
        /// </summary>
        <#=attributeDefinition#>
        public <#=paramTypeString#> <#=paramName#> { get; set; }
    <#
    }
    #>

    }
}
