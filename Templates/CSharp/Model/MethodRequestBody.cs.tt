<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

var method = host.CurrentType.AsOdcmMethod();
var entityName = method.Class.Name.ToCheckedCase();
var requestBody = entityName + method.Name.Substring(method.Name.IndexOf('.') + 1).ToCheckedCase() + "RequestBody";
var namespaceName = method.Namespace.GetNamespaceName();

// These types of request bodies are only used for OData actions, which when containing parameters,
// will always result in POST calls. The OData spec is explicit in saying that overload methods bound
// to other types are explicitly not allowed. Therefore, any overload methods found here are invalid
// and violate the spec.
System.Diagnostics.Debug.Assert(!method.Overloads.Any(), "Overload actions are not allowed in OData services");

#>

namespace <#=namespaceName#>
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
<# if (!this.IsGraphNamespace(namespaceName)) { #>
    using Microsoft.Graph;
<# } #>

    /// <summary>
    /// The type <#=requestBody#>.
    /// </summary>
    [DataContract]
    public partial class <#=requestBody#>
    {
    <#
    foreach (var param in method.Parameters)
    {
        var paramTypeString = param.Type.GetTypeString();

        if (param.IsCollection)
        {
            paramTypeString = string.Format("IEnumerable<{0}>", paramTypeString);
        }
        else if (param.IsNullable && !param.Type.IsTypeNullable())
        {
            paramTypeString = string.Format("{0}?", paramTypeString);
        }

        var paramName = param.Name.ToCheckedCase().GetSanitizedPropertyName();
    #>

        /// <summary>
        /// Gets or sets <#=paramName#>.
        /// </summary>
        [DataMember(Name = "<#=param.Name#>", EmitDefaultValue = false, IsRequired = false)]
        public <#=paramTypeString#> <#=paramName#> { get; set; }
    <#
    }
    #>

    }
}
