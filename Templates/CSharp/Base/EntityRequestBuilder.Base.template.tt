<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="RequestBuilder.Base.template.tt"#>
<#+

// -------------------------------------------------------------
// Methods for standard entity classes
// -------------------------------------------------------------
public string GetEntityRequestBuilderClassDefinition(OdcmClass odcmClass)
{
    return this.GetEntityClassDefinition(odcmClass);
}

public string GetEntityRequestBuilderConstructor(OdcmClass odcmClass)
{
    return this.GetConstructor(this.GetEntityRequestBuilderName(odcmClass));
}

public string GetEntityRequestMethod(OdcmClass odcmClass)
{
    return this.GetRequestMethod(this.GetEntityRequestName(odcmClass), odcmClass.Base != null);
}

public string GetEntityRequestMethodWithOptions(OdcmClass odcmClass)
{
    return this.GetRequestMethodWithOptions(this.GetEntityRequestName(odcmClass), odcmClass.Base != null);
}


// -------------------------------------------------------------
// Methods for the reference of an entity
// -------------------------------------------------------------
public string GetEntityReferenceRequestBuilderClassDefinition(OdcmClass odcmClass)
{
    return this.GetClassDefinition(this.GetEntityReferenceRequestBuilderName(odcmClass));
}

public string GetEntityReferenceRequestBuilderConstructor(OdcmClass odcmClass)
{
    return this.GetConstructor(this.GetEntityReferenceRequestBuilderName(odcmClass));
}

public string GetEntityReferenceRequestMethod(OdcmClass odcmClass)
{
    return this.GetRequestMethod(this.GetEntityReferenceRequestName(odcmClass));
}

public string GetEntityReferenceRequestMethodWithOptions(OdcmClass odcmClass)
{
    return this.GetRequestMethodWithOptions(this.GetEntityReferenceRequestName(odcmClass));
}

public string GetEntityReferenceRequestBuilderProperty(OdcmClass odcmClass)
{
    var stringBuilder = new StringBuilder();
    var requestBuilderTypeName = this.GetEntityReferenceRequestBuilderName(odcmClass);

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Gets the request builder for the reference of the {0}.", this.GetEntityNameString(odcmClass).ToLowerFirstChar());
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <returns>The <see cref=\"I{0}\"/>.</returns>", requestBuilderTypeName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public I{0} Reference", requestBuilderTypeName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(
@"        {
            get
            {
");
    stringBuilder.AppendFormat("                return new {0}(this.AppendSegmentToRequestUrl(\"$ref\"), this.Client);", requestBuilderTypeName);
    stringBuilder.Append(
@"
            }
        }");

    return stringBuilder.ToString();
}


// -------------------------------------------------------------
// Methods for entity classes that support $ref addressing
// -------------------------------------------------------------
public string GetEntityWithReferenceRequestBuilderClassDefinition(OdcmClass odcmClass)
{
    return this.GetClassDefinition(this.GetEntityWithReferenceRequestBuilderName(odcmClass));
}

public string GetEntityWithReferenceRequestBuilderConstructor(OdcmClass odcmClass)
{
    return this.GetConstructor(this.GetEntityWithReferenceRequestBuilderName(odcmClass));
}

public string GetEntityWithReferenceRequestMethod(OdcmClass odcmClass)
{
    return this.GetRequestMethod(this.GetEntityWithReferenceRequestName(odcmClass));
}

public string GetEntityWithReferenceRequestMethodWithOptions(OdcmClass odcmClass)
{
    return this.GetRequestMethodWithOptions(this.GetEntityWithReferenceRequestName(odcmClass));
}


// -------------------------------------------------------------
// Methods to create a standard property definition within an entity class
// -------------------------------------------------------------
public string GetRequestBuilderProperty(string propertyName, string requestBuilderTypeName)
{
    return this.GetRequestBuilderProperty(propertyName, propertyName.ToLowerFirstChar(), requestBuilderTypeName);
}

public string GetRequestBuilderProperty(string propertyName, string urlValue, string requestBuilderTypeName)
{
    var stringBuilder = new StringBuilder();

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Gets the request builder for {0}.", propertyName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <returns>The <see cref=\"I{0}\"/>.</returns>", requestBuilderTypeName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public I{0} {1}", requestBuilderTypeName, propertyName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(
@"        {
            get
            {
");
    stringBuilder.AppendFormat("                return new {0}(this.AppendSegmentToRequestUrl(\"{1}\"), this.Client);", requestBuilderTypeName, urlValue);
    stringBuilder.Append(
@"
            }
        }");

    return stringBuilder.ToString();
}

public string GetCollectionPropertyRequestBuilderProperty(string entityName, OdcmProperty odcmProperty)
{
    var propertyName = this.GetPropertyName(odcmProperty).GetSanitizedPropertyName();
    var propertyPrefix = string.Concat(entityName, this.GetPropertyName(odcmProperty));
    var collectionRequestBuilder = odcmProperty.IsReference()
        ? this.GetCollectionWithReferencesRequestBuilderString(propertyPrefix)
        : this.GetCollectionRequestBuilderString(propertyPrefix);

    return this.GetRequestBuilderProperty(propertyName, collectionRequestBuilder);
}

public string GetNonCollectionRequestBuilderProperty(OdcmProperty odcmProperty)
{
    var propertyName = this.GetPropertyName(odcmProperty).GetSanitizedPropertyName();
    var propertyPrefix = this.GetPropertyTypeName(odcmProperty);
    var propertyRequestBuilder = odcmProperty.IsReference()
        ? this.GetWithReferenceRequestBuilderString(propertyPrefix)
        : this.GetRequestBuilderString(propertyPrefix);

    return this.GetRequestBuilderProperty(propertyName, propertyRequestBuilder);
}


// -------------------------------------------------------------
// Methods to create an OData method property definition within an entity class
// -------------------------------------------------------------
public string GetMethodRequestBuilderMethod(
    string methodName,
    string requestBuilderBaseString,
    string methodParamaterString,
    string requestBuilderInitializerString)
{
    var requestBuilderTypeName = this.GetRequestBuilderString(requestBuilderBaseString);
    var stringBuilder = new StringBuilder();

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Gets the request builder for {0}.", requestBuilderBaseString);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <returns>The <see cref=\"I{0}\"/>.</returns>", requestBuilderTypeName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public I{0} {1}({2})", requestBuilderTypeName, methodName, methodParamaterString);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(
@"        {
");
    stringBuilder.AppendFormat("            return new {0}({1});", requestBuilderTypeName, requestBuilderInitializerString);
    stringBuilder.Append(
@"
        }");

    return stringBuilder.ToString();
}

// Creates the set of property definitions for navigation properties on the entity
public string GetNavigationProperties(OdcmClass entity)
{
    var stringBuilder = new StringBuilder();
    foreach(var prop in entity.NavigationProperties())
    {
        if (stringBuilder.Length > 1)
        {
            stringBuilder.Append(Environment.NewLine);
            stringBuilder.Append(Environment.NewLine);
            stringBuilder.Append("        ");
        }

        if (prop.IsCollection())
        {
            stringBuilder.Append(this.GetCollectionPropertyRequestBuilderProperty(this.GetEntityNameString(entity), prop));
        }
        else
        {
            stringBuilder.Append(this.GetNonCollectionRequestBuilderProperty(prop));
        }
    }

    return stringBuilder.ToString();
}

// Creates the set of property definitions for stream properties on the entity
public string GetStreamProperties(OdcmClass entity)
{
    var stringBuilder = new StringBuilder();
    bool contentStreamFound = false;
    foreach(var prop in entity.GetProperties(typeName:"Stream"))
    {
        if (stringBuilder.Length > 0)
        {
            stringBuilder.Append(Environment.NewLine);
            stringBuilder.Append(Environment.NewLine);
            stringBuilder.Append("        ");
        }

        var propName = this.GetPropertyName(prop);
        if (propName.Equals("Content"))
        {
            contentStreamFound = true;
        }

        var propRequestBuilder = this.GetRequestBuilderString(propName);

        stringBuilder.Append(this.GetRequestBuilderProperty(propName, string.Concat(this.GetEntityNameString(entity), propRequestBuilder)));
    }

    if (entity.Kind == OdcmClassKind.MediaEntity && !contentStreamFound)
    {
        if (stringBuilder.Length > 0)
        {
            stringBuilder.Append(Environment.NewLine);
            stringBuilder.Append(Environment.NewLine);
            stringBuilder.Append("        ");
        }

        stringBuilder.Append(this.GetRequestBuilderProperty("Content", "$value", string.Concat(this.GetEntityNameString(entity), "ContentRequestBuilder")));
    }

    return stringBuilder.ToString();
}

// Creates the set of property definitions for OData method properties on the entity
public string GetMethodProperties(OdcmClass entity)
{
    var allMethods = new List<OdcmMethod>();
    foreach (var method in entity.Methods)
    {
        allMethods.Add(method);
        allMethods.AddRange(method.Overloads);
    }

    var methodPropertiesStringBuilder = new StringBuilder();
    foreach(var method in allMethods)
    {
        var methodName = this.GetMethodName(method);
        var baseName = string.Concat(this.GetEntityNameString(method.Class), methodName);

        var paramStringBuilder = new System.Text.StringBuilder();
        var builderInitializerStringBuilder = new StringBuilder();

        builderInitializerStringBuilder.Append(Environment.NewLine);
        builderInitializerStringBuilder.Append("                ");
        builderInitializerStringBuilder.AppendFormat("this.AppendSegmentToRequestUrl(\"{0}.{1}\"),", method.Namespace.Name, method.Name);
        builderInitializerStringBuilder.Append(Environment.NewLine);
        builderInitializerStringBuilder.Append("                ");
        builderInitializerStringBuilder.Append("this.Client,");

        var hasParameters = method.Parameters != null && method.Parameters.Any();

        if (hasParameters)
        {
            var requiredParameters = method.Parameters.Where(param => !param.IsNullable);
            var optionalParameters = method.Parameters.Where(param => param.IsNullable);

            foreach (var param in requiredParameters)
            {
                var paramVariableName = param.Name.GetSanitizedParameterName();
                var paramTypeString = param.Type.GetTypeString();

                if (param.IsCollection)
                {
                    paramTypeString = string.Format("IEnumerable<{0}>", paramTypeString);
                }

                paramStringBuilder.Append(Environment.NewLine);
                paramStringBuilder.Append("            ");
                paramStringBuilder.AppendFormat("{0} {1},", paramTypeString, paramVariableName);

                builderInitializerStringBuilder.Append(Environment.NewLine);
                builderInitializerStringBuilder.Append("                ");
                builderInitializerStringBuilder.AppendFormat("{0},", paramVariableName);
            }

            foreach (var param in optionalParameters)
            {
                var paramVariableName = param.Name.GetSanitizedParameterName();
                var paramTypeString = param.Type.GetTypeString();

                if (param.IsCollection)
                {
                    paramTypeString = string.Format("IEnumerable<{0}>", paramTypeString);
                }
                else if(!param.Type.IsTypeNullable())
                {
                    paramTypeString = string.Format("{0}?", paramTypeString);
                }

                paramStringBuilder.Append(Environment.NewLine);
                paramStringBuilder.Append("            ");
                paramStringBuilder.AppendFormat("{0} {1} = null,", paramTypeString, paramVariableName);

                builderInitializerStringBuilder.Append(Environment.NewLine);
                builderInitializerStringBuilder.Append("                ");
                builderInitializerStringBuilder.AppendFormat("{0},", paramVariableName);
            }

            paramStringBuilder.Remove(paramStringBuilder.Length - 1, 1);
        }

        builderInitializerStringBuilder.Remove(builderInitializerStringBuilder.Length - 1, 1);

        if (methodPropertiesStringBuilder.Length > 0)
        {
            methodPropertiesStringBuilder.Append(Environment.NewLine);
            methodPropertiesStringBuilder.Append(Environment.NewLine);
            methodPropertiesStringBuilder.Append("        ");
        }

        methodPropertiesStringBuilder.Append(
            this.GetMethodRequestBuilderMethod(
                methodName,
                baseName,
                paramStringBuilder.ToString(),
                builderInitializerStringBuilder.ToString()));
    }

    return methodPropertiesStringBuilder.ToString();
}

#>
