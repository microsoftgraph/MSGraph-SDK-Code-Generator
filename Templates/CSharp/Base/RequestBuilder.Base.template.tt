<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#+

public string GetClassDefinition(string className)
{
    var stringBuilder = new StringBuilder();

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("    /// The type {0}.", className);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("    /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("    public partial class {0} : BaseRequestBuilder, I{0}", className);

    return stringBuilder.ToString();
}

public string GetEntityClassDefinition(OdcmClass entity)
{
    string typeDeclaration = null;
    var className = this.GetEntityRequestBuilderName(entity);

    if (entity.Base != null)
    {
        typeDeclaration = string.Format("{0} : {1}RequestBuilder, I{0}", className, entity.Base.Name.ToCheckedCase());
    }
    else
    {
        typeDeclaration = string.Format("{0} : BaseRequestBuilder, I{0}", className);
    }

    var stringBuilder = new StringBuilder();

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("    /// The type {0}.", className);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("    /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("    public partial class {0}", typeDeclaration);

    return stringBuilder.ToString();
}

public string GetConstructor(string instanceTypeName)
{
    var stringBuilder = new StringBuilder();

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Constructs a new {0}.", instanceTypeName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(
@"        /// </summary>
        /// <param name=""requestUrl"">The URL for the built request.</param>
        /// <param name=""client"">The <see cref=""IBaseClient""/> for handling requests.</param>");

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public {0}(", instanceTypeName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(
@"            string requestUrl,
            IBaseClient client)
            : base(requestUrl, client)
        {
        }");

    return stringBuilder.ToString();
}

public string GetRequestMethod(string requestTypeName, bool includeNewKeyword = false)
{
    var stringBuilder = new StringBuilder();
    stringBuilder.Append(this.GetRequestMethodHeader());
    stringBuilder.Append(Environment.NewLine);

    if (includeNewKeyword)
    {
        stringBuilder.AppendFormat("        public new I{0} Request()", requestTypeName);
    }
    else
    {
        stringBuilder.AppendFormat("        public I{0} Request()", requestTypeName);
    }

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(
@"        {
            return this.Request(null);
        }");

    return stringBuilder.ToString();
}

public string GetRequestMethodWithOptions(string requestTypeName, bool includeNewKeyword = false)
{
    var stringBuilder = new StringBuilder();

    stringBuilder.Append(this.GetRequestMethodWithOptionsHeader());
    stringBuilder.Append(Environment.NewLine);

    if (includeNewKeyword)
    {
        stringBuilder.AppendFormat("        public new I{0} Request(IEnumerable<Option> options)", requestTypeName);
    }
    else
    {
        stringBuilder.AppendFormat("        public I{0} Request(IEnumerable<Option> options)", requestTypeName);
    }

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        {");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            return new {0}(this.RequestUrl, this.Client, options);", requestTypeName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        }");
    return stringBuilder.ToString();
}

// Creates the set of property definitions for OData method properties on the entity
public string GetMethodProperties(OdcmClass entity, bool isCollection)
{
    var allMethods = new List<OdcmMethod>();
    foreach (var method in entity.Methods)
    {
        allMethods.Add(method);
        allMethods.AddRange(method.Overloads);
    }

    var methodPropertiesStringBuilder = new StringBuilder();
    foreach(var method in allMethods)
    {
		if (method.IsBoundToCollection != isCollection)
		{
			continue; 
		}

        var methodName = this.GetMethodName(method);
        var baseName = string.Concat(this.GetEntityNameString(method.Class), methodName);

        var paramStringBuilder = new System.Text.StringBuilder();
        var builderInitializerStringBuilder = new StringBuilder();

        builderInitializerStringBuilder.Append(Environment.NewLine);
        builderInitializerStringBuilder.Append("                ");
        builderInitializerStringBuilder.AppendFormat("this.AppendSegmentToRequestUrl(\"{0}.{1}\"),", method.Namespace.Name, method.Name);
        builderInitializerStringBuilder.Append(Environment.NewLine);
        builderInitializerStringBuilder.Append("                ");
        builderInitializerStringBuilder.Append("this.Client,");

        var hasParameters = method.Parameters != null && method.Parameters.Any();

        if (hasParameters)
        {
            var requiredParameters = method.Parameters.Where(param => !param.IsNullable);
            var optionalParameters = method.Parameters.Where(param => param.IsNullable);

            foreach (var param in requiredParameters)
            {
                var paramVariableName = param.Name.GetSanitizedParameterName();
                var paramTypeString = param.Type.GetTypeString();

                // Adds support for classes ending in "Request" that have been dismabiguated.
                if (paramTypeString.EndsWith("Request"))
                {   
                    paramTypeString = String.Concat(paramTypeString, "Object");
                }

                if (param.IsCollection)
                {
                    paramTypeString = string.Format("IEnumerable<{0}>", paramTypeString);
                }

                paramStringBuilder.Append(Environment.NewLine);
                paramStringBuilder.Append("            ");
                paramStringBuilder.AppendFormat("{0} {1},", paramTypeString, paramVariableName);

                builderInitializerStringBuilder.Append(Environment.NewLine);
                builderInitializerStringBuilder.Append("                ");
                builderInitializerStringBuilder.AppendFormat("{0},", paramVariableName);
            }

            foreach (var param in optionalParameters)
            {
                var paramVariableName = param.Name.GetSanitizedParameterName();
                var paramTypeString = param.Type.GetTypeString();

                if (param.IsCollection)
                {
                    paramTypeString = string.Format("IEnumerable<{0}>", paramTypeString);
                }
                else if(!param.Type.IsTypeNullable())
                {
                    paramTypeString = string.Format("{0}?", paramTypeString);
                }

                paramStringBuilder.Append(Environment.NewLine);
                paramStringBuilder.Append("            ");
                paramStringBuilder.AppendFormat("{0} {1} = null,", paramTypeString, paramVariableName);

                builderInitializerStringBuilder.Append(Environment.NewLine);
                builderInitializerStringBuilder.Append("                ");
                builderInitializerStringBuilder.AppendFormat("{0},", paramVariableName);
            }

            paramStringBuilder.Remove(paramStringBuilder.Length - 1, 1);
        }

        builderInitializerStringBuilder.Remove(builderInitializerStringBuilder.Length - 1, 1);

        if (methodPropertiesStringBuilder.Length > 0)
        {
            methodPropertiesStringBuilder.Append(Environment.NewLine);
            methodPropertiesStringBuilder.Append(Environment.NewLine);
            methodPropertiesStringBuilder.Append("        ");
        }

        methodPropertiesStringBuilder.Append(
            this.GetMethodRequestBuilderMethod(
                methodName,
                baseName,
                paramStringBuilder.ToString(),
                builderInitializerStringBuilder.ToString()));
    }

    return methodPropertiesStringBuilder.ToString();
}

// -------------------------------------------------------------
// Methods to create an OData method property definition within an entity class
// -------------------------------------------------------------
public string GetMethodRequestBuilderMethod(
    string methodName,
    string requestBuilderBaseString,
    string methodParamaterString,
    string requestBuilderInitializerString)
{
    var requestBuilderTypeName = this.GetRequestBuilderString(requestBuilderBaseString);
    var stringBuilder = new StringBuilder();

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// Gets the request builder for {0}.", requestBuilderBaseString);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <returns>The <see cref=\"I{0}\"/>.</returns>", requestBuilderTypeName);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public I{0} {1}({2})", requestBuilderTypeName, methodName, methodParamaterString);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(
@"        {
");
    stringBuilder.AppendFormat("            return new {0}({1});", requestBuilderTypeName, requestBuilderInitializerString);
    stringBuilder.Append(
@"
        }");

    return stringBuilder.ToString();
}

#>
